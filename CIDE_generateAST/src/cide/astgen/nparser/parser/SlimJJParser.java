/* Generated By:JavaCC: Do not edit this line. SlimJJParser.java */
package cide.astgen.nparser.parser;
import cide.astgen.nparser.ast.*;
import java.util.*;
import cide.astgen.nparser.ast.NAbstractValue.Type;
public class SlimJJParser implements SlimJJParserConstants {
/**	 * Accumulate {@link Token} objects from the token stream until a token	 * matching <code>tokenKind</code> is consumed from the stream. The tokens	 * are accumulated in <code>buffer</code>, including the terminating	 * token.	 * 	 * @return a {@link Token} formed by concatenating all intervening tokens	 *         and special tokens.	 */
        final private Token accumulateUntilToken(int tokenKind)
                        throws ParseException {

                StringBuffer buffer = new StringBuffer();
                Token token = getNextToken();

                // Initialize result with known information (starting position, etc.):                //                Token result = Token.newToken(OTHER);
                result.specialToken = null;

                Token startToken = firstSpecial(token);
                result.beginColumn = startToken.beginColumn;
                result.beginLine = startToken.beginLine;

                // Accumulate tokens until a <code>tokenKind</code> token is found:                //                while (token.kind != tokenKind) {

                        // Update information in result:                        //                        result.endColumn = token.endColumn;
                        result.endLine = token.endLine;
                        result.next = token.next;

                        if (token.kind == EOF)
                                throw new ParseException("from line " + result.beginLine
                                                + " at column " + result.beginColumn
                                                + ": EOF reached before " + tokenImage[tokenKind]
                                                + " found");

                        accumulate(token, buffer);
                        token = getNextToken();
                }

                accumulate(token, buffer);

                result.image = buffer.toString();
                return result;
        }

        private static boolean lastCharWasLetter=false;
        /**	 * Append the given {@link Token} and any preceding special tokens to a	 * given {@link StringBuffer}.	 * 	 * @param token	 *            the given JavaCC {@link Token} object	 * @param buffer	 *            the buffer to which to append <code>token</code>	 */
        final private static void accumulate(Token token, StringBuffer buffer) {
                if (token.image.equals("GRAMMARSTART")) return;
                // Append preceding special tokens to <code>buffer</code>:                //                Token special = firstSpecial(token);
                if (special != token)
                        while (special != null) {
                                String i = special.image;
                                if (lastCharWasLetter && Character.isLetter(i.charAt(0)))
                                        i = " " + i;
                                lastCharWasLetter = Character
                                                .isLetter(i.charAt(i.length() - 1));
                                buffer.append(i);
                                special = special.next;
                        }

                // Finally, append the token itself:                //                String i = token.image;
                if (lastCharWasLetter && Character.isLetter(i.charAt(0)))
                        i = " " + i;
                lastCharWasLetter = Character.isLetter(i.charAt(i.length() - 1));

                buffer.append(i);
        }

        /**	 * Finds the first token, special or otherwise, in the list of special	 * tokens preceding this {@link Token}. If this list is non-empty, the	 * result will be a special token. Otherwise, it will be the starting token.	 * 	 * @param token	 *            the given {@link Token}.	 * @return the first special token preceding <code>token</code>.	 */
        final private static Token firstSpecial(Token token) {

                while (token.specialToken != null)
                        token = token.specialToken;

                return token;
        }

  Token findIntroductionBlock() throws ParseException {
    return accumulateUntilToken (GRAMMARSTART) ;
  }

  final public NGrammar Grammar() throws ParseException {
  NGrammar result;
  NProduction p;
  Token t;
    t = findIntroductionBlock();
    result = new NGrammar(t.toString());
    label_1:
    while (true) {
      p = Production(result);
    result.productions.add(p);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public NProduction Production(NGrammar grammar) throws ParseException {
  Token n;
  NChoice c;
  NProduction result;
  NAnnotation a;
         result = new NProduction(grammar);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      a = Annotation();
                   result.addAnnotation(a);
    }
    n = jj_consume_token(IDENTIFIER);
    result.setName(n.toString());
    jj_consume_token(COLON);
    c = Choice(result);
    result.addChoice(c);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(BIT_OR);
      c = Choice(result);
    result.addChoice(c);
    }
    jj_consume_token(SEMICOLON);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public NChoice Choice(NProduction production) throws ParseException {
  NChoice result;
  NAbstractValue m;
  NAnnotation a;
  Token t;
  String i;
  List<String>tokenlist = new ArrayList<String>();
           result = new NChoice(production);
    label_4:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_4;
      }
      a = Annotation();
                                result.addAnnotation(a);
    }
    if (jj_2_2(2147483647)) {
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOOK_AHEAD:
        case LL:
        case JAVA:
        case STRING_LITERAL:
        case AT:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_5;
        }
        i = Text();
                                tokenlist.add(i);
      }
      m = Mult(result);
                 result.units.add(m);m.outerPreTokens.addAll(tokenlist);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOOK_AHEAD:
        case LL:
        case JAVA:
        case STRING_LITERAL:
        case AT:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_6;
        }
        PostText(m.outerPostTokens);
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPTIONAL:
        case JAVATOKEN:
        case LPAREN:
        case LBRACKET:
        case LT:
        case IDENTIFIER:
        case 131:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_7;
        }
        m = Mult(result);
                                           result.units.add(m);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LOOK_AHEAD:
          case LL:
          case JAVA:
          case STRING_LITERAL:
          case AT:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_8;
          }
          PostText(m.outerPostTokens);
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 130:
        jj_consume_token(130);
        t = jj_consume_token(IDENTIFIER);
            result.optName = t.toString();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
           {if (true) return result;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOOK_AHEAD:
      case LL:
      case JAVA:
      case STRING_LITERAL:
      case AT:
        i = Text();
            m=new NTextOnly(result, Type.ONE);
                m.outerPreTokens.add(i);
                result.units.add(m);
            {if (true) return result;}
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public NAbstractValue Mult(NChoice choice) throws ParseException {
  NAbstractValue u;
  List<String>tokenlist = new ArrayList<String>();
  String i;
  Token t;
    if (jj_2_3(2147483647)) {
      u = OneOrMore(choice);
                                                    {if (true) return u;}
    } else if (jj_2_4(2147483647)) {
      u = ZeroOrMore(choice);
                                                      {if (true) return u;}
    } else if (jj_2_5(2147483647)) {
      u = Wrappee(choice);
                                                 {if (true) return u;}
    } else if (jj_2_6(2147483647)) {
      u = OneOrZero(choice);
                                                     {if (true) return u;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JAVATOKEN:
      case LT:
      case IDENTIFIER:
      case 131:
        u = Unit(choice, Type.ONE);
                             {if (true) return u;}
        break;
      case OPTIONAL:
        u = OptionalWithDefault(choice);
                                  {if (true) return u;}
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public NAbstractValue OneOrMore(NChoice choice) throws ParseException {
  NAbstractValue u;
  List<String>tokenlist = new ArrayList<String>();
  String i;
    jj_consume_token(LPAREN);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOOK_AHEAD:
      case LL:
      case JAVA:
      case STRING_LITERAL:
      case AT:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_9;
      }
      i = Text();
              tokenlist.add(i);
    }
    u = Unit(choice, Type.ONEORMORE);
   u.innerPreTokens.addAll(tokenlist);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOOK_AHEAD:
      case LL:
      case JAVA:
      case STRING_LITERAL:
      case AT:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_10;
      }
      PostText(u.innerPostTokens);
    }
    jj_consume_token(RPAREN);
    jj_consume_token(PLUS);
   {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

  final public NAbstractValue ZeroOrMore(NChoice choice) throws ParseException {
  NAbstractValue u;
  List<String>tokenlist = new ArrayList<String>();
  String i;
    jj_consume_token(LPAREN);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOOK_AHEAD:
      case LL:
      case JAVA:
      case STRING_LITERAL:
      case AT:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_11;
      }
      i = Text();
              tokenlist.add(i);
    }
    u = Unit(choice, Type.ZEROORMORE);
   u.innerPreTokens.addAll(tokenlist);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOOK_AHEAD:
      case LL:
      case JAVA:
      case STRING_LITERAL:
      case AT:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_12;
      }
      PostText(u.innerPostTokens);
    }
    jj_consume_token(RPAREN);
    jj_consume_token(STAR);
   {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

  final public NAbstractValue OneOrZero(NChoice choice) throws ParseException {
  NAbstractValue u;
  List<String>tokenlist = new ArrayList<String>();
  String i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOOK_AHEAD:
        case LL:
        case JAVA:
        case STRING_LITERAL:
        case AT:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_13;
        }
        i = Text();
              tokenlist.add(i);
      }
      u = Unit(choice, Type.ZEROORONE);
   u.innerPreTokens.addAll(tokenlist);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOOK_AHEAD:
        case LL:
        case JAVA:
        case STRING_LITERAL:
        case AT:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_14;
        }
        PostText(u.innerPostTokens);
      }
      jj_consume_token(RBRACKET);
   {if (true) return u;}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOOK_AHEAD:
        case LL:
        case JAVA:
        case STRING_LITERAL:
        case AT:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_15;
        }
        i = Text();
              tokenlist.add(i);
      }
      u = Unit(choice, Type.ZEROORONE);
   u.innerPreTokens.addAll(tokenlist);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOOK_AHEAD:
        case LL:
        case JAVA:
        case STRING_LITERAL:
        case AT:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_16;
        }
        PostText(u.innerPostTokens);
      }
      jj_consume_token(RPAREN);
      jj_consume_token(HOOK);
   {if (true) return u;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NAbstractValue OptionalWithDefault(NChoice choice) throws ParseException {
  NAbstractValue u;
  Token t;
    jj_consume_token(OPTIONAL);
    jj_consume_token(LPAREN);
    u = Unit(choice, Type.OPTIONALWITHDEFAULT);
    jj_consume_token(COMMA);
    t = jj_consume_token(STRING_LITERAL);
    jj_consume_token(RPAREN);
    u.defaultValue = t.toString(); {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

  final public NAbstractValue Wrappee(NChoice choice) throws ParseException {
  NAbstractValue u;
    u = Unit(choice, Type.ONE);
    jj_consume_token(BANG);
    u.isWrappee=true; {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

  final public NAbstractValue Unit(NChoice choice, Type type) throws ParseException {
  NAbstractValue r;
  String a=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 131:
      a = ASTGeneratorAnnotation();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      r = NonTerminal(choice, type);
      break;
    case JAVATOKEN:
    case LT:
      r = Ident(choice, type);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (a!=null) r.innerPreTokens.add(a);
        {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public NNonTerminal NonTerminal(NChoice choice, Type type) throws ParseException {
  Token i;
  NNonTerminal r;
    i = jj_consume_token(IDENTIFIER);
   r=new NNonTerminal(choice, type, i.toString());
    if (jj_2_7(3)) {
      jj_consume_token(LBRACE);
      i = jj_consume_token(IDENTIFIER);
      jj_consume_token(RBRACE);
                                         r.setWrapsAroundType(i.toString());
    } else {
      ;
    }
   {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public NAbstractValue Ident(NChoice choice, Type type) throws ParseException {
  Token i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JAVATOKEN:
      jj_consume_token(JAVATOKEN);
      jj_consume_token(LPAREN);
      i = jj_consume_token(IDENTIFIER);
      jj_consume_token(RPAREN);
                  {if (true) return new NJavaToken(choice, type, i.toString());}
      break;
    case LT:
      jj_consume_token(LT);
      i = jj_consume_token(IDENTIFIER);
      jj_consume_token(GT);
         if (i.toString().equals("NONE")) {if (true) return new NTextOnly(choice, type);}
                else {if (true) return new NValue(choice, type, i.toString());}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Text() throws ParseException {
  Token i;
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOOK_AHEAD:
    case LL:
      s = Lookahead();
                         {if (true) return s;}
      break;
    case JAVA:
      s = Java();
                    {if (true) return s;}
      break;
    case STRING_LITERAL:
      i = jj_consume_token(STRING_LITERAL);
                              {if (true) return i.toString();}
      break;
    case AT:
      s = LayoutHint();
                            {if (true) return s;}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void PostText(List<String>list) throws ParseException {
  Token i;
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOOK_AHEAD:
    case LL:
      s = Lookahead();
                         list.add(s);
      break;
    case JAVA:
      s = Java();
                    list.add(s);
      break;
    case STRING_LITERAL:
      i = jj_consume_token(STRING_LITERAL);
                              list.add(i.toString());
      break;
    case AT:
      s = LayoutHint();
                           list.add(s);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String LayoutHint() throws ParseException {
  String result = "@";
    jj_consume_token(AT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
                    result+="+";
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
                result+="-";
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
      jj_consume_token(BANG);
                result+="n";
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      jj_consume_token(TILDE);
                result+="s";
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIT_AND:
      jj_consume_token(BIT_AND);
                result+="&";
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REM:
      jj_consume_token(REM);
                result+="%";
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
         {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

////Annoations in the format @X([Y])//String Annotation(): {//	Token i,j=null;//}{//	"@" i=<IDENTIFIER> "(" [j=<IDENTIFIER>] ")"//	{return "@"+i.toString()+"("+(j==null?"":j.toString())+")";}//}  final public NAnnotation Annotation() throws ParseException {
                            NAnnotation a;
    if (jj_2_8(2147483647)) {
      a = NormalAnnotation();
    } else if (jj_2_9(2147483647)) {
      a = SingleMemberAnnotation();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        a = MarkerAnnotation();
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public NAnnotation NormalAnnotation() throws ParseException {
                                 Token i;NAnnotation a;
    jj_consume_token(AT);
    i = jj_consume_token(IDENTIFIER);
                       a= new NAnnotation(i.toString());
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      MemberValuePairs(a);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public NAnnotation MarkerAnnotation() throws ParseException {
                                 Token i;
    jj_consume_token(AT);
    i = jj_consume_token(IDENTIFIER);
   {if (true) return new NAnnotation(i.toString());}
    throw new Error("Missing return statement in function");
  }

  final public NAnnotation SingleMemberAnnotation() throws ParseException {
                                       Token i;String v;NAnnotation a;
    jj_consume_token(AT);
    i = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    v = AnnotationValue();
    jj_consume_token(RPAREN);
   a=new NAnnotation(i.toString());a.addValue("value",v); {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public void MemberValuePairs(NAnnotation a) throws ParseException {
    MemberValuePair(a);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_17;
      }
      jj_consume_token(COMMA);
      MemberValuePair(a);
    }
  }

  final public void MemberValuePair(NAnnotation a) throws ParseException {
                                     Token n;String v;
    n = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    v = AnnotationValue();
     a.addValue(n.toString(), v.toString());
  }

  final public String AnnotationValue() throws ParseException {
                           Token v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      v = jj_consume_token(INTEGER_LITERAL);
         {if (true) return v.toString();}
      break;
    case STRING_LITERAL:
      v = jj_consume_token(STRING_LITERAL);
         {if (true) return v.toString();}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String ASTGeneratorAnnotation() throws ParseException {
    jj_consume_token(131);
         {if (true) return "&LI";}
    throw new Error("Missing return statement in function");
  }

  final public String Lookahead() throws ParseException {
  Token i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOOK_AHEAD:
      jj_consume_token(LOOK_AHEAD);
      break;
    case LL:
      jj_consume_token(LL);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      i = jj_consume_token(INTEGER_LITERAL);
      break;
    case STRING_LITERAL:
      i = jj_consume_token(STRING_LITERAL);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
    {if (true) return "L"+i.image;}
    throw new Error("Missing return statement in function");
  }

  final public String Java() throws ParseException {
  Token i;
    jj_consume_token(JAVA);
    jj_consume_token(LPAREN);
    i = jj_consume_token(STRING_LITERAL);
    jj_consume_token(RPAREN);
    {if (true) return "J"+i.image;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_3R_65() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(JAVA)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_37()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(HOOK)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(131)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_37()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(JAVATOKEN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_37()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_37()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(BIT_AND)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(AT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(OPTIONAL)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_60()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SlimJJParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[36];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x2000000,0x2000000,0x0,0x2008058,0x2008058,0x81100a0,0x2008058,0x0,0x2008058,0x80000a0,0x2008058,0x2008058,0x2008058,0x2008058,0x2008058,0x2008058,0x2008058,0x2008058,0x110000,0x0,0x8000080,0x8000080,0x2008058,0x2008058,0x0,0x0,0x20000000,0x40000000,0x0,0x0,0x2000000,0x0,0x800000,0x8100,0x18,0x8100,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x40000000,0x0,0x4000,0x0,0x0,0x40000000,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x200,0x400,0x0,0x0,0x2000,0x10000,0x0,0x40000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x4,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SlimJJParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SlimJJParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SlimJJParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SlimJJParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SlimJJParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SlimJJParser(SlimJJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SlimJJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[132];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 36; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 132; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

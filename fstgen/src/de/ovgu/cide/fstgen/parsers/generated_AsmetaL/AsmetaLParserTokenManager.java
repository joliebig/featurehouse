/* Generated By:JavaCC: Do not edit this line. AsmetaLParserTokenManager.java */
package de.ovgu.cide.fstgen.parsers.generated_AsmetaL;
import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;
import cide.gparser.*;
public class AsmetaLParserTokenManager implements AsmetaLParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x140L) != 0L || (active1 & 0x80000000L) != 0L)
            return 2;
         if ((active1 & 0x100000030000000L) != 0L)
            return 55;
         if ((active0 & 0x6000000920000L) != 0L || (active1 & 0x204400L) != 0L)
            return 17;
         if ((active0 & 0xfff9c0ffff6d6000L) != 0L || (active1 & 0x1fbbfbL) != 0L)
         {
            jjmatchedKind = 106;
            return 20;
         }
         if ((active0 & 0x3f0000000000L) != 0L)
         {
            jjmatchedKind = 103;
            return 52;
         }
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 106;
            return 11;
         }
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0x900000L) != 0L || (active1 & 0x200000L) != 0L)
            return 16;
         if ((active0 & 0x3f0000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 54;
         }
         if ((active0 & 0xfff9c0fbff6f6000L) != 0L || (active1 & 0x1ff9ffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 1;
            }
            return 20;
         }
         if ((active0 & 0x4000400000000L) != 0L || (active1 & 0x600L) != 0L)
            return 20;
         return -1;
      case 2:
         if ((active0 & 0x250000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 2;
            return 54;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 2;
            return 14;
         }
         if ((active0 & 0xf7f9c0fdff7f4000L) != 0L || (active1 & 0x1dedbfL) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 2;
            return 20;
         }
         if ((active0 & 0x1a0000000000L) != 0L)
            return 54;
         if ((active0 & 0x800000200002000L) != 0L || (active1 & 0x21040L) != 0L)
            return 20;
         return -1;
      case 3:
         if ((active0 & 0x76e180bdfeef4000L) != 0L || (active1 & 0x1ded99L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 3;
            return 20;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 3;
            return 54;
         }
         if ((active0 & 0x210000000000L) != 0L)
            return 54;
         if ((active0 & 0x8118404001100000L) != 0L || (active1 & 0x26L) != 0L)
            return 20;
         return -1;
      case 4:
         if ((active0 & 0x56c000adfeaf4000L) != 0L || (active1 & 0xed81L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 4;
            }
            return 20;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 4;
            }
            return 54;
         }
         if ((active0 & 0x2021801000400000L) != 0L || (active1 & 0x1d0018L) != 0L)
            return 20;
         return -1;
      case 5:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
            return 54;
         }
         if ((active0 & 0x68000a8f6a80000L) != 0L || (active1 & 0x10c000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 5;
            return 20;
         }
         if ((active0 & 0x5040000508074000L) != 0L || (active1 & 0x2d81L) != 0L)
            return 20;
         return -1;
      case 6:
         if ((active0 & 0x28000a8c6880000L) != 0L || (active1 & 0x108000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 6;
            return 20;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 6;
            return 54;
         }
         if ((active0 & 0x400000030200000L) != 0L || (active1 & 0x4000L) != 0L)
            return 20;
         return -1;
      case 7:
         if ((active0 & 0x2800008c2880000L) != 0L || (active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 7;
            return 20;
         }
         if ((active0 & 0x40000000000L) != 0L)
            return 54;
         if ((active0 & 0xa004000000L) != 0L || (active1 & 0x100000L) != 0L)
            return 20;
         return -1;
      case 8:
         if ((active0 & 0x82000000L) != 0L || (active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 8;
            return 20;
         }
         if ((active0 & 0x280000840880000L) != 0L)
            return 20;
         return -1;
      case 9:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 9;
            return 20;
         }
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x8000L) != 0L)
            return 20;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 113);
      case 41:
         return jjStopAtPos(0, 115);
      case 42:
         return jjStopAtPos(0, 94);
      case 43:
         return jjStartNfaWithStates_0(0, 92, 55);
      case 44:
         return jjStopAtPos(0, 114);
      case 45:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0x0L);
      case 46:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x140L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 116;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x0L);
      case 60:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000001000000L, 0x1L);
      case 61:
         return jjStopAtPos(0, 86);
      case 62:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000004000000L, 0x0L);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x50000000000L, 0x0L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 123);
      case 93:
         return jjStopAtPos(0, 124);
      case 94:
         return jjStopAtPos(0, 96);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2800412000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100000080000000L, 0x40100L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x432200000L, 0x200L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x34b0004000040000L, 0xa880L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800004000000L, 0x1L, 0x0L);
      case 105:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x4000000920000L, 0x204400L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x10000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x40004000L, 0x28L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200000201000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x40008108080000L, 0x1002L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8400000000000L, 0x20010L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4001000000000000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x180000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 117);
      case 124:
         return jjStopAtPos(0, 118);
      case 125:
         return jjStopAtPos(0, 119);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 45:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         break;
      case 46:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 60:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         break;
      case 61:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         break;
      case 62:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100981000000000L, active1, 0x40068L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x800020022200000L, active1, 0x1000L, active2, 0L);
      case 102:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000100000000L, active1, 0x180100L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000080000L, active1, 0L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x54a1004800900000L, active1, 0xa080L, active2, 0L);
      case 111:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x404c000c000L, active1, 0x10001L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x410000000000L, active1, 0x20000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x12000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000008000000L, active1, 0x4000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x208204000000L, active1, 0x14L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000040000L, active1, 0x800L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x108000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10008L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x14a1000000004000L, active1, 0xa080L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000001400000L, active1, 0x4000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x2200000L, active1, 0L);
      case 103:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 54);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x6040000000100000L, active1, 0x180022L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xa00000000000L, active1, 0x4L);
      case 109:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xd4000000L, active1, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x100L);
      case 112:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 54);
         return jjMoveStringLiteralDfa3_0(active0, 0x60000L, active1, 0L);
      case 113:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 54);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 20);
         break;
      case 114:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 70, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x20008000L, active1, 0x11L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x110003000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 20);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x40800L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x404000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      case 121:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x800010000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x410a00000L, active1, 0x10001L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000004000000L, active1, 0x40000L);
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 54);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 20);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 20);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 20);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x201040000000000L, active1, 0x800L);
      case 104:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20001062008000L, active1, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x180000L);
      case 109:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 20);
         break;
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 20);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x490000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L, active1, 0x500L);
      case 112:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0x4008L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2080808000000000L, active1, 0x2000L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x40002088000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000080000L, active1, 0x4080L);
      case 99:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 20);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000010000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 20);
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000008100000000L, active1, 0x102000L);
      case 102:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 20);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 20);
         break;
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 104:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x408000000L, active1, 0L);
      case 108:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 20);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0x1L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0xc00L);
      case 111:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 20);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 20);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200042080860000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 20);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 20);
         return jjMoveStringLiteralDfa5_0(active0, 0x44000000L, active1, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000200000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L);
      case 99:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 20);
         break;
      case 100:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 20);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 20);
         break;
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 20);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 20);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 20);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 20);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0x8000L);
      case 104:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000016808000L, active1, 0L);
      case 108:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 20);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 20);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0000000L, active1, 0L);
      case 113:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 20);
         break;
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 20);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 20);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x400040000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 20);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 20);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 20);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000080000L, active1, 0x4000L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x800800000L, active1, 0L);
      case 99:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 20);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 20);
         break;
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 20);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 20);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x8004000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0x8000L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 20);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000002000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L, active1, 0x8000L);
      case 99:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 20);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0L);
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x802000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 20);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 20);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 20);
         break;
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 19, 20);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 57, 20);
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L, active1, 0L);
      case 104:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 55, 20);
         break;
      case 108:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(8, 15);
         break;
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 35, 20);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 20);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 31, 20);
         break;
      case 101:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 79, 20);
         break;
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(10, 25, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 55:
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 14:
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(20);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(20);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAdd(20);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjCheckNAddTwoStates(5, 6);
                  }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(20);
                  break;
               case 52:
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(54);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                     jjCheckNAddStates(4, 12);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 4);
                  else if (curChar == 34)
                     jjCheckNAddStates(13, 15);
                  else if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 21:
                  if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  break;
               case 22:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 24:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 25:
                  if (curChar == 39 && kind > 109)
                     kind = 109;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 22);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 28:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 30:
                  if (curChar == 34)
                     jjCheckNAddStates(13, 15);
                  break;
               case 31:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 33:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 34:
                  if (curChar == 34 && kind > 110)
                     kind = 110;
                  break;
               case 35:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 37:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 39:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 4);
                  break;
               case 41:
                  if (curChar == 46)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 43:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAddStates(4, 12);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(50);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjstateSet[jjnewStateCnt++] = 53;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 55:
               case 4:
                  if (curChar != 105)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 95)
                     jjCheckNAdd(15);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 95)
                     jjCheckNAdd(12);
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(54);
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 102)
                        kind = 102;
                     jjCheckNAdd(53);
                  }
                  break;
               case 3:
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAddTwoStates(52, 54);
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if (curChar == 105)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjstateSet[jjnewStateCnt++] = 5;
                  }
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 9:
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(10);
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(20);
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 23:
                  if (curChar == 92)
                     jjAddStates(30, 32);
                  break;
               case 24:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 31:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 32:
                  if (curChar == 92)
                     jjAddStates(33, 35);
                  break;
               case 33:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 47:
                  if (curChar == 110 && kind > 98)
                     kind = 98;
                  break;
               case 51:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddTwoStates(52, 54);
                  break;
               case 53:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(16, 18);
                  break;
               case 31:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(13, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 55 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_5(0x800L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xc00000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7ffc00000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe97fffffeL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x400L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 111;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   40, 41, 43, 4, 45, 46, 47, 48, 49, 40, 41, 43, 4, 31, 32, 34, 
   22, 23, 25, 22, 23, 27, 25, 31, 32, 36, 34, 42, 43, 4, 24, 26, 
   28, 33, 35, 37, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\141\163\155", "\155\157\144\165\154\145", "\100\157\162\151\147\151\156\141\154", 
"\141\163\171\156\143\162", "\151\155\160\157\162\164", "\145\170\160\157\162\164", 
"\163\151\147\156\141\164\165\162\145", "\151\156\151\164", "\144\145\146\141\165\154\164", "\141\147\145\156\164", 
"\151\156\166\141\162\151\141\156\164", "\157\166\145\162", "\144\145\146\151\156\151\164\151\157\156\163", 
"\146\165\156\143\164\151\157\156", "\163\164\141\164\151\143", "\144\171\156\141\155\151\143", 
"\144\145\162\151\166\145\144", "\155\157\156\151\164\157\162\145\144", 
"\143\157\156\164\162\157\154\154\145\144", "\163\150\141\162\145\144", "\157\165\164", "\144\157\155\141\151\156", 
"\141\156\171\144\157\155\141\151\156", "\142\141\163\151\143", "\141\142\163\164\162\141\143\164", 
"\145\156\165\155", "\163\165\142\163\145\164\157\146", "\120\162\157\144", "\123\145\161", 
"\120\157\167\145\162\163\145\164", "\102\141\147", "\115\141\160", "\122\165\154\145", "\164\162\165\145", 
"\146\141\154\163\145", "\165\156\144\145\146", "\151", "\151\146", "\164\150\145\156", 
"\145\154\163\145", "\145\156\144\151\146", "\163\167\151\164\143\150", 
"\145\156\144\163\167\151\164\143\150", "\143\141\163\145", "\157\164\150\145\162\167\151\163\145", 
"\145\156\144\143\141\163\145", "\154\145\164", "\145\156\144\154\145\164", "\145\170\151\163\164", 
"\165\156\151\161\165\145", "\167\151\164\150", "\146\157\162\141\154\154", "\163\153\151\160", 
"\162\165\154\145", "\155\141\143\162\157", "\164\165\162\142\157", "\155\141\151\156", 
"\160\141\162", "\145\156\144\160\141\162", "\143\150\157\157\163\145", "\144\157", 
"\151\146\156\157\156\145", "\145\170\164\145\156\144", "\163\145\161", "\145\156\144\163\145\161", 
"\151\164\145\162\141\164\145", "\145\156\144\151\164\145\162\141\164\145", "\154\157\143\141\154", 
"\164\162\171", "\143\141\164\143\150", "\167\150\151\154\145", 
"\167\150\151\154\145\162\145\143", "\151\156", "\75", "\74", "\74\75", "\76", "\76\75", "\41\75", "\53", "\55", 
"\52", "\57", "\136", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\50", "\54", "\51", "\72", "\173", "\174", 
"\175", "\55\76", "\56", "\56\56", "\133", "\135", "\74\74", "\76\76", "\72\75", 
"\74\55", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "GENERIC_ID", 
   "MODULE_ID", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 3, 4, 5, 0, 0, 0, -1, 1, 1, -1, -1, 2, -1, -1, 1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffe001L, 0xffffe7ffffffffffL, 0x1L, 
};
static final long[] jjtoSkip = {
   0xe3eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe3eL, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x11c0L, 0x0L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[55];
private final int[] jjstateSet = new int[110];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public AsmetaLParserTokenManager(CharStream stream){
   input_stream = stream;
}
public AsmetaLParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 55; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   t.offset = input_stream.getOffset();
   t.length = input_stream.getLength();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}

/* Generated By:JavaCC: Do not edit this line. JavaJMLParser.java */
package tmp.generated_javaJML;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;


/**
 * Grammar to parse Java version 1.5
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class JavaJMLParser extends AbstractFSTParser implements JavaJMLParserConstants {
        public JavaJMLParser(){}

  final public FSTInfo CompilationUnit(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      n = PackageDeclaration(inTerminal);
                                           replaceName(n);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      n = ImportDeclaration(inTerminal);
                                                                                               replaceName(n);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      n = TypeDeclaration(inTerminal);
                                                                                                                                                  replaceName("TypeDeclaration", n);
                                                                                                                                                                                       replaceName(n);
    }
    jj_consume_token(0);
                                                                                                                                                                                                                 {if (true) return productionEndNonTerminal("CompilationUnit","{TypeDeclaration}","{TypeDeclaration}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PackageDeclaration(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(PACKAGE);
    n = Name(true);
                                replaceName(n);
    jj_consume_token(SEMICOLON);
                                                      {if (true) return productionEndTerminal("PackageDeclaration","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ImportDeclaration(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IMPORT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    n = Name(true);
                                           replaceName("Name", n);
                                                                     replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      n = ImportPackage(true);
                                                                                                              replaceName("ImportPackage", n);
                                                                                                                                                 replaceName(n);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                                                                                                                                                                        {if (true) return productionEndTerminal("ImportDeclaration","{Name}{ImportPackage}","{Name}{ImportPackage}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ImportPackage(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(DOT);
    jj_consume_token(STAR);
                  {if (true) return productionEndTerminal("ImportPackage","-",".*","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Modifiers(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_3:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_3;
      }
      n = Modifier(true);
                                        replaceName(n);
    }
                                                            {if (true) return productionEndTerminal("Modifiers","-","-","ModifierListSpecialization","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Modifier(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      jj_consume_token(PUBLIC);
                   {if (true) return productionEndTerminal("Modifier1","-","-","Replacement","Default",first,token);}
      break;
    case STATIC:
      jj_consume_token(STATIC);
                   {if (true) return productionEndTerminal("Modifier2","-","-","Replacement","Default",first,token);}
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
                      {if (true) return productionEndTerminal("Modifier3","-","-","Replacement","Default",first,token);}
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
                    {if (true) return productionEndTerminal("Modifier4","-","-","Replacement","Default",first,token);}
      break;
    case FINAL:
      jj_consume_token(FINAL);
                  {if (true) return productionEndTerminal("Modifier5","-","-","Replacement","Default",first,token);}
      break;
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                     {if (true) return productionEndTerminal("Modifier6","-","-","Replacement","Default",first,token);}
      break;
    case SYNCHRONIZED:
      jj_consume_token(SYNCHRONIZED);
                         {if (true) return productionEndTerminal("Modifier7","-","-","Replacement","Default",first,token);}
      break;
    case NATIVE:
      jj_consume_token(NATIVE);
                   {if (true) return productionEndTerminal("Modifier8","-","-","Replacement","Default",first,token);}
      break;
    case TRANSIENT:
      jj_consume_token(TRANSIENT);
                      {if (true) return productionEndTerminal("Modifier9","-","-","Replacement","Default",first,token);}
      break;
    case VOLATILE:
      jj_consume_token(VOLATILE);
                     {if (true) return productionEndTerminal("Modifier10","-","-","Replacement","Default",first,token);}
      break;
    case STRICTFP:
      jj_consume_token(STRICTFP);
                     {if (true) return productionEndTerminal("Modifier11","-","-","Replacement","Default",first,token);}
      break;
    case AT:
      n = Annotation(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("Modifier12","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Id(boolean inTerminal) throws ParseException {
                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    t = jj_consume_token(IDENTIFIER);
                        replaceName(new FSTInfo("<IDENTIFIER>",t.image));
                                                                            {if (true) return productionEndTerminal("Id","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TypeDeclaration(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
              {if (true) return productionEndTerminal("EmptyTypeDecl","{AUTO}","{AUTO}","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_2(2147483647)) {
        n = Modifiers(inTerminal);
                                                                        replaceName(n);
        jj_consume_token(AT);
        jj_consume_token(INTERFACE);
        n = Id(inTerminal);
                                                                                                                           replaceName("Id", n);
                                                                                                                                                   replaceName(n);
        jj_consume_token(LBRACE);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case CLASS:
          case DOUBLE:
          case ENUM:
          case FINAL:
          case FLOAT:
          case INT:
          case INTERFACE:
          case LONG:
          case NATIVE:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case SHORT:
          case STATIC:
          case STRICTFP:
          case SYNCHRONIZED:
          case TRANSIENT:
          case VOLATILE:
          case IDENTIFIER:
          case SEMICOLON:
          case AT:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_4;
          }
          n = AnnotationTypeMemberDeclaration(inTerminal);
                                                                                                                                                                                                                        replaceName(n);
        }
        jj_consume_token(RBRACE);
                                                                                                                                                                                                                                                {if (true) return productionEndNonTerminal("AnnotationTypeDeclaration","{Id}","{Id}");}
      } else if (jj_2_3(2)) {
        n = Modifiers(inTerminal);
                                              replaceName(n);
        n = ClassOrInterface(inTerminal);
                                                                                               replaceName(n);
        n = Id(inTerminal);
                                                                                                                                  replaceName("Id", n);
                                                                                                                                                          replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          n = TypeParameters(inTerminal);
                                                                                                                                                                                                          replaceName(n);
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
          n = ExtendsList(inTerminal);
                                                                                                                                                                                                                                                        replaceName(n);
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPLEMENTS:
          n = ImplementsList(inTerminal);
                                                                                                                                                                                                                                                                                                         replaceName(n);
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(LBRACE);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case CLASS:
          case DOUBLE:
          case ENUM:
          case FINAL:
          case FLOAT:
          case INT:
          case INTERFACE:
          case LONG:
          case NATIVE:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case SHORT:
          case STATIC:
          case STRICTFP:
          case SYNCHRONIZED:
          case TRANSIENT:
          case VOID:
          case VOLATILE:
          case IDENTIFIER:
          case LBRACE:
          case SEMICOLON:
          case AT:
          case LT:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_5;
          }
          n = ClassOrInterfaceBodyDeclaration(inTerminal);
                                                                                                                                                                                                                                                                                                                                                                               replaceName(n);
        }
        jj_consume_token(RBRACE);
                                                                                                                                                                                                                                                                                                                                                                                                       {if (true) return productionEndNonTerminal("ClassDeclaration","{Id}","{Id}");}
      } else if (jj_2_4(2)) {
        n = Modifiers(inTerminal);
                                              replaceName(n);
        jj_consume_token(ENUM);
        n = Id(inTerminal);
                                                                                        replaceName("Id", n);
                                                                                                                replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPLEMENTS:
          n = ImplementsList(inTerminal);
                                                                                                                                                                replaceName(n);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        jj_consume_token(LBRACE);
        n = EnumConstant(inTerminal);
                                                                                                                                                                                                                  replaceName(n);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          n = EnumConstant(inTerminal);
                                                                                                                                                                                                                                                                    replaceName(n);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          n = EnumBodyInternal(inTerminal);
                                                                                                                                                                                                                                                                                                                        replaceName(n);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(RBRACE);
                                                                                                                                                                                                                                                                                                                                               {if (true) return productionEndNonTerminal("EnumDecl","{Id}","{Id}");}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AnnotationTypeDeclaration(boolean inTerminal) throws ParseException {
                                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(AT);
    jj_consume_token(INTERFACE);
    n = Id(true);
                                    replaceName(n);
    n = AnnotationTypeBody(true);
                                                                                 replaceName(n);
                                                                                                   {if (true) return productionEndTerminal("AnnotationTypeDeclaration","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ClassOrInterfaceDeclaration(boolean inTerminal) throws ParseException {
                                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ClassOrInterface(true);
                                  replaceName(n);
    n = Id(true);
                                                               replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n = TypeParameters(true);
                                                                                                         replaceName(n);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      n = ExtendsList(true);
                                                                                                                                                 replaceName(n);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      n = ImplementsList(true);
                                                                                                                                                                                            replaceName(n);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    n = ClassOrInterfaceBody(true);
                                                                                                                                                                                                                                            replaceName(n);
                                                                                                                                                                                                                                                              {if (true) return productionEndTerminal("ClassOrInterfaceDeclaration","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ClassOrInterface(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      jj_consume_token(CLASS);
                  {if (true) return productionEndTerminal("ClassOrInterface1","-","-","Replacement","Default",first,token);}
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
                      {if (true) return productionEndTerminal("ClassOrInterface2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ExtendsList(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(EXTENDS);
    n = ClassOrInterfaceType(true);
                                                replaceName(n);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      n = ClassOrInterfaceType(true);
                                                                                                    replaceName(n);
    }
                                                                                                                        {if (true) return productionEndTerminal("ExtendsList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ImplementsList(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IMPLEMENTS);
    n = ClassOrInterfaceType(true);
                                                   replaceName(n);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      n = ClassOrInterfaceType(true);
                                                                                                       replaceName(n);
    }
                                                                                                                           {if (true) return productionEndTerminal("ImplementsList","-","-","ImplementsListMerging","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EnumDeclaration(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ENUM);
    n = Id(true);
                           replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      n = ImplementsList(true);
                                                                     replaceName(n);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    n = EnumBody(true);
                                                                                                         replaceName(n);
                                                                                                                           {if (true) return productionEndTerminal("EnumDeclaration","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EnumBody(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    n = EnumConstant(true);
                                  replaceName(n);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      n = EnumConstant(true);
                                                                              replaceName(n);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      n = EnumBodyInternal(true);
                                                                                                                            replaceName(n);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
                                                                                                                                                   {if (true) return productionEndTerminal("EnumBody","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EnumBodyInternal(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(SEMICOLON);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case LT:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_10;
      }
      n = ClassOrInterfaceBodyDeclaration(inTerminal);
                                                            replaceName(n);
    }
                                                                                {if (true) return productionEndNonTerminal("EnumBodyInternal","","");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EnumConstant(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        n = Arguments(true);
                                         replaceName(n);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        n = ClassOrInterfaceBody(true);
                                                                                          replaceName(n);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
                                                                                                             {if (true) return productionEndTerminal("EnumConstant1","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[27] = jj_gen;
          {if (true) return productionEndTerminal("EnumConstant2","-","-","Replacement","Default",first,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TypeParameters(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LT);
    n = TypeParameter(true);
                                   replaceName(n);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      n = TypeParameter(true);
                                                                                replaceName(n);
    }
    jj_consume_token(GT);
                                                                                                        {if (true) return productionEndTerminal("TypeParameters","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TypeParameter(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      n = TypeBound(true);
                                         replaceName(n);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
                                                            {if (true) return productionEndTerminal("TypeParameter","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TypeBound(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(EXTENDS);
    n = ClassOrInterfaceType(true);
                                                replaceName(n);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_12;
      }
      jj_consume_token(BIT_AND);
      n = ClassOrInterfaceType(true);
                                                                                                    replaceName(n);
    }
                                                                                                                        {if (true) return productionEndTerminal("TypeBound","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ClassOrInterfaceBody(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case LT:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_13;
      }
      n = ClassOrInterfaceBodyDeclaration(true);
                                                      replaceName(n);
    }
    jj_consume_token(RBRACE);
                                                                              {if (true) return productionEndTerminal("ClassOrInterfaceBody","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ClassOrInterfaceBodyDeclaration(boolean inTerminal) throws ParseException {
                                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_5(2)) {
      n = Initializer(true);
                                          replaceName(n);
                                                            {if (true) return productionEndTerminal("InitializerDecl","{AUTO}","{AUTO}","Replacement","Default",first,token);}
    } else if (jj_2_6(2147483647)) {
      n = Modifiers(inTerminal);
                                                                           replaceName(n);
      n = ClassOrInterface(inTerminal);
                                                                                                                            replaceName(n);
      n = Id(inTerminal);
                                                                                                                                                               replaceName("Id", n);
                                                                                                                                                                                       replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        n = TypeParameters(inTerminal);
                                                                                                                                                                                                                                       replaceName(n);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        n = ExtendsList(inTerminal);
                                                                                                                                                                                                                                                                                     replaceName(n);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        n = ImplementsList(inTerminal);
                                                                                                                                                                                                                                                                                                                                      replaceName(n);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case LT:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_14;
        }
        n = ClassOrInterfaceBodyDeclaration(inTerminal);
                                                                                                                                                                                                                                                                                                                                                                                                            replaceName(n);
      }
      jj_consume_token(RBRACE);
                                                                                                                                                                                                                                                                                                                                                                                                                                    {if (true) return productionEndNonTerminal("InnerClassDecl","{Id}","{Id}");}
    } else if (jj_2_7(2147483647)) {
      n = Modifiers(inTerminal);
                                                               replaceName(n);
      jj_consume_token(ENUM);
      n = Id(inTerminal);
                                                                                                         replaceName("Id", n);
                                                                                                                                 replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        n = ImplementsList(inTerminal);
                                                                                                                                                                                 replaceName(n);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      n = EnumConstant(inTerminal);
                                                                                                                                                                                                                                   replaceName(n);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        n = EnumConstant(inTerminal);
                                                                                                                                                                                                                                                                                     replaceName(n);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        n = EnumBodyInternal(inTerminal);
                                                                                                                                                                                                                                                                                                                                         replaceName(n);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
                                                                                                                                                                                                                                                                                                                                                                {if (true) return productionEndNonTerminal("InnerEnumDecl","{Id}","{Id}");}
    } else if (jj_2_8(2147483647)) {
      n = Modifiers(true);
                                                                                         replaceName(n);
      n = ConstructorDeclaration(true);
                                                                                                                                          replaceName("ConstructorDeclaration", n);
                                                                                                                                                                                      replaceName(n);
                                                                                                                                                                                                        {if (true) return productionEndTerminal("ConstructorDecl","{ConstructorDeclaration}","{ConstructorDeclaration}","ConstructorConcatenation","Default",first,token);}
    } else if (jj_2_9(2147483647)) {
      n = Modifiers(true);
                                                                                                        replaceName(n);
      n = FieldDeclaration(true);
                                                                                                                                                   replaceName("FieldDeclaration", n);
                                                                                                                                                                                         replaceName(n);
                                                                                                                                                                                                           {if (true) return productionEndTerminal("FieldDecl","{FieldDeclaration}","{FieldDeclaration}","FieldOverriding","Default",first,token);}
    } else if (jj_2_10(2)) {
      n = Modifiers(true);
                                        replaceName(n);
      n = MethodDeclaration(true);
                                                                                    replaceName("MethodDeclaration", n);
                                                                                                                           replaceName(n);
                                                                                                                                             {if (true) return productionEndTerminal("MethodDecl","{MethodDeclaration}","{MethodDeclaration}","JavaMethodOverriding","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
              {if (true) return productionEndTerminal("EmptyDecl","{AUTO}","{AUTO}","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FieldDeclaration(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Type(true);
                      replaceName(n);
    n = VariableDeclarator(true);
                                                                   replaceName("VariableDeclarator", n);
                                                                                                           replaceName(n);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_16;
      }
      jj_consume_token(COMMA);
      n = VariableDeclarator(true);
                                                                                                                                                             replaceName("VariableDeclarator", n);
                                                                                                                                                                                                     replaceName(n);
    }
    jj_consume_token(SEMICOLON);
                                                                                                                                                                                                                             {if (true) return productionEndTerminal("FieldDeclaration","-","{VariableDeclarator}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo VariableDeclarator(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = VariableDeclaratorId(true);
                                      replaceName("VariableDeclaratorId", n);
                                                                                replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      n = VariableInitializer(true);
                                                                                                                                   replaceName(n);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
                                                                                                                                                      {if (true) return productionEndTerminal("VariableDeclarator","-","{VariableDeclaratorId}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo VariableDeclaratorId(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    t = jj_consume_token(IDENTIFIER);
                        replaceName(new FSTInfo("<IDENTIFIER>",t.image));
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_17;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
                                                                                        {if (true) return productionEndTerminal("VariableDeclaratorId","-","{<IDENTIFIER>}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo VariableInitializer(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      n = ArrayInitializer(true);
                                  replaceName(n);
                                                    {if (true) return productionEndTerminal("VariableInitializer1","-","-","Replacement","Default",first,token);}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n = Expression(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("VariableInitializer2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ArrayInitializer(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n = ArrayInitializerInternal(true);
                                               replaceName(n);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
                                                                             {if (true) return productionEndTerminal("ArrayInitializer","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ArrayInitializerInternal(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = VariableInitializer(true);
                                     replaceName(n);
    label_18:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_18;
      }
      jj_consume_token(COMMA);
      n = VariableInitializer(true);
                                                                                                     replaceName(n);
    }
                                                                                                                         {if (true) return productionEndTerminal("ArrayInitializerInternal","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MethodDeclaration(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n = TypeParameters(true);
                                 replaceName(n);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    n = ResultType(true);
                                                                       replaceName(n);
    n = MethodDeclarator(true);
                                                                                                                  replaceName("MethodDeclarator", n);
                                                                                                                                                        replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      n = NameList(true);
                                                                                                                                                                                                     replaceName(n);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    n = MethodDeclarationBody(true);
                                                                                                                                                                                                                                                      replaceName(n);
                                                                                                                                                                                                                                                                        {if (true) return productionEndTerminal("MethodDeclaration","-","{MethodDeclarator}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MethodDeclarationBody(boolean inTerminal) throws ParseException {
                                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      n = Block(true);
                       replaceName(n);
                                         {if (true) return productionEndTerminal("MethodDeclarationBody1","-","-","Replacement","Default",first,token);}
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
              {if (true) return productionEndTerminal("MethodDeclarationBody2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MethodDeclarator(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    t = jj_consume_token(IDENTIFIER);
                        replaceName(new FSTInfo("<IDENTIFIER>",t.image));
    n = FormalParameters(true);
                                                                                                     replaceName("FormalParameters", n);
                                                                                                                                           replaceName(n);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_19;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
                                                                                                                                                                         {if (true) return productionEndTerminal("MethodDeclarator","-","{<IDENTIFIER>}({FormalParameters})","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FormalParameters(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
    case AT:
      n = FormalParametersInternal(true);
                                               replaceName("FormalParametersInternal", n);
                                                                                             replaceName(n);
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                                                                                    {if (true) return productionEndTerminal("FormalParameters","-","{FormalParametersInternal}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FormalParametersInternal(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = FormalParameter(true);
                                 replaceName("FormalParameter", n);
                                                                      replaceName(n);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_20;
      }
      jj_consume_token(COMMA);
      n = FormalParameter(true);
                                                                                                                     replaceName("FormalParameter", n);
                                                                                                                                                          replaceName(n);
    }
                                                                                                                                                                              {if (true) return productionEndTerminal("FormalParametersInternal","-","{FormalParameter}^-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FormalParameter(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_12(2147483647)) {
      n = Annotation(true);
                                                     replaceName(n);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    n = Type(true);
                                                                                                replaceName("Type", n);
                                                                                                                          replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELLIPSIS:
      jj_consume_token(ELLIPSIS);
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    n = VariableDeclaratorId(true);
                                                                                                                                                                                  replaceName(n);
                                                                                                                                                                                                    {if (true) return productionEndTerminal("FormalParameter","-","{Type}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ConstructorDeclaration(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n = TypeParameters(true);
                                 replaceName(n);
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    t = jj_consume_token(IDENTIFIER);
                                                                   replaceName(new FSTInfo("<IDENTIFIER>",t.image));
    n = FormalParameters(true);
                                                                                                                                                replaceName("FormalParameters", n);
                                                                                                                                                                                      replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      n = NameList(true);
                                                                                                                                                                                                                                   replaceName(n);
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    if (jj_2_13(2147483647)) {
      n = ExplicitConstructorInvocation(true);
                                                                                                                                                                                                                                                                                                                                            replaceName(n);
    } else {
      ;
    }
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOID:
      case VOLATILE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case INCR:
      case DECR:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_21;
      }
      n = BlockStatement(true);
                                                                                                                                                                                                                                                                                                                                                                                       replaceName(n);
    }
    jj_consume_token(RBRACE);
                                                                                                                                                                                                                                                                                                                                                                                                               {if (true) return productionEndTerminal("ConstructorDeclaration","-","{<IDENTIFIER>}({FormalParameters})","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ExplicitConstructorInvocation(boolean inTerminal) throws ParseException {
                                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_15(2147483647)) {
      jj_consume_token(THIS);
      n = Arguments(true);
                                                                    replaceName(n);
      jj_consume_token(SEMICOLON);
                                                                                          {if (true) return productionEndTerminal("ExplicitConstructorInvocation1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        if (jj_2_14(2)) {
          n = PrimaryExpression(true);
                                                 replaceName(n);
          jj_consume_token(DOT);
        } else {
          ;
        }
        jj_consume_token(SUPER);
        n = Arguments(true);
                                                                                                  replaceName(n);
        jj_consume_token(SEMICOLON);
                                                                                                                        {if (true) return productionEndTerminal("ExplicitConstructorInvocation2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Initializer(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    n = Block(true);
                                   replaceName(n);
                                                     {if (true) return productionEndTerminal("Initializer","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Type(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_16(2)) {
      n = ReferenceTypeP(true);
                                             replaceName(n);
                                                               {if (true) return productionEndTerminal("Type1","-","{TOSTRING}","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        n = PrimitiveType(true);
                               replaceName(n);
                                                 {if (true) return productionEndTerminal("Type2","-","{TOSTRING}","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ReferenceTypeP(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      n = PrimitiveType(true);
                               replaceName(n);
      label_22:
      while (true) {
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
        if (jj_2_17(2)) {
          ;
        } else {
          break label_22;
        }
      }
                                                                          {if (true) return productionEndTerminal("ReferenceTypeP1","-","-","Replacement","Default",first,token);}
      break;
    case IDENTIFIER:
      n = ClassOrInterfaceType(true);
                                      replaceName(n);
      label_23:
      while (true) {
        if (jj_2_18(2)) {
          ;
        } else {
          break label_23;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
                                                                                 {if (true) return productionEndTerminal("ReferenceTypeP2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ClassOrInterfaceType(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IDENTIFIER);
    if (jj_2_19(2)) {
      n = TypeArguments(true);
                                                          replaceName(n);
    } else {
      ;
    }
    label_24:
    while (true) {
      if (jj_2_20(2)) {
        ;
      } else {
        break label_24;
      }
      n = ClassOrInterfaceTypeIntern(true);
                                                                                                                              replaceName(n);
    }
                                                                                                                                                  {if (true) return productionEndTerminal("ClassOrInterfaceType","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ClassOrInterfaceTypeIntern(boolean inTerminal) throws ParseException {
                                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(DOT);
    jj_consume_token(IDENTIFIER);
    if (jj_2_21(2)) {
      n = TypeArguments(true);
                                                              replaceName(n);
    } else {
      ;
    }
                                                                                 {if (true) return productionEndTerminal("ClassOrInterfaceTypeIntern","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TypeArguments(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LT);
    n = TypeArgument(true);
                                  replaceName(n);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_25;
      }
      jj_consume_token(COMMA);
      n = TypeArgument(true);
                                                                              replaceName(n);
    }
    jj_consume_token(GT);
                                                                                                      {if (true) return productionEndTerminal("TypeArguments","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TypeArgument(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      n = ReferenceTypeP(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("TypeArgument1","-","-","Replacement","Default",first,token);}
      break;
    case HOOK:
      jj_consume_token(HOOK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
      case SUPER:
        n = WildcardBounds(true);
                                     replaceName(n);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
                                                        {if (true) return productionEndTerminal("TypeArgument2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo WildcardBounds(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      n = ReferenceTypeP(true);
                                          replaceName(n);
                                                            {if (true) return productionEndTerminal("WildcardBounds1","-","-","Replacement","Default",first,token);}
      break;
    case SUPER:
      jj_consume_token(SUPER);
      n = ReferenceTypeP(true);
                                        replaceName(n);
                                                          {if (true) return productionEndTerminal("WildcardBounds2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PrimitiveType(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                    {if (true) return productionEndTerminal("PrimitiveType1","-","-","Replacement","Default",first,token);}
      break;
    case CHAR:
      jj_consume_token(CHAR);
                 {if (true) return productionEndTerminal("PrimitiveType2","-","-","Replacement","Default",first,token);}
      break;
    case BYTE:
      jj_consume_token(BYTE);
                 {if (true) return productionEndTerminal("PrimitiveType3","-","-","Replacement","Default",first,token);}
      break;
    case SHORT:
      jj_consume_token(SHORT);
                  {if (true) return productionEndTerminal("PrimitiveType4","-","-","Replacement","Default",first,token);}
      break;
    case INT:
      jj_consume_token(INT);
                {if (true) return productionEndTerminal("PrimitiveType5","-","-","Replacement","Default",first,token);}
      break;
    case LONG:
      jj_consume_token(LONG);
                 {if (true) return productionEndTerminal("PrimitiveType6","-","-","Replacement","Default",first,token);}
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
                  {if (true) return productionEndTerminal("PrimitiveType7","-","-","Replacement","Default",first,token);}
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
                   {if (true) return productionEndTerminal("PrimitiveType8","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ResultType(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
                 {if (true) return productionEndTerminal("ResultType1","-","-","Replacement","Default",first,token);}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      n = Type(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("ResultType2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Name(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    t = jj_consume_token(IDENTIFIER);
                        replaceName(new FSTInfo("<IDENTIFIER>",t.image));
    label_26:
    while (true) {
      if (jj_2_22(2)) {
        ;
      } else {
        break label_26;
      }
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
                                                                                                             replaceName(new FSTInfo("<IDENTIFIER>",t.image));
    }
                                                                                                                                                                   {if (true) return productionEndTerminal("Name","-","{<IDENTIFIER>}^.","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo NameList(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Name(true);
                      replaceName(n);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_27;
      }
      jj_consume_token(COMMA);
      n = Name(true);
                                                          replaceName(n);
    }
                                                                              {if (true) return productionEndTerminal("NameList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Expression(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ConditionalExpression(true);
                                       replaceName(n);
    if (jj_2_23(2)) {
      n = AssignExp(true);
                                                                                         replaceName(n);
    } else {
      ;
    }
                                                                                                            {if (true) return productionEndTerminal("Expression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AssignExp(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = AssignmentOperator(true);
                                    replaceName(n);
    n = Expression(true);
                                                                         replaceName(n);
                                                                                           {if (true) return productionEndTerminal("AssignExp","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AssignmentOperator(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
              {if (true) return productionEndTerminal("AssignmentOperator1","-","-","Replacement","Default",first,token);}
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator2","-","-","Replacement","Default",first,token);}
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator3","-","-","Replacement","Default",first,token);}
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator4","-","-","Replacement","Default",first,token);}
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator5","-","-","Replacement","Default",first,token);}
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator6","-","-","Replacement","Default",first,token);}
      break;
    case LSHIFTASSIGN:
      jj_consume_token(LSHIFTASSIGN);
                {if (true) return productionEndTerminal("AssignmentOperator7","-","-","Replacement","Default",first,token);}
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
                {if (true) return productionEndTerminal("AssignmentOperator8","-","-","Replacement","Default",first,token);}
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
                 {if (true) return productionEndTerminal("AssignmentOperator9","-","-","Replacement","Default",first,token);}
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator10","-","-","Replacement","Default",first,token);}
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator11","-","-","Replacement","Default",first,token);}
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
               {if (true) return productionEndTerminal("AssignmentOperator12","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ConditionalExpression(boolean inTerminal) throws ParseException {
                                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_24(2147483647)) {
      n = ConditionalExpressionFull(true);
                                                                                    replaceName(n);
                                                                                                      {if (true) return productionEndTerminal("ConditionalExpression1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        n = ConditionalOrExpression(true);
                                         replaceName(n);
                                                           {if (true) return productionEndTerminal("ConditionalExpression2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ConditionalExpressionFull(boolean inTerminal) throws ParseException {
                                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ConditionalOrExpression(true);
                                         replaceName(n);
    jj_consume_token(HOOK);
    n = Expression(true);
                                                                                  replaceName(n);
    jj_consume_token(COLON);
    n = Expression(true);
                                                                                                                           replaceName(n);
                                                                                                                                             {if (true) return productionEndTerminal("ConditionalExpressionFull","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ConditionalOrExpression(boolean inTerminal) throws ParseException {
                                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ConditionalAndExpression(true);
                                          replaceName(n);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[70] = jj_gen;
        break label_28;
      }
      jj_consume_token(SC_OR);
      n = ConditionalAndExpression(true);
                                                                                                   replaceName(n);
    }
                                                                                                                       {if (true) return productionEndTerminal("ConditionalOrExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ConditionalAndExpression(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = InclusiveOrExpression(true);
                                       replaceName(n);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[71] = jj_gen;
        break label_29;
      }
      jj_consume_token(SC_AND);
      n = InclusiveOrExpression(true);
                                                                                             replaceName(n);
    }
                                                                                                                 {if (true) return productionEndTerminal("ConditionalAndExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo InclusiveOrExpression(boolean inTerminal) throws ParseException {
                                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ExclusiveOrExpression(true);
                                       replaceName(n);
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[72] = jj_gen;
        break label_30;
      }
      jj_consume_token(BIT_OR);
      n = ExclusiveOrExpression(true);
                                                                                            replaceName(n);
    }
                                                                                                                {if (true) return productionEndTerminal("InclusiveOrExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ExclusiveOrExpression(boolean inTerminal) throws ParseException {
                                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = AndExpression(true);
                               replaceName(n);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[73] = jj_gen;
        break label_31;
      }
      jj_consume_token(XOR);
      n = AndExpression(true);
                                                                            replaceName(n);
    }
                                                                                                {if (true) return productionEndTerminal("ExclusiveOrExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AndExpression(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = EqualityExpression(true);
                                    replaceName(n);
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[74] = jj_gen;
        break label_32;
      }
      jj_consume_token(BIT_AND);
      n = EqualityExpression(true);
                                                                                      replaceName(n);
    }
                                                                                                          {if (true) return productionEndTerminal("AndExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EqualityExpression(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = InstanceOfExpression(true);
                                      replaceName(n);
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[75] = jj_gen;
        break label_33;
      }
      n = EqualityExpressionIntern(true);
                                                                                          replaceName(n);
    }
                                                                                                              {if (true) return productionEndTerminal("EqualityExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EqualityExpressionIntern(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = EqualityOp(true);
                            replaceName(n);
    n = InstanceOfExpression(true);
                                                                           replaceName(n);
                                                                                             {if (true) return productionEndTerminal("EqualityExpressionIntern","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EqualityOp(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
               {if (true) return productionEndTerminal("EqualityOp1","-","-","Replacement","Default",first,token);}
      break;
    case NE:
      jj_consume_token(NE);
               {if (true) return productionEndTerminal("EqualityOp2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo InstanceOfExpression(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = RelationalExpression(true);
                                      replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      n = Type(true);
                                                                                   replaceName(n);
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
                                                                                                      {if (true) return productionEndTerminal("InstanceOfExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RelationalExpression(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ShiftExpression(true);
                                 replaceName(n);
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case LE:
      case GE:
      case GT:
        ;
        break;
      default:
        jj_la1[78] = jj_gen;
        break label_34;
      }
      n = RelationalExpressionIntern(true);
                                                                                       replaceName(n);
    }
                                                                                                           {if (true) return productionEndTerminal("RelationalExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RelationalExpressionIntern(boolean inTerminal) throws ParseException {
                                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = RelationalOp(true);
                              replaceName(n);
    n = ShiftExpression(true);
                                                                        replaceName(n);
                                                                                          {if (true) return productionEndTerminal("RelationalExpressionIntern","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RelationalOp(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
              {if (true) return productionEndTerminal("RelationalOp1","-","-","Replacement","Default",first,token);}
      break;
    case GT:
      jj_consume_token(GT);
              {if (true) return productionEndTerminal("RelationalOp2","-","-","Replacement","Default",first,token);}
      break;
    case LE:
      jj_consume_token(LE);
               {if (true) return productionEndTerminal("RelationalOp3","-","-","Replacement","Default",first,token);}
      break;
    case GE:
      jj_consume_token(GE);
               {if (true) return productionEndTerminal("RelationalOp4","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ShiftExpression(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = AdditiveExpression(true);
                                    replaceName(n);
    label_35:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_35;
      }
      n = ShiftExpressionRight(true);
                                                                                                 replaceName(n);
    }
                                                                                                                     {if (true) return productionEndTerminal("ShiftExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ShiftExpressionRight(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ShiftOp(true);
                         replaceName(n);
    n = AdditiveExpression(true);
                                                                      replaceName(n);
                                                                                        {if (true) return productionEndTerminal("ShiftExpressionRight","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ShiftOp(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSHIFT:
      jj_consume_token(LSHIFT);
               {if (true) return productionEndTerminal("ShiftOp1","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[80] = jj_gen;
      if (jj_2_26(3)) {
        jj_consume_token(GT);
        jj_consume_token(GT);
        jj_consume_token(GT);
                                   {if (true) return productionEndTerminal("ShiftOp2","-","-","Replacement","Default",first,token);}
      } else if (jj_2_27(2)) {
        jj_consume_token(GT);
        jj_consume_token(GT);
                               {if (true) return productionEndTerminal("ShiftOp3","-","-","Replacement","Default",first,token);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AdditiveExpression(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = MultiplicativeExpression(true);
                                          replaceName(n);
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_36;
      }
      n = AdditiveExpressionIntern(true);
                                                                                              replaceName(n);
    }
                                                                                                                  {if (true) return productionEndTerminal("AdditiveExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AdditiveExpressionIntern(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = AdditiveOp(true);
                            replaceName(n);
    n = MultiplicativeExpression(true);
                                                                               replaceName(n);
                                                                                                 {if (true) return productionEndTerminal("AdditiveExpressionIntern","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AdditiveOp(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
              {if (true) return productionEndTerminal("AdditiveOp1","-","-","Replacement","Default",first,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return productionEndTerminal("AdditiveOp2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MultiplicativeExpression(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = UnaryExpression(true);
                                 replaceName(n);
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_37;
      }
      n = MultiplicativeExpressionIntern(true);
                                                                                           replaceName(n);
    }
                                                                                                               {if (true) return productionEndTerminal("MultiplicativeExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MultiplicativeExpressionIntern(boolean inTerminal) throws ParseException {
                                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = MultiplicativeOp(true);
                                  replaceName(n);
    n = UnaryExpression(true);
                                                                            replaceName(n);
                                                                                              {if (true) return productionEndTerminal("MultiplicativeExpressionIntern","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MultiplicativeOp(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
              {if (true) return productionEndTerminal("MultiplicativeOp1","-","-","Replacement","Default",first,token);}
      break;
    case SLASH:
      jj_consume_token(SLASH);
              {if (true) return productionEndTerminal("MultiplicativeOp2","-","-","Replacement","Default",first,token);}
      break;
    case REM:
      jj_consume_token(REM);
              {if (true) return productionEndTerminal("MultiplicativeOp3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo UnaryExpression(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      n = AdditiveOp(true);
                            replaceName(n);
      n = UnaryExpression(true);
                                                                      replaceName(n);
                                                                                        {if (true) return productionEndTerminal("UnaryExpression1","-","-","Replacement","Default",first,token);}
      break;
    case INCR:
      n = PreIncrementExpression(true);
                                        replaceName(n);
                                                          {if (true) return productionEndTerminal("UnaryExpression2","-","-","Replacement","Default",first,token);}
      break;
    case DECR:
      n = PreDecrementExpression(true);
                                        replaceName(n);
                                                          {if (true) return productionEndTerminal("UnaryExpression3","-","-","Replacement","Default",first,token);}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      n = UnaryExpressionNotPlusMinus(true);
                                             replaceName(n);
                                                               {if (true) return productionEndTerminal("UnaryExpression4","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PreIncrementExpression(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(INCR);
    n = PrimaryExpression(true);
                                        replaceName(n);
                                                          {if (true) return productionEndTerminal("PreIncrementExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PreDecrementExpression(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(DECR);
    n = PrimaryExpression(true);
                                        replaceName(n);
                                                          {if (true) return productionEndTerminal("PreDecrementExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo UnaryExpressionNotPlusMinus(boolean inTerminal) throws ParseException {
                                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      n = UnaryOp(true);
                         replaceName(n);
      n = UnaryExpression(true);
                                                                   replaceName(n);
                                                                                     {if (true) return productionEndTerminal("UnaryExpressionNotPlusMinus1","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[86] = jj_gen;
      if (jj_2_28(2147483647)) {
        n = CastExpression(true);
                                                           replaceName(n);
                                                                             {if (true) return productionEndTerminal("UnaryExpressionNotPlusMinus2","-","-","Replacement","Default",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          n = PostfixExpression(true);
                                   replaceName(n);
                                                     {if (true) return productionEndTerminal("UnaryExpressionNotPlusMinus3","-","-","Replacement","Default",first,token);}
          break;
        default:
          jj_la1[87] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo UnaryOp(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      jj_consume_token(TILDE);
              {if (true) return productionEndTerminal("UnaryOp1","-","-","Replacement","Default",first,token);}
      break;
    case BANG:
      jj_consume_token(BANG);
              {if (true) return productionEndTerminal("UnaryOp2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CastLookahead(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_29(2)) {
      jj_consume_token(LPAREN);
      n = PrimitiveType(true);
                                                replaceName(n);
                                                                  {if (true) return productionEndTerminal("CastLookahead1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_30(2147483647)) {
      jj_consume_token(LPAREN);
      n = Type(true);
                                                    replaceName(n);
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                                                                              {if (true) return productionEndTerminal("CastLookahead2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        n = Type(true);
                          replaceName(n);
        jj_consume_token(RPAREN);
        n = CastLAOp(true);
                                                                 replaceName(n);
                                                                                   {if (true) return productionEndTerminal("CastLookahead3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CastLAOp(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      jj_consume_token(TILDE);
              {if (true) return productionEndTerminal("CastLAOp1","-","-","Replacement","Default",first,token);}
      break;
    case BANG:
      jj_consume_token(BANG);
              {if (true) return productionEndTerminal("CastLAOp2","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
              {if (true) return productionEndTerminal("CastLAOp3","-","-","Replacement","Default",first,token);}
      break;
    case THIS:
      jj_consume_token(THIS);
                 {if (true) return productionEndTerminal("CastLAOp4","-","-","Replacement","Default",first,token);}
      break;
    case SUPER:
      jj_consume_token(SUPER);
                  {if (true) return productionEndTerminal("CastLAOp5","-","-","Replacement","Default",first,token);}
      break;
    case NEW:
      jj_consume_token(NEW);
                {if (true) return productionEndTerminal("CastLAOp6","-","-","Replacement","Default",first,token);}
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                      {if (true) return productionEndTerminal("CastLAOp7","-","-","Replacement","Default",first,token);}
      break;
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      n = Literal(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("CastLAOp8","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PostfixExpression(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = PrimaryExpression(true);
                                   replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      n = PostfixOp(true);
                                                                        replaceName(n);
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
                                                                                           {if (true) return productionEndTerminal("PostfixExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PostfixOp(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      jj_consume_token(INCR);
               {if (true) return productionEndTerminal("PostfixOp1","-","-","Replacement","Default",first,token);}
      break;
    case DECR:
      jj_consume_token(DECR);
               {if (true) return productionEndTerminal("PostfixOp2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CastExpression(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_31(2147483647)) {
      jj_consume_token(LPAREN);
      n = Type(true);
                                                         replaceName(n);
      jj_consume_token(RPAREN);
      n = UnaryExpression(true);
                                                                                                       replaceName(n);
                                                                                                                         {if (true) return productionEndTerminal("CastExpression1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        n = Type(true);
                          replaceName(n);
        jj_consume_token(RPAREN);
        n = UnaryExpressionNotPlusMinus(true);
                                                                                    replaceName(n);
                                                                                                      {if (true) return productionEndTerminal("CastExpression2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PrimaryExpression(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = PrimaryPrefix(true);
                               replaceName(n);
    label_38:
    while (true) {
      if (jj_2_32(2)) {
        ;
      } else {
        break label_38;
      }
      n = PrimarySuffix(true);
                                                                                     replaceName(n);
    }
                                                                                                         {if (true) return productionEndTerminal("PrimaryExpression","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MemberSelector(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(DOT);
    n = TypeArguments(true);
                                   replaceName(n);
    jj_consume_token(IDENTIFIER);
                                                                  {if (true) return productionEndTerminal("MemberSelector","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PrimaryPrefix(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      n = Literal(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("PrimaryPrefix1","-","-","Replacement","Default",first,token);}
      break;
    case THIS:
      jj_consume_token(THIS);
                 {if (true) return productionEndTerminal("PrimaryPrefix2","-","-","Replacement","Default",first,token);}
      break;
    case SUPER:
      jj_consume_token(SUPER);
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
                                  {if (true) return productionEndTerminal("PrimaryPrefix3","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      n = Expression(true);
                                replaceName(n);
      jj_consume_token(RPAREN);
                                                      {if (true) return productionEndTerminal("PrimaryPrefix4","-","-","Replacement","Default",first,token);}
      break;
    case NEW:
      n = AllocationExpression(true);
                                      replaceName(n);
                                                        {if (true) return productionEndTerminal("PrimaryPrefix5","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[94] = jj_gen;
      if (jj_2_33(2147483647)) {
        n = ResultType(true);
                                                                 replaceName(n);
        jj_consume_token(DOT);
        jj_consume_token(CLASS);
                                                                                               {if (true) return productionEndTerminal("PrimaryPrefix6","-","-","Replacement","Default",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          n = Name(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("PrimaryPrefix7","-","-","Replacement","Default",first,token);}
          break;
        default:
          jj_la1[95] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PrimarySuffix(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_34(2)) {
      jj_consume_token(DOT);
      jj_consume_token(THIS);
                                  {if (true) return productionEndTerminal("PrimarySuffix1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_35(2)) {
      jj_consume_token(DOT);
      jj_consume_token(SUPER);
                                   {if (true) return productionEndTerminal("PrimarySuffix2","-","-","Replacement","Default",first,token);}
    } else if (jj_2_36(2)) {
      jj_consume_token(DOT);
      n = AllocationExpression(true);
                                                       replaceName(n);
                                                                         {if (true) return productionEndTerminal("PrimarySuffix3","-","-","Replacement","Default",first,token);}
    } else if (jj_2_37(3)) {
      n = MemberSelector(true);
                                             replaceName(n);
                                                               {if (true) return productionEndTerminal("PrimarySuffix4","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        n = Expression(true);
                                replaceName(n);
        jj_consume_token(RBRACKET);
                                                      {if (true) return productionEndTerminal("PrimarySuffix5","-","-","Replacement","Default",first,token);}
        break;
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
                          {if (true) return productionEndTerminal("PrimarySuffix6","-","-","Replacement","Default",first,token);}
        break;
      case LPAREN:
        n = Arguments(true);
                           replaceName(n);
                                             {if (true) return productionEndTerminal("PrimarySuffix7","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Literal(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
                           {if (true) return productionEndTerminal("Literal1","-","-","Replacement","Default",first,token);}
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
                                  {if (true) return productionEndTerminal("Literal2","-","-","Replacement","Default",first,token);}
      break;
    case CHARACTER_LITERAL:
      jj_consume_token(CHARACTER_LITERAL);
                             {if (true) return productionEndTerminal("Literal3","-","-","Replacement","Default",first,token);}
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
                          {if (true) return productionEndTerminal("Literal4","-","-","Replacement","Default",first,token);}
      break;
    case FALSE:
    case TRUE:
      n = BooleanLiteral(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("Literal5","-","-","Replacement","Default",first,token);}
      break;
    case NULL:
      n = NullLiteral(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("Literal6","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo BooleanLiteral(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
                 {if (true) return productionEndTerminal("BooleanLiteral1","-","-","Replacement","Default",first,token);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                  {if (true) return productionEndTerminal("BooleanLiteral2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo NullLiteral(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(NULL);
                 {if (true) return productionEndTerminal("NullLiteral","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Arguments(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n = ArgumentList(true);
                                   replaceName(n);
      break;
    default:
      jj_la1[99] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                          {if (true) return productionEndTerminal("Arguments","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ArgumentList(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Expression(true);
                            replaceName(n);
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[100] = jj_gen;
        break label_39;
      }
      jj_consume_token(COMMA);
      n = Expression(true);
                                                                      replaceName(n);
    }
                                                                                          {if (true) return productionEndTerminal("ArgumentList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AllocationExpression(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_38(2)) {
      jj_consume_token(NEW);
      n = PrimitiveType(true);
                                                  replaceName(n);
      n = ArrayDimsAndInits(true);
                                                                                              replaceName(n);
                                                                                                                {if (true) return productionEndTerminal("AllocationExpression1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
        n = ClassOrInterfaceType(true);
                                            replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          n = TypeArguments(true);
                                                                                     replaceName(n);
          break;
        default:
          jj_la1[101] = jj_gen;
          ;
        }
        n = AllocationExpressionInit(true);
                                                                                                                                         replaceName(n);
                                                                                                                                                           {if (true) return productionEndTerminal("AllocationExpression2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AllocationExpressionInit(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      n = ArrayDimsAndInits(true);
                                   replaceName(n);
                                                     {if (true) return productionEndTerminal("AllocationExpressionInit1","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
      n = Arguments(true);
                           replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        n = ClassOrInterfaceBody(true);
                                                                           replaceName(n);
        break;
      default:
        jj_la1[103] = jj_gen;
        ;
      }
                                                                                              {if (true) return productionEndTerminal("AllocationExpressionInit2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ArrayDimsAndInits(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_41(2)) {
      jj_consume_token(LBRACKET);
      n = Expression(true);
                                             replaceName(n);
      jj_consume_token(RBRACKET);
      label_40:
      while (true) {
        if (jj_2_39(2)) {
          ;
        } else {
          break label_40;
        }
        jj_consume_token(LBRACKET);
        n = Expression(true);
                                                                                                        replaceName(n);
        jj_consume_token(RBRACKET);
      }
      label_41:
      while (true) {
        if (jj_2_40(2)) {
          ;
        } else {
          break label_41;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
                                                                                                                                                         {if (true) return productionEndTerminal("ArrayDimsAndInits1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        label_42:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[105] = jj_gen;
            break label_42;
          }
        }
        n = ArrayInitializer(true);
                                              replaceName(n);
                                                                {if (true) return productionEndTerminal("ArrayDimsAndInits2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Statement(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_42(2)) {
      n = LabeledStatement(true);
                                               replaceName(n);
                                                                 {if (true) return productionEndTerminal("Statement1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
        n = AssertStatement(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("Statement2","-","-","Replacement","Default",first,token);}
        break;
      case LBRACE:
        n = Block(true);
                       replaceName(n);
                                         {if (true) return productionEndTerminal("Statement3","-","-","Replacement","Default",first,token);}
        break;
      case SEMICOLON:
        n = EmptyStatement(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("Statement4","-","-","Replacement","Default",first,token);}
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        n = StatementExpression(true);
                                     replaceName(n);
        jj_consume_token(SEMICOLON);
                                                           {if (true) return productionEndTerminal("Statement5","-","-","Replacement","Default",first,token);}
        break;
      case SWITCH:
        n = SwitchStatement(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("Statement6","-","-","Replacement","Default",first,token);}
        break;
      case IF:
        n = IfStatement(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("Statement7","-","-","Replacement","Default",first,token);}
        break;
      case WHILE:
        n = WhileStatement(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("Statement8","-","-","Replacement","Default",first,token);}
        break;
      case DO:
        n = DoStatement(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("Statement9","-","-","Replacement","Default",first,token);}
        break;
      case FOR:
        n = ForStatement(true);
                              replaceName(n);
                                                {if (true) return productionEndTerminal("Statement10","-","-","Replacement","Default",first,token);}
        break;
      case BREAK:
        n = BreakStatement(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("Statement11","-","-","Replacement","Default",first,token);}
        break;
      case CONTINUE:
        n = ContinueStatement(true);
                                   replaceName(n);
                                                     {if (true) return productionEndTerminal("Statement12","-","-","Replacement","Default",first,token);}
        break;
      case RETURN:
        n = ReturnStatement(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("Statement13","-","-","Replacement","Default",first,token);}
        break;
      case THROW:
        n = ThrowStatement(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("Statement14","-","-","Replacement","Default",first,token);}
        break;
      case SYNCHRONIZED:
        n = SynchronizedStatement(true);
                                       replaceName(n);
                                                         {if (true) return productionEndTerminal("Statement15","-","-","Replacement","Default",first,token);}
        break;
      case TRY:
        n = TryStatement(true);
                              replaceName(n);
                                                {if (true) return productionEndTerminal("Statement16","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AssertStatement(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ASSERT);
    n = Expression(true);
                                     replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      n = Expression(true);
                                                                               replaceName(n);
      break;
    default:
      jj_la1[108] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                                                                                                      {if (true) return productionEndTerminal("AssertStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo LabeledStatement(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    n = Statement(true);
                                            replaceName(n);
                                                              {if (true) return productionEndTerminal("LabeledStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Block(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOID:
      case VOLATILE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case INCR:
      case DECR:
        ;
        break;
      default:
        jj_la1[109] = jj_gen;
        break label_43;
      }
      n = BlockStatement(true);
                                     replaceName(n);
    }
    jj_consume_token(RBRACE);
                                                             {if (true) return productionEndTerminal("Block","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo BlockStatement(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_43(2147483647)) {
      n = LocalVariableDeclaration(true);
                                                                                     replaceName(n);
      jj_consume_token(SEMICOLON);
                                                                                                           {if (true) return productionEndTerminal("BlockStatement1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        n = Statement(true);
                           replaceName(n);
                                             {if (true) return productionEndTerminal("BlockStatement2","-","-","Replacement","Default",first,token);}
        break;
      case AT:
        n = Annotation(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("BlockStatement3","-","-","Replacement","Default",first,token);}
        break;
      case ABSTRACT:
      case CLASS:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case TRANSIENT:
      case VOLATILE:
        n = Modifiers(true);
                           replaceName(n);
        n = ClassOrInterfaceDeclaration(true);
                                                                                 replaceName(n);
                                                                                                   {if (true) return productionEndTerminal("BlockStatement4","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo LocalVariableDeclaration(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      break;
    default:
      jj_la1[111] = jj_gen;
      ;
    }
    n = Type(true);
                                 replaceName(n);
    n = VariableDeclarator(true);
                                                                              replaceName(n);
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[112] = jj_gen;
        break label_44;
      }
      jj_consume_token(COMMA);
      n = VariableDeclarator(true);
                                                                                                                                replaceName(n);
    }
                                                                                                                                                    {if (true) return productionEndTerminal("LocalVariableDeclaration","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EmptyStatement(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(SEMICOLON);
              {if (true) return productionEndTerminal("EmptyStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StatementExpression(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      n = PreIncrementExpression(true);
                                        replaceName(n);
                                                          {if (true) return productionEndTerminal("StatementExpression1","-","-","Replacement","Default",first,token);}
      break;
    case DECR:
      n = PreDecrementExpression(true);
                                        replaceName(n);
                                                          {if (true) return productionEndTerminal("StatementExpression2","-","-","Replacement","Default",first,token);}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      n = PrimaryExpression(true);
                                   replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        n = StatementExpressionAssignment(true);
                                                                                            replaceName(n);
        break;
      default:
        jj_la1[113] = jj_gen;
        ;
      }
                                                                                                               {if (true) return productionEndTerminal("StatementExpression3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[114] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StatementExpressionAssignment(boolean inTerminal) throws ParseException {
                                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      jj_consume_token(INCR);
               {if (true) return productionEndTerminal("StatementExpressionAssignment1","-","-","Replacement","Default",first,token);}
      break;
    case DECR:
      jj_consume_token(DECR);
               {if (true) return productionEndTerminal("StatementExpressionAssignment2","-","-","Replacement","Default",first,token);}
      break;
    case ASSIGN:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
    case LSHIFTASSIGN:
    case RSIGNEDSHIFTASSIGN:
    case RUNSIGNEDSHIFTASSIGN:
      n = AssignmentOperator(true);
                                    replaceName(n);
      n = Expression(true);
                                                                         replaceName(n);
                                                                                           {if (true) return productionEndTerminal("StatementExpressionAssignment3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[115] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SwitchStatement(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    n = Expression(true);
                                         replaceName(n);
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        jj_la1[116] = jj_gen;
        break label_45;
      }
      n = SwitchStatementLabel(true);
                                                                                                 replaceName(n);
    }
    jj_consume_token(RBRACE);
                                                                                                                         {if (true) return productionEndTerminal("SwitchStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SwitchStatementLabel(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = SwitchLabel(true);
                             replaceName(n);
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOID:
      case VOLATILE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case INCR:
      case DECR:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_46;
      }
      n = BlockStatement(true);
                                                                       replaceName(n);
    }
                                                                                           {if (true) return productionEndTerminal("SwitchStatementLabel","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SwitchLabel(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      n = Expression(true);
                                   replaceName(n);
      jj_consume_token(COLON);
                                                         {if (true) return productionEndTerminal("SwitchLabel1","-","-","Replacement","Default",first,token);}
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      jj_consume_token(COLON);
                        {if (true) return productionEndTerminal("SwitchLabel2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[118] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo IfStatement(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    n = Expression(true);
                                     replaceName(n);
    jj_consume_token(RPAREN);
    n = Statement(true);
                                                                             replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      n = Statement(true);
                                                                                                                                      replaceName(n);
      break;
    default:
      jj_la1[119] = jj_gen;
      ;
    }
                                                                                                                                                         {if (true) return productionEndTerminal("IfStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo WhileStatement(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    n = Expression(true);
                                        replaceName(n);
    jj_consume_token(RPAREN);
    n = Statement(true);
                                                                                replaceName(n);
                                                                                                  {if (true) return productionEndTerminal("WhileStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo DoStatement(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(DO);
    n = Statement(true);
                                replaceName(n);
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    n = Expression(true);
                                                                                 replaceName(n);
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
                                                                                                           {if (true) return productionEndTerminal("DoStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ForStatement(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    n = ForStatementInternal(true);
                                                replaceName(n);
    jj_consume_token(RPAREN);
    n = Statement(true);
                                                                                        replaceName(n);
                                                                                                          {if (true) return productionEndTerminal("ForStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ForStatementInternal(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_44(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        n = FINAL_T(true);
                                                             replaceName(n);
        break;
      default:
        jj_la1[120] = jj_gen;
        ;
      }
      n = Type(true);
                                                                                             replaceName(n);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      n = Expression(true);
                                                                                                                                                   replaceName(n);
                                                                                                                                                                     {if (true) return productionEndTerminal("ForStatementInternal1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_45(2147483647)) {
      n = FINAL_T(true);
                                                                      replaceName(n);
      n = Type(true);
                                                                                                     replaceName(n);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      n = Expression(true);
                                                                                                                                                           replaceName(n);
                                                                                                                                                                             {if (true) return productionEndTerminal("ForStatementInternal2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case SEMICOLON:
      case INCR:
      case DECR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          n = ForInit(true);
                          replaceName(n);
          break;
        default:
          jj_la1[121] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          n = Expression(true);
                                                                     replaceName(n);
          break;
        default:
          jj_la1[122] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          n = ForUpdate(true);
                                                                                                               replaceName(n);
          break;
        default:
          jj_la1[123] = jj_gen;
          ;
        }
                                                                                                                                  {if (true) return productionEndTerminal("ForStatementInternal3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[124] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FINAL_T(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FINAL);
                  {if (true) return productionEndTerminal("FINAL_T","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ForInit(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_46(2147483647)) {
      n = LocalVariableDeclaration(true);
                                                                                     replaceName(n);
                                                                                                       {if (true) return productionEndTerminal("ForInit1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        n = StatementExpressionList(true);
                                         replaceName(n);
                                                           {if (true) return productionEndTerminal("ForInit2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[125] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StatementExpressionList(boolean inTerminal) throws ParseException {
                                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = StatementExpression(true);
                                     replaceName(n);
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[126] = jj_gen;
        break label_47;
      }
      jj_consume_token(COMMA);
      n = StatementExpression(true);
                                                                                        replaceName(n);
    }
                                                                                                            {if (true) return productionEndTerminal("StatementExpressionList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ForUpdate(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = StatementExpressionList(true);
                                         replaceName(n);
                                                           {if (true) return productionEndTerminal("ForUpdate","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo BreakStatement(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[127] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                                    {if (true) return productionEndTerminal("BreakStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ContinueStatement(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[128] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                                       {if (true) return productionEndTerminal("ContinueStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ReturnStatement(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n = Expression(true);
                                      replaceName(n);
      break;
    default:
      jj_la1[129] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                                                             {if (true) return productionEndTerminal("ReturnStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ThrowStatement(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(THROW);
    n = Expression(true);
                                    replaceName(n);
    jj_consume_token(SEMICOLON);
                                                          {if (true) return productionEndTerminal("ThrowStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SynchronizedStatement(boolean inTerminal) throws ParseException {
                                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(SYNCHRONIZED);
    jj_consume_token(LPAREN);
    n = Expression(true);
                                               replaceName(n);
    jj_consume_token(RPAREN);
    n = Block(true);
                                                                                   replaceName(n);
                                                                                                     {if (true) return productionEndTerminal("SynchronizedStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TryStatement(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(TRY);
    n = Block(true);
                             replaceName(n);
    n = TryStatementEnd(true);
                                                                       replaceName(n);
                                                                                         {if (true) return productionEndTerminal("TryStatement","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TryStatementEnd(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CATCH:
      label_48:
      while (true) {
        n = CatchBlock(true);
                             replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[130] = jj_gen;
          break label_48;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        jj_consume_token(FINALLY);
        n = Block(true);
                                                                          replaceName(n);
        break;
      default:
        jj_la1[131] = jj_gen;
        ;
      }
                                                                                             {if (true) return productionEndTerminal("TryStatementEnd1","-","-","Replacement","Default",first,token);}
      break;
    case FINALLY:
      jj_consume_token(FINALLY);
      n = Block(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("TryStatementEnd2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[132] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CatchBlock(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CATCH);
    jj_consume_token(LPAREN);
    n = FormalParameter(true);
                                             replaceName(n);
    jj_consume_token(RPAREN);
    n = Block(true);
                                                                                 replaceName(n);
                                                                                                   {if (true) return productionEndTerminal("CatchBlock","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Annotation(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_47(2147483647)) {
      n = NormalAnnotation(true);
                                                                                       replaceName(n);
                                                                                                         {if (true) return productionEndTerminal("Annotation1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_48(2147483647)) {
      n = SingleMemberAnnotation(true);
                                                                  replaceName(n);
                                                                                    {if (true) return productionEndTerminal("Annotation2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        n = MarkerAnnotation(true);
                                  replaceName(n);
                                                    {if (true) return productionEndTerminal("Annotation3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[133] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo NormalAnnotation(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(AT);
    n = Name(true);
                          replaceName(n);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = MemberValuePairs(true);
                                                                          replaceName(n);
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                                                                 {if (true) return productionEndTerminal("NormalAnnotation","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MarkerAnnotation(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(AT);
    n = Name(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("MarkerAnnotation","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SingleMemberAnnotation(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(AT);
    n = Name(true);
                          replaceName(n);
    jj_consume_token(LPAREN);
    n = MemberValue(true);
                                                                    replaceName(n);
    jj_consume_token(RPAREN);
                                                                                          {if (true) return productionEndTerminal("SingleMemberAnnotation","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MemberValuePairs(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = MemberValuePair(true);
                                 replaceName(n);
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[135] = jj_gen;
        break label_49;
      }
      jj_consume_token(COMMA);
      n = MemberValuePair(true);
                                                                                replaceName(n);
    }
                                                                                                    {if (true) return productionEndTerminal("MemberValuePairs","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MemberValuePair(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    n = MemberValue(true);
                                              replaceName(n);
                                                                {if (true) return productionEndTerminal("MemberValuePair","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MemberValue(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      n = Annotation(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("MemberValue1","-","-","Replacement","Default",first,token);}
      break;
    case LBRACE:
      n = MemberValueArrayInitializer(true);
                                             replaceName(n);
                                                               {if (true) return productionEndTerminal("MemberValue2","-","-","Replacement","Default",first,token);}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n = ConditionalExpression(true);
                                       replaceName(n);
                                                         {if (true) return productionEndTerminal("MemberValue3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[136] = jj_gen;
          {if (true) return productionEndTerminal("MemberValue4","-","-","Replacement","Default",first,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo MemberValueArrayInitializer(boolean inTerminal) throws ParseException {
                                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    n = MemberValue(true);
                                 replaceName(n);
    label_50:
    while (true) {
      if (jj_2_49(2)) {
        ;
      } else {
        break label_50;
      }
      jj_consume_token(COMMA);
      n = MemberValue(true);
                                                                                         replaceName(n);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[137] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
                                                                                                                        {if (true) return productionEndTerminal("MemberValueArrayInitializer","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AnnotationTypeBody(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    label_51:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        jj_la1[138] = jj_gen;
        break label_51;
      }
      n = AnnotationTypeMemberDeclaration(true);
                                                      replaceName(n);
    }
    jj_consume_token(RBRACE);
                                                                              {if (true) return productionEndTerminal("AnnotationTypeBody","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AnnotationTypeMemberDeclaration(boolean inTerminal) throws ParseException {
                                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_50(2147483647)) {
      n = Modifiers(true);
                                                                          replaceName(n);
      n = Type(true);
                                                                                                         replaceName(n);
      t = jj_consume_token(IDENTIFIER);
                                                                                                                                          replaceName(new FSTInfo("<IDENTIFIER>",t.image));
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _DEFAULT:
        n = DefaultValue(true);
                                                                                                                                                                                                                            replaceName(n);
        break;
      default:
        jj_la1[139] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
                                                                                                                                                                                                                                                   {if (true) return productionEndTerminal("AnnotationMethodDecl","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement","Default",first,token);}
    } else if (jj_2_51(2147483647)) {
      n = Modifiers(inTerminal);
                                                                        replaceName(n);
      jj_consume_token(AT);
      jj_consume_token(INTERFACE);
      n = Id(inTerminal);
                                                                                                                           replaceName("Id", n);
                                                                                                                                                   replaceName(n);
      jj_consume_token(LBRACE);
      label_52:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case IDENTIFIER:
        case SEMICOLON:
        case AT:
          ;
          break;
        default:
          jj_la1[140] = jj_gen;
          break label_52;
        }
        n = AnnotationTypeMemberDeclaration(inTerminal);
                                                                                                                                                                                                                        replaceName(n);
      }
      jj_consume_token(RBRACE);
                                                                                                                                                                                                                                                {if (true) return productionEndNonTerminal("AnnotationInnerAnnotation","{Id}","{Id}");}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case AT:
        n = Modifiers(inTerminal);
                                              replaceName(n);
        n = ClassOrInterface(inTerminal);
                                                                                               replaceName(n);
        n = Id(inTerminal);
                                                                                                                                  replaceName("Id", n);
                                                                                                                                                          replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          n = TypeParameters(inTerminal);
                                                                                                                                                                                                          replaceName(n);
          break;
        default:
          jj_la1[141] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
          n = ExtendsList(inTerminal);
                                                                                                                                                                                                                                                        replaceName(n);
          break;
        default:
          jj_la1[142] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPLEMENTS:
          n = ImplementsList(inTerminal);
                                                                                                                                                                                                                                                                                                         replaceName(n);
          break;
        default:
          jj_la1[143] = jj_gen;
          ;
        }
        jj_consume_token(LBRACE);
        label_53:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case CLASS:
          case DOUBLE:
          case ENUM:
          case FINAL:
          case FLOAT:
          case INT:
          case INTERFACE:
          case LONG:
          case NATIVE:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case SHORT:
          case STATIC:
          case STRICTFP:
          case SYNCHRONIZED:
          case TRANSIENT:
          case VOID:
          case VOLATILE:
          case IDENTIFIER:
          case LBRACE:
          case SEMICOLON:
          case AT:
          case LT:
            ;
            break;
          default:
            jj_la1[144] = jj_gen;
            break label_53;
          }
          n = ClassOrInterfaceBodyDeclaration(inTerminal);
                                                                                                                                                                                                                                                                                                                                                                               replaceName(n);
        }
        jj_consume_token(RBRACE);
                                                                                                                                                                                                                                                                                                                                                                                                       {if (true) return productionEndNonTerminal("AnnotationInnerClass","{Id}","{Id}");}
        break;
      default:
        jj_la1[148] = jj_gen;
        if (jj_2_52(2)) {
          n = Modifiers(inTerminal);
                                              replaceName(n);
          jj_consume_token(ENUM);
          n = Id(inTerminal);
                                                                                        replaceName("Id", n);
                                                                                                                replaceName(n);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IMPLEMENTS:
            n = ImplementsList(inTerminal);
                                                                                                                                                                replaceName(n);
            break;
          default:
            jj_la1[145] = jj_gen;
            ;
          }
          jj_consume_token(LBRACE);
          n = EnumConstant(inTerminal);
                                                                                                                                                                                                                  replaceName(n);
          label_54:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[146] = jj_gen;
              break label_54;
            }
            jj_consume_token(COMMA);
            n = EnumConstant(inTerminal);
                                                                                                                                                                                                                                                                    replaceName(n);
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            n = EnumBodyInternal(inTerminal);
                                                                                                                                                                                                                                                                                                                        replaceName(n);
            break;
          default:
            jj_la1[147] = jj_gen;
            ;
          }
          jj_consume_token(RBRACE);
                                                                                                                                                                                                                                                                                                                                               {if (true) return productionEndNonTerminal("AnnotationInnerEnum","{Id}","{Id}");}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FINAL:
          case FLOAT:
          case INT:
          case LONG:
          case NATIVE:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case SHORT:
          case STATIC:
          case STRICTFP:
          case SYNCHRONIZED:
          case TRANSIENT:
          case VOLATILE:
          case IDENTIFIER:
          case AT:
            n = Modifiers(true);
                                        replaceName(n);
            n = FieldDeclaration(true);
                                                                                   replaceName("FieldDeclaration", n);
                                                                                                                         replaceName(n);
                                                                                                                                           {if (true) return productionEndTerminal("AnnotationFieldDecl","{FieldDeclaration}","{FieldDeclaration}","FieldOverriding","Default",first,token);}
            break;
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
              {if (true) return productionEndTerminal("AnnoationEmptyDecl","{AUTO}","{AUTO}","Replacement","Default",first,token);}
            break;
          default:
            jj_la1[149] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo DefaultValue(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(_DEFAULT);
    n = MemberValue(true);
                                       replaceName(n);
                                                         {if (true) return productionEndTerminal("DefaultValue","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  final private boolean jj_3R_211() {
    if (jj_3R_225()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_226()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_3R_211()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_212()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_3R_187()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_188()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_174()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_175()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(HOOK)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_119()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_325() {
    if (jj_3R_334()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_198()) return true;
    return false;
  }

  final private boolean jj_3R_330() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_329()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) return true;
    }
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_363() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_358() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_346() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_355()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_118()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_139()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_324() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_355() {
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_363()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_368() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_367()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_301() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_3R_296()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_296() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_301()) {
    jj_scanpos = xsp;
    if (jj_3R_302()) return true;
    }
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_289()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_3R_56()) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_3R_56()) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_328() {
    if (jj_3R_335()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    }
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_3R_56()) return true;
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_269()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_345() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_344()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_159()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_76()) return true;
    Token xsp;
    if (jj_3_17()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_49()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(84)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_139()) return true;
    return false;
  }

  final private boolean jj_3R_357() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_67()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_395() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_364() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_339() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_221()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_222()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_369() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_332() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_339()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_340()) return true;
    xsp = jj_scanpos;
    if (jj_3R_341()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_342()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_343()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_84()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_367() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_369()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) jj_scanpos = xsp;
    if (jj_3R_356()) return true;
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_84()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_354() {
    if (jj_3R_362()) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_84()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    return false;
  }

  final private boolean jj_3R_373() {
    if (jj_3R_335()) return true;
    return false;
  }

  final private boolean jj_3R_362() {
    if (jj_3R_367()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_368()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_84()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3R_393() {
    if (jj_3R_402()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3R_340() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_354()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_148()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_340()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_358()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_360() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_359() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_403() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_367()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_386() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_394() {
    if (jj_3R_403()) return true;
    return false;
  }

  final private boolean jj_3R_385() {
    Token xsp;
    if (jj_3R_394()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_394()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_395()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_347() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) return true;
    }
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_407() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_257()) return true;
    return false;
  }

  final private boolean jj_3R_379() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_385()) {
    jj_scanpos = xsp;
    if (jj_3R_386()) return true;
    }
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    if (jj_3R_105()) return true;
    xsp = jj_scanpos;
    if (jj_3R_346()) jj_scanpos = xsp;
    if (jj_3R_347()) return true;
    return false;
  }

  final private boolean jj_3R_303() {
    if (jj_3R_311()) return true;
    return false;
  }

  final private boolean jj_3R_376() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_218()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_101()) return true;
    if (jj_3R_379()) return true;
    return false;
  }

  final private boolean jj_3R_311() {
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_378() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_372() {
    if (jj_3R_334()) return true;
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_303()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    return false;
  }

  final private boolean jj_3R_392() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_378()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_356() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_364()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_390() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_352() {
    if (jj_3R_304()) return true;
    return false;
  }

  final private boolean jj_3R_344() {
    if (jj_3R_356()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_357()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_56()) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_56()) return true;
    if (jj_scan_token(ENUM)) return true;
    return false;
  }

  final private boolean jj_3R_333() {
    if (jj_3R_61()) return true;
    if (jj_3R_344()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_345()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_320() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_56()) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_402() {
    if (jj_3R_406()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_56()) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_319() {
    if (jj_3R_56()) return true;
    if (jj_3R_333()) return true;
    return false;
  }

  final private boolean jj_3R_318() {
    if (jj_3R_56()) return true;
    if (jj_3R_332()) return true;
    return false;
  }

  final private boolean jj_3R_350() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3R_406() {
    if (jj_3R_257()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_407()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_317() {
    if (jj_3R_56()) return true;
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_328()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_329()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_330()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_331()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_405() {
    if (jj_3R_406()) return true;
    return false;
  }

  final private boolean jj_3R_316() {
    if (jj_3R_56()) return true;
    if (jj_3R_57()) return true;
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_324()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_325()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_326()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_327()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_404() {
    if (jj_3R_217()) return true;
    return false;
  }

  final private boolean jj_3R_375() {
    if (jj_3R_381()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_3R_314()) return true;
    return false;
  }

  final private boolean jj_3R_371() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_370() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_344()) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_3R_83()) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_401() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_404()) {
    jj_scanpos = xsp;
    if (jj_3R_405()) return true;
    }
    return false;
  }

  final private boolean jj_3R_349() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_3R_203()) return true;
    return false;
  }

  final private boolean jj_3R_314() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_316()) {
    jj_scanpos = xsp;
    if (jj_3R_317()) {
    jj_scanpos = xsp;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_320()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_3R_61()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_391() {
    if (jj_3R_401()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_384() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_391()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_392()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_393()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_304() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_312()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_383() {
    if (jj_3R_83()) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_389() {
    if (jj_3R_182()) return true;
    return false;
  }

  final private boolean jj_3R_382() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_390()) jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_159()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_220()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_351() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_377() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_382()) {
    jj_scanpos = xsp;
    if (jj_3R_383()) {
    jj_scanpos = xsp;
    if (jj_3R_384()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_377()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_218()) return true;
    return false;
  }

  final private boolean jj_3R_337() {
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_145()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_146()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_380() {
    if (jj_3R_387()) return true;
    return false;
  }

  final private boolean jj_3R_336() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_351()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_352()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_218()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_353() {
    if (jj_3R_314()) return true;
    return false;
  }

  final private boolean jj_3R_329() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_336()) {
    jj_scanpos = xsp;
    if (jj_3R_337()) return true;
    }
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_218()) return true;
    return false;
  }

  final private boolean jj_3R_338() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_353()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_218()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_376()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_400() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_399() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_388() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_399()) {
    jj_scanpos = xsp;
    if (jj_3R_400()) return true;
    }
    return false;
  }

  final private boolean jj_3R_381() {
    if (jj_3R_388()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_389()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_335() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_159()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_350()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_375()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_398() {
    if (jj_3R_118()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_397() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  final private boolean jj_3R_334() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_159()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_349()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  final private boolean jj_3R_396() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_387() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_396()) {
    jj_scanpos = xsp;
    if (jj_3R_397()) {
    jj_scanpos = xsp;
    if (jj_3R_398()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_374() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_380()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_3R_229()) return true;
    return false;
  }

  final private boolean jj_3R_276() {
    if (jj_3R_228()) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_57()) return true;
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_371()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_372()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_373()) jj_scanpos = xsp;
    if (jj_3R_304()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_56()) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_56()) return true;
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_56()) return true;
    if (jj_3R_57()) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    if (jj_3R_344()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_370()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_3R_56()) return true;
    if (jj_3R_219()) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_3R_218()) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_3R_217()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_182()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_144()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_218()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_374()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_3R_268()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_3R_267()) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_3R_266()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_3R_265()) return true;
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_3R_304()) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_3R_264()) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_3R_263()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_3R_262()) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_3R_258()) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_257()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_256()) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_255()) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_297() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_290() {
    Token xsp;
    if (jj_3R_297()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_297()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_39()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_279() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) return true;
    }
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_298()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_291() {
    if (jj_3R_279()) return true;
    return false;
  }

  final private boolean jj_3R_281() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) return true;
    }
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_159()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_280()) jj_scanpos = xsp;
    if (jj_3R_281()) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_76()) return true;
    if (jj_3R_279()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_158()) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_186()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) return true;
    }
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_224()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_223()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_3R_78()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_348() {
    if (jj_3R_361()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_3R_78()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_81()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_3R_185()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_113()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_230()) return true;
    return false;
  }

  final private boolean jj_3R_287() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) return true;
    }
    return false;
  }

  final private boolean jj_3R_366() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  final private boolean jj_3R_365() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  final private boolean jj_3R_361() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_365()) {
    jj_scanpos = xsp;
    if (jj_3R_366()) return true;
    }
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_348()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_3R_185()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_178()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_286() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_343() {
    if (jj_3R_182()) return true;
    return false;
  }

  final private boolean jj_3R_285() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_273() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_285()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) return true;
    }
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_3R_275()) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_3R_274()) return true;
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_3R_273()) return true;
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_305() {
    if (jj_3R_313()) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_3R_306()) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_3R_230()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_3R_229()) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_3R_228()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_3R_227()) return true;
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_323() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  final private boolean jj_3R_322() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3R_321() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_315() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_321()) {
    jj_scanpos = xsp;
    if (jj_3R_322()) {
    jj_scanpos = xsp;
    if (jj_3R_323()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_313() {
    if (jj_3R_315()) return true;
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_3R_189()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_305()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) return true;
    }
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_3R_227()) return true;
    if (jj_3R_177()) return true;
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_3R_293()) return true;
    return false;
  }

  final private boolean jj_3R_271() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_177()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_299()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_327() {
    if (jj_3R_314()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_121()) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3R_342() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_3R_272()) return true;
    return false;
  }

  final private boolean jj_3R_282() {
    if (jj_3R_122()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_310() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_309() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3R_308() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_225()) return true;
    return false;
  }

  final private boolean jj_3R_307() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_300() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) {
    jj_scanpos = xsp;
    if (jj_3R_308()) {
    jj_scanpos = xsp;
    if (jj_3R_309()) {
    jj_scanpos = xsp;
    if (jj_3R_310()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_187()) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_211()) return true;
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_3R_300()) return true;
    if (jj_3R_282()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_270() {
    if (jj_3R_282()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_283()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_3R_270()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_271()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_295() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) return true;
    }
    return false;
  }

  final private boolean jj_3R_331() {
    if (jj_3R_338()) return true;
    return false;
  }

  final private boolean jj_3R_326() {
    if (jj_3R_335()) return true;
    return false;
  }

  final private boolean jj_3R_272() {
    if (jj_3R_284()) return true;
    if (jj_3R_248()) return true;
    return false;
  }

  final private boolean jj_3R_341() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_355()) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_3R_248()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_249()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  public JavaJMLParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[150];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x90202000,0x0,0x0,0x80002000,0x9432a000,0x0,0x20000000,0x0,0x9432a000,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x9432a000,0x0,0x0,0x0,0x0,0x20000000,0x0,0x9432a000,0x0,0x20000000,0x0,0x9432a000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44128000,0x44128000,0x0,0x0,0x0,0x0,0x0,0x84128000,0x0,0x80000000,0x0,0x0,0x0,0xc6b3e000,0x44128000,0x0,0x4128000,0x4128000,0x0,0x20000000,0x4128000,0x20000000,0x4128000,0x4128000,0x0,0x0,0x44128000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44128000,0x0,0x44128000,0x0,0x0,0x40000000,0x0,0x0,0x0,0x40000000,0x0,0x0,0x40000000,0x40000000,0x44128000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4693c000,0x0,0xc6b3e000,0xc6b3e000,0x80000000,0x0,0x0,0x44128000,0x0,0x1040000,0xc6b3e000,0x1040000,0x8000000,0x80000000,0xc4128000,0x44128000,0x44128000,0xc4128000,0x44128000,0x0,0x0,0x0,0x44128000,0x80000,0x0,0x80000,0x0,0x0,0x0,0x44128000,0x0,0x9432a000,0x1000000,0x9432a000,0x0,0x20000000,0x0,0x9432a000,0x0,0x0,0x0,0x80202000,0x8412a000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x4000,0x40,0x11338a00,0x100000,0x0,0x11338800,0x113b8f02,0x0,0x0,0x20,0x913b8f02,0x20,0x0,0x0,0x0,0x0,0x0,0x20,0x200,0x0,0x0,0x20,0x0,0x0,0x913b8f02,0x0,0x0,0x0,0x0,0x0,0x0,0x913b8f02,0x0,0x0,0x20,0x913b8f02,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0xa2483502,0xa2483502,0x0,0x0,0x8000000,0x0,0x0,0x80502,0x0,0x0,0x0,0x0,0x8000000,0xf7ffbf16,0xa2483502,0x100000,0x80502,0x80502,0x0,0x400000,0x80502,0x400000,0x80502,0x80080502,0x0,0x0,0xa2483502,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa2483502,0x0,0xa2483502,0x0,0x0,0x22403000,0x0,0x0,0x0,0x22403000,0x0,0x0,0x20002000,0x20000000,0xa2483502,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0xe7cc3516,0x0,0xf7ffbf16,0xf7ffbf16,0x0,0x0,0x0,0xa2483502,0x0,0x0,0xf7ffbf16,0x0,0x0,0x0,0xa2483502,0xa2483502,0xa2483502,0xa2483502,0xa2483502,0x0,0x0,0x0,0xa2483502,0x0,0x1,0x1,0x0,0x0,0x0,0xa2483502,0x0,0x113b8f02,0x0,0x113b8f02,0x0,0x0,0x20,0x913b8f02,0x20,0x0,0x0,0x11338a00,0x113b8d02,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x480001,0x0,0x200000,0x400001,0x480401,0x1000000,0x0,0x0,0x1488401,0x0,0x100000,0x80000,0x80000,0x1000000,0x0,0x0,0x0,0x100000,0x100000,0x0,0x100000,0x80000,0x1488401,0x2000,0x8000,0x400,0x100000,0x0,0x0,0x1488401,0x1000000,0x0,0x0,0x1488401,0x0,0x100000,0x80000,0x80000,0x100000,0x800000,0x20000,0x600a744,0x600a744,0x100000,0x1000000,0x0,0x88000,0x20000,0x400400,0x100000,0x0,0x0,0x1000000,0x0,0x48a747,0x2744,0x0,0x0,0x400,0x100000,0x0,0x8000400,0x0,0x0,0x400,0x100000,0x800000,0x6002744,0x0,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x0,0xc1000000,0xc1000000,0x0,0x0,0x0,0x0,0x0,0x6002744,0x6000000,0x2744,0x6000000,0x2000,0x6002744,0x0,0x0,0x2000,0x2344,0x400,0x222000,0x344,0x0,0x6002744,0x100000,0x1000000,0x0,0x8000,0x22000,0x20000,0x20000,0x8a746,0x10000000,0x48a747,0x48a747,0x0,0x100000,0x800000,0x2744,0x800000,0x0,0x48a747,0x0,0x0,0x0,0x2744,0x6002744,0x2744,0x82744,0x2744,0x100000,0x400,0x400,0x6002744,0x0,0x0,0x0,0x400000,0x400,0x100000,0x640a744,0x100000,0x480401,0x0,0x480401,0x1000000,0x0,0x0,0x1488401,0x0,0x100000,0x80000,0x400001,0x480401,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x78,0x78,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1ffc000,0x78,0x2,0x4,0x400,0x800,0x200,0x1,0x1,0x0,0x4000000,0x4000000,0x2000,0x60,0x60,0x1180,0x1180,0x78,0x0,0x0,0x0,0x0,0x0,0x18,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x78,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x0,0x18,0x18,0x0,0x0,0x1ffc018,0x18,0x1ffc018,0x0,0x18,0x0,0x0,0x0,0x18,0x78,0x18,0x18,0x18,0x0,0x0,0x0,0x78,0x0,0x0,0x0,0x0,0x0,0x0,0x78,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[52];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public JavaJMLParser(CharStream stream) {
    token_source = new JavaJMLParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 150; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 150; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JavaJMLParser(JavaJMLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 150; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(JavaJMLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 150; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[123];
    for (int i = 0; i < 123; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 150; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 123; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 52; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

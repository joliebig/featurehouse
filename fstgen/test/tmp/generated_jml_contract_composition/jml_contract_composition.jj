
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = true;
  STATIC = false;
  //#if JML
  LOOKAHEAD = 4;
  //#endif
}


PARSER_BEGIN(JMLParser)
package tmp.generated_jml_contract_composition;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;


/**
 * Grammar to parse Java version 1.5
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class JMLParser extends AbstractFSTParser
{
 	public JMLParser(){}
}

PARSER_END(JMLParser)

/* WHITE SPACE */
<DEFAULT, IN_JML_SINGLE_LINE, IN_JML_MULTI_LINE>
SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */


//#if JML
SKIP :
{
 // "//@" : IN_JML_SINGLE_LINE
//|
  "/*@" :  IN_JML_MULTI_LINE
}
//#endif

<IN_JML_MULTI_LINE>
SKIP :
{
  <JML_MULTI_LINE_END: "@*/" > : DEFAULT
| <REG_MULTI_LINE_END: "*/" > : DEFAULT
}
//#if JML


<IN_JML_MULTI_LINE>
SKIP :
{
  <JML_AT: " @" ~["*"]>
}
//#endif

<IN_SINGLE_LINE_COMMENT, IN_JML_SINGLE_LINE>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}


<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */
<DEFAULT, IN_JML_SINGLE_LINE, IN_JML_MULTI_LINE>
TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}
//#if JML
<IN_JML_SINGLE_LINE, IN_JML_MULTI_LINE>
TOKEN :
{
<ORIGINAL_SPEC: "\\original_spec">
|<ORIGINAL_CASE: "\\original_case">
|<ORIGINAL_CLAUSE: "\\original_clause">
|<ORIGINAL: "\\original">
|<HENCE_BY: "hence_by">
|<HENCE_BY_REDUNDANTLY: "hence_by_redundantly">
| < MODEL: "model" >
| < SPEC_PROTECTED: "spec_protected" > 
| < GHOST: "ghost" >
| < PURE: "pure" >
| < INSTANCE: "instance" >
| < HELPER: "helper" >
| < UNINITIALIZED: "uninitialized" >
| < JAVA_MATH: "\\java_math" >
| < SPEC_JAVA_MATH: "spec_java_math" > //JML keywords start here 
| < SPEC_SAFE_MATH: "spec_safe_math" >  
| < CODE_JAVA_MATH: "code_java_math" >  
| < CODE_SAFE_MATH: "code_safe_math" >   
| < ALSO: "also" >
| < SPEC_PUBLIC: "spec_public" >  
| < SPEC_BIGINT_MATH: "spec_bigint_math" >  
| < CODE_BIGINT_MATH: "code_bigint_math" >   
| < NON_NULL: "non_null" >    
| < NULLABLE: "nullable" >   
| < NULLABLE_BY_DEFAULT: "nullable_by_default" >  
| < EXTRACT: "extract" >    
| < METHOD: "method" > 
| < CONSTRUCTOR: "constructor" > 
| < TYPE: "\\TYPE" >
| < IN: "in" >
| < IN_REDUNDANTLY: "in_redundantly" >
| < INTO: "\\into" >
| < MAPS: "maps" >
| < MAPS_REDUNDANTLY: "maps_redundantly" >
| < STATIC_INITIALIZER: "static_initializer" >
| < MAINTAINING: "maintaining" >
| < MAINTAINING_REDUNDANTLY: "maintaining_redundantly" >
| < LOOP_INVARIANT: "loop_invariant" >
| < LOOP_INVARIANT_REDUNDANTLY: "loop_invariant_redundantly" >
| < DECREASING: "decreasing" >
| < DECREASING_REDUNDANTLY: "decreasing_redundantly" >
| < DECREASES: "decreases" >
| < DECREASES_REDUNDANTLY: "decreases_redundantly" >
| < ASSUME: "assume" >
| < ASSUME_REDUNDANTLY: "assume_redundantly" >   
| < SET: "set" >
| < REFINING: "refining" >
| < UNREACHABLE: "unreachable" >
| < DEBUG: "debug" >
| < HENCEBY: "henceby" >
| < HENCEBY_REDUNDANTLY: "henceby_redundantly" >
| < INVARIANT: "invariant" >
| < INVARIANT_REDUNDANTLY: "invariant_redundantly" >
| < CONSTRAINT: "constraint" >
| < CONSTRAINT_REDUNDANTLY: "constraint_redundantly" >
| < EVERYTHING: "\\everything" >
| < SUCH_THAT: "\\such_that" >
| < REPRESENTS: "represents" >
| < REPRESENTS_REDUNDANTLY: "represents_redundantly" >
| < INITIALLY: "initially" >
| < READABLE: "readable" >
| < WRITABLE: "writable" >
| < MONITORS_FOR: "monitors_for" >
| < CHOOSE: "choose" >
| < OR: "or">
| < CHOOSE_IF: "choose_if" >
| < ABRUPT_BEHAVIOR: "abrupt_behavior" >
| < ABRUPT_BEHAVIOUR: "abrupt_behaviour" >
| < CONTINUES: "continues" >
| < CONTINUES_REDUNDANTLY: "continues_redundantly" >
| < BREAKS: "breaks" >
| < BREAKS_REDUNDANTLY: "breaks_redundantly" >
| < RETURNS: "returns" >
| < RETURNS_REDUNDANTLY: "returns_redundantly" >
| < RESULT: "\\result" >
| < OLD: "\\old" >
| < PRE: "\\pre" >
| < NOT_ASSIGNED: "\\not_assigned" >
| < NOT_MODIFIED: "\\not_modified" >
| < ONLY_ACCESSED: "\\only_accessed" >
| < ONLY_CAPTURED: "\\only_captured" >
| < ONLY_CALLED: "\\only_called" >
| < FRESH: "\\fresh" >
| < REACH: "\\reach" >
| < DURATION: "\\duration" >
| < SPACE: "space" >
| < WORKING_SPACE: "\\working_space" >
| < NONNULLELEMENTS: "\\nonnullelements" >
| < TYPEOF: "\\typeof" >
| < ELEMTYPE: "\\elemtype" >
| < LOCKSET: "lockset" >
| < MAX: "\\max" >
| < IS_INITIALIZED: "\\is_initialized" >
| < INVARIANT_FOR: "\\invariant_for" >
| < LBLNEG: "\\lblneg" >
| < FORALL: "\\forall" >
| < EXISTS: "\\exists" >
| < MIN: "\\min" >
| < NUM_OF: "\\num_of" >
| < PRODUCT: "\\product" >
| < SUM: "\\sum" >
| < NOTHING: "\\nothing" >
| < NOT_SPECIFIED: "\\not_specified" >
| < LBLPOS: "\\lblpos" >
| < ONLY_ASSIGNED: "\\only_assigned" >
| < BEHAVIOR: "behavior" >
| < BEHAVIOUR: "behaviour" >
| < NORMAL_BEHAVIOR: "normal_behavior" >
| < NORMAL_BEHAVIOUR: "normal_behaviour" >
| < EXCEPTIONAL_BEHAVIOR: "exceptional_behavior" >
| < EXCEPTIONAL_BEHAVIOUR: "exceptional_behaviour" >
| < SAME: "same" >
| < REQUIRES: "requires" >
| < REQUIRES_REDUNDANTLY: "requires_redundantly" >
| < PRE_REDUNDANTLY: "pre_redundantly" >
| < ENSURES: "ensures" >
| < POST: "post" >
| < ENSURES_REDUNDANTLY: "ensures_redundantly" >
| < POST_REDUNDANTLY: "post_redundantly" >
| < SIGNALS: "signals" >
| < SIGNALS_REDUNDANTLY: "signals_redundantly" >
| < EXSURES: "exsures" >
| < EXSURES_REDUNDANTLY: "exsures_redundantly" >
| < SIGNALS_ONLY: "signals_only" >
| < SIGNALS_ONLY_REDUNDANTLY: "signals_only_redundantly" >
| < DIVERGES: "diverges" >
| < DIVERGES_REDUNDANTLY: "diverges_redundantly" >
| < WHEN: "when" >
| < WHEN_REDUNDANTLY: "when_redundantly" >
| < ASSIGNABLE: "assignable" >
| < ASSIGNABLE_REDUNDANTLY: "assignable_redundantly" >
| < MODIFIABLE: "modifiable" >
| < MODIFIABLE_REDUNDANTLY: "modifiable_redundantly" >
| < CALLABLE: "callable" >
| < CALLABLE_REDUNDANTLY: "callable_redundantly" >
| < MEASURED_BY: "measured_by" >
| < MEASURED_BY_REDUNDANTLY: "measured_by_redundantly" >
| < CAPTURES: "captures" >
| < CAPTURES_REDUNDANTLY: "captures_redundantly" >
| < WORKING_SPACE_REDUNDANTLY: "working_space_redundantly" >
| < DURATION_REDUNDANTLY: "duration_redundantly" >
| < MODIFIES: "modifies" >
| < MODIFIES_REDUNDANTLY: "modifies_redundantly" >
| < CODE: "code" >
| < ASSERT_REDUNDANTLY: "assert_redundantly" >
| < AXIOM: "axiom" >
| < ACCESSIBLE: "accessible" >
| < ACCESSIBLE_REDUNDANTLY: "accessible_redundantly" >
| < IMPLIES_THAT: "implies_that" >
| < FOR_EXAMPLE: "for_example" >
| < EXCEPTIONAL_EXAMPLE: "exceptional_example" >
| < NORMAL_EXAMPLE: "normal_example" >
| < MODEL_PROGRAM: "model_program" >
}
//#endif
/* LITERALS */
<DEFAULT, IN_JML_SINGLE_LINE, IN_JML_MULTI_LINE>
TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","u","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","u","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""     
  >
|  < BOOLEAN_LITERAL: "true" | "false" >
}

/* IDENTIFIERS */
<DEFAULT, IN_JML_SINGLE_LINE, IN_JML_MULTI_LINE>
TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */
<DEFAULT, IN_JML_SINGLE_LINE, IN_JML_MULTI_LINE>
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */
<DEFAULT, IN_JML_SINGLE_LINE, IN_JML_MULTI_LINE>
TOKEN :
{
 < ASSIGN: "=" >

| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
//#if JML
| < LARROW: "<-" >
| < BSLASH: "\\" >
| < RARROW: "->" >
| < RLONGARROW: "==>" >
| < LLONGARROW: "<==" >
| < JMLEQUAL: "<==>" >
| < JMLNOTEQUAL: "<=!=>" >
| < LTCOLON: "<:" >
//#endif
}

/* >'s need special attention due to generics syntax. */
<DEFAULT, IN_JML_SINGLE_LINE, IN_JML_MULTI_LINE>
TOKEN :
{
  < RUNSIGNEDSHIFT: ">>>" >
| < RSIGNEDSHIFT: ">>" >
| < GT: ">" >
| <INF_DESC_START: "(*" >
| <INF_DESC_END: "*)" >
}
FSTInfo OriginalClauseKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ORIGINAL_CLAUSE> {return productionEndTerminal("OriginalClauseKeyword1","-","-","Replacement","Default",first,token);}
 |
	<ORIGINAL> {return productionEndTerminal("OriginalClauseKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OriginalCaseKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ORIGINAL_SPEC> {return productionEndTerminal("OriginalCaseKeyword1","-","-","Replacement","Default",first,token);}
 |
	<ORIGINAL_CASE> {return productionEndTerminal("OriginalCaseKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CompilationUnit(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=PackageDeclaration(inTerminal){ replaceName(n);}] (n=ImportDeclarationWr(inTerminal){ replaceName(n);})* (n=TypeDeclaration(inTerminal){ replaceName("TypeDeclaration", n);}{ replaceName(n);})* <EOF> {return productionEndNonTerminal("CompilationUnit","{TypeDeclaration}","{TypeDeclaration}");}

 )  }

FSTInfo PackageDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"package" n=Name(true){ replaceName(n);} ";" {return productionEndTerminal("PackageDeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ImportDeclarationWr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ModelKeyword(true){ replaceName(n);} n=ImportDeclaration(true){ replaceName("ImportDeclaration", n);}{ replaceName(n);} {return productionEndTerminal("ImportDeclarationWr1","{ImportDeclaration}","{ImportDeclaration}","Replacement","Default",first,token);}
 |
	n=ImportDeclaration(true){ replaceName("ImportDeclaration", n);}{ replaceName(n);} {return productionEndTerminal("ImportDeclarationWr2","{ImportDeclaration}","{ImportDeclaration}","Replacement","Default",first,token);}

 )  }

FSTInfo ImportDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"import" ["static" ] n=Name(true){ replaceName("Name", n);}{ replaceName(n);} [n=ImportPackage(true){ replaceName("ImportPackage", n);}{ replaceName(n);}] ";" {return productionEndTerminal("ImportDeclaration","-","{Name}{ImportPackage}","Replacement","Default",first,token);}

 )  }

FSTInfo ModelKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<MODEL> {return productionEndTerminal("ModelKeyword","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ImportPackage(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	 "." "*" {return productionEndTerminal("ImportPackage","-",".*","Replacement","Default",first,token);}

 )  }

FSTInfo Modifiers(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Modifiers2(inTerminal){ replaceName(n);} {return productionEndNonTerminal("Modifiers","-","-");}

 )  }

FSTInfo Modifiers2(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(LOOKAHEAD(2) n=Modifier(true){ replaceName(n);})* {return productionEndTerminal("Modifiers2","-","-","ModifierListSpecialization","Default",first,token);}

 )  }

FSTInfo Modifier(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"public"  {return productionEndTerminal("Modifier1","-","-","Replacement","Default",first,token);}
 |
	"static"  {return productionEndTerminal("Modifier2","-","-","Replacement","Default",first,token);}
 |
	"protected"  {return productionEndTerminal("Modifier3","-","-","Replacement","Default",first,token);}
 |
	"private"  {return productionEndTerminal("Modifier4","-","-","Replacement","Default",first,token);}
 |
	"final"  {return productionEndTerminal("Modifier5","-","-","Replacement","Default",first,token);}
 |
	"abstract"  {return productionEndTerminal("Modifier6","-","-","Replacement","Default",first,token);}
 |
	"synchronized"  {return productionEndTerminal("Modifier7","-","-","Replacement","Default",first,token);}
 |
	"native"  {return productionEndTerminal("Modifier8","-","-","Replacement","Default",first,token);}
 |
	"transient"  {return productionEndTerminal("Modifier9","-","-","Replacement","Default",first,token);}
 |
	"volatile"  {return productionEndTerminal("Modifier10","-","-","Replacement","Default",first,token);}
 |
	"strictfp"  {return productionEndTerminal("Modifier11","-","-","Replacement","Default",first,token);}
 |
	n=Annotation(true){ replaceName(n);} {return productionEndTerminal("Modifier12","-","-","Replacement","Default",first,token);}
 |
	n=JMLModifier(true){ replaceName(n);} {return productionEndTerminal("Modifier13","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Id(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} {return productionEndTerminal("Id","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement","Default",first,token);}

 )  }

FSTInfo TypeDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	";"  {return productionEndTerminal("EmptyTypeDecl","{AUTO}","{AUTO}","Replacement","Default",first,token);}
 |
	LOOKAHEAD(Modifiers() "@" "interface") n=Modifiers(inTerminal){ replaceName(n);} "@" "interface" n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} "{" (n=AnnotationTypeMemberDeclaration(inTerminal){ replaceName(n);})* "}" {return productionEndNonTerminal("AnnotationTypeDeclaration","{Id}","{Id}");}
 |
	LOOKAHEAD(2) n=Modifiers(inTerminal){ replaceName(n);} n=ClassOrInterface(inTerminal){ replaceName(n);} n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=TypeParameters(inTerminal){ replaceName(n);}] [n=ExtendsList(inTerminal){ replaceName(n);}] [n=ImplementsList(inTerminal){ replaceName(n);}] "{" (n=ClassOrInterfaceBodyDeclaration(inTerminal){ replaceName(n);})* "}" {return productionEndNonTerminal("ClassDeclaration","{Id}","{Id}");}
 |
	LOOKAHEAD(2) n=Modifiers(inTerminal){ replaceName(n);} "enum" n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=ImplementsList(inTerminal){ replaceName(n);}] "{" n=EnumConstant(inTerminal){ replaceName(n);} ("," n=EnumConstant(inTerminal){ replaceName(n);})* [n=EnumBodyInternal(inTerminal){ replaceName(n);}] "}" {return productionEndNonTerminal("EnumDecl","{Id}","{Id}");}

 )  }

FSTInfo AnnotationTypeDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"@" "interface" n=Id(true){ replaceName(n);} n=AnnotationTypeBody(true){ replaceName(n);} {return productionEndTerminal("AnnotationTypeDeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ClassOrInterfaceDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ClassOrInterface(true){ replaceName(n);} n=Id(true){ replaceName(n);} [n=TypeParameters(true){ replaceName(n);}] [n=ExtendsList(true){ replaceName(n);}] [n=ImplementsList(true){ replaceName(n);}] n=ClassOrInterfaceBody(true){ replaceName(n);} {return productionEndTerminal("ClassOrInterfaceDeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ClassOrInterface(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"class"  {return productionEndTerminal("ClassOrInterface1","-","-","Replacement","Default",first,token);}
 |
	"interface"  {return productionEndTerminal("ClassOrInterface2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ExtendsList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"extends" n=ClassOrInterfaceType(true){ replaceName(n);} ("," n=ClassOrInterfaceType(true){ replaceName(n);})* {return productionEndTerminal("ExtendsList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ImplementsList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"implements" n=ClassOrInterfaceType(true){ replaceName(n);} ("," n=ClassOrInterfaceType(true){ replaceName(n);})* {return productionEndTerminal("ImplementsList","-","-","ImplementsListMerging","Default",first,token);}

 )  }

FSTInfo EnumDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"enum" n=Id(true){ replaceName(n);} [n=ImplementsList(true){ replaceName(n);}] n=EnumBody(true){ replaceName(n);} {return productionEndTerminal("EnumDeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EnumBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" n=EnumConstant(true){ replaceName(n);} ("," n=EnumConstant(true){ replaceName(n);})* [n=EnumBodyInternal(true){ replaceName(n);}] "}" {return productionEndTerminal("EnumBody","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EnumBodyInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	";" (n=ClassOrInterfaceBodyDeclaration(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("EnumBodyInternal","","");}

 )  }

FSTInfo EnumConstant(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> [n=Arguments(true){ replaceName(n);}] [n=ClassOrInterfaceBody(true){ replaceName(n);}] {return productionEndTerminal("EnumConstant1","-","-","Replacement","Default",first,token);}
 |
	 {return productionEndTerminal("EnumConstant2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TypeParameters(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<" n=TypeParameter(true){ replaceName(n);} ("," n=TypeParameter(true){ replaceName(n);})* ">" {return productionEndTerminal("TypeParameters","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TypeParameter(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> [n=TypeBound(true){ replaceName(n);}] {return productionEndTerminal("TypeParameter","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TypeBound(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"extends" n=ClassOrInterfaceType(true){ replaceName(n);} ("&" n=ClassOrInterfaceType(true){ replaceName(n);})* {return productionEndTerminal("TypeBound","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ClassOrInterfaceBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" (n=ClassOrInterfaceBodyDeclaration(true){ replaceName(n);})* "}" {return productionEndTerminal("ClassOrInterfaceBody","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ClassOrInterfaceBodyDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(JMLDeclaration()) n=JMLDeclaration(inTerminal){ replaceName(n);} {return productionEndNonTerminal("ClassOrInterfaceBodyDeclaration1","{AUTO}","{AUTO}");}
 |
	LOOKAHEAD(2) n=Initializer(true){ replaceName(n);} {return productionEndTerminal("InitializerDecl","{AUTO}","{AUTO}","Replacement","Default",first,token);}
 |
	LOOKAHEAD(Modifiers() ClassOrInterface()) n=Modifiers(inTerminal){ replaceName(n);} n=ClassOrInterface(inTerminal){ replaceName(n);} n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=TypeParameters(inTerminal){ replaceName(n);}] [n=ExtendsList(inTerminal){ replaceName(n);}] [n=ImplementsList(inTerminal){ replaceName(n);}] "{" (n=ClassOrInterfaceBodyDeclaration(inTerminal){ replaceName(n);})* "}" {return productionEndNonTerminal("InnerClassDecl","{Id}","{Id}");}
 |
	LOOKAHEAD(Modifiers() "enum") n=Modifiers(inTerminal){ replaceName(n);} "enum" n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=ImplementsList(inTerminal){ replaceName(n);}] "{" n=EnumConstant(inTerminal){ replaceName(n);} ("," n=EnumConstant(inTerminal){ replaceName(n);})* [n=EnumBodyInternal(inTerminal){ replaceName(n);}] "}" {return productionEndNonTerminal("InnerEnumDecl","{Id}","{Id}");}
 |
	LOOKAHEAD(MethodSpecification() ConstructorDecl()) n=MethodSpecification(inTerminal){ replaceName(n);} n=ConstructorDecl(inTerminal){ replaceName("ConstructorDecl", n);}{ replaceName(n);} {return productionEndNonTerminal("ConstructorDeclarationWithSpec","{ConstructorDecl}","{ConstructorDecl}");}
 |
	LOOKAHEAD(Modifiers() Type() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ) ) n=ModFieldDeclaration(inTerminal){ replaceName("ModFieldDeclaration", n);}{ replaceName(n);} {return productionEndNonTerminal("FieldDecl","{ModFieldDeclaration}","{ModFieldDeclaration}");}
 |
	LOOKAHEAD(2) n=MethodSpecification(inTerminal){ replaceName(n);} n=MethodDecl(inTerminal){ replaceName("MethodDecl", n);}{ replaceName(n);} {return productionEndNonTerminal("MethodDeclarationWithSpec","{MethodDecl}","{MethodDecl}");}
 |
	";"  {return productionEndTerminal("EmptyDecl","{AUTO}","{AUTO}","Replacement","Default",first,token);}

 )  }

FSTInfo ModFieldDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Modifiers(true){ replaceName(n);} n=FieldDeclaration(true){ replaceName("FieldDeclaration", n);}{ replaceName(n);} {return productionEndTerminal("ModFieldDeclaration","{FieldDeclaration}","{FieldDeclaration}","FieldOverriding","Default",first,token);}

 )  }

FSTInfo MethodDecl(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Modifiers(true){ replaceName(n);} n=MethodDeclaration(true){ replaceName("MethodDeclaration", n);}{ replaceName(n);} {return productionEndTerminal("MethodDecl","{MethodDeclaration}","{MethodDeclaration}","JavaMethodOverriding","Default",first,token);}

 )  }

FSTInfo ConstructorDecl(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Modifiers(true){ replaceName(n);} n=ConstructorDeclaration(true){ replaceName("ConstructorDeclaration", n);}{ replaceName(n);} {return productionEndTerminal("ConstructorDecl","{ConstructorDeclaration}","{ConstructorDeclaration}","ConstructorConcatenation","Default",first,token);}

 )  }

FSTInfo FieldDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Type(true){ replaceName(n);} n=VariableDeclarator(true){ replaceName("VariableDeclarator", n);}{ replaceName(n);} ("," n=VariableDeclarator(true){ replaceName("VariableDeclarator", n);}{ replaceName(n);})* ";" {return productionEndTerminal("FieldDeclaration","{VariableDeclarator}","{VariableDeclarator}","FieldOverriding","Default",first,token);}

 )  }

FSTInfo VariableDeclarator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=VariableDeclaratorId(true){ replaceName("VariableDeclaratorId", n);}{ replaceName(n);} ["=" n=VariableInitializer(true){ replaceName(n);}] {return productionEndTerminal("VariableDeclarator","-","{VariableDeclaratorId}","Replacement","Default",first,token);}

 )  }

FSTInfo VariableDeclaratorId(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} ("[" "]" )* {return productionEndTerminal("VariableDeclaratorId","-","{<IDENTIFIER>}","Replacement","Default",first,token);}

 )  }

FSTInfo VariableInitializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ArrayInitializer(true){ replaceName(n);} {return productionEndTerminal("VariableInitializer1","-","-","Replacement","Default",first,token);}
 |
	n=Expression(true){ replaceName(n);} {return productionEndTerminal("VariableInitializer2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ArrayInitializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" [n=ArrayInitializerInternal(true){ replaceName(n);}] ["," ] "}" {return productionEndTerminal("ArrayInitializer","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ArrayInitializerInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=VariableInitializer(true){ replaceName(n);} (LOOKAHEAD(2) "," n=VariableInitializer(true){ replaceName(n);})* {return productionEndTerminal("ArrayInitializerInternal","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MethodDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=TypeParameters(true){ replaceName(n);}] n=ResultType(true){ replaceName(n);} n=MethodDeclarator(true){ replaceName("MethodDeclarator", n);}{ replaceName(n);} ["throws" n=NameList(true){ replaceName(n);}] n=MethodDeclarationBody(true){ replaceName(n);} {return productionEndTerminal("MethodDeclaration","-","{MethodDeclarator}","Replacement","Default",first,token);}

 )  }

FSTInfo MethodDeclarationBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Block(true){ replaceName(n);} {return productionEndTerminal("MethodDeclarationBody1","-","-","Replacement","Default",first,token);}
 |
	";"  {return productionEndTerminal("MethodDeclarationBody2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MethodDeclarator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} n=FormalParameters(true){ replaceName("FormalParameters", n);}{ replaceName(n);} ("[" "]" )* {return productionEndTerminal("MethodDeclarator","-","{<IDENTIFIER>}({FormalParameters})","Replacement","Default",first,token);}

 )  }

FSTInfo FormalParameters(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" [n=FormalParametersInternal(true){ replaceName("FormalParametersInternal", n);}{ replaceName(n);}] ")" {return productionEndTerminal("FormalParameters","-","{FormalParametersInternal}","Replacement","Default",first,token);}

 )  }

FSTInfo FormalParametersInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=FormalParameter(true){ replaceName("FormalParameter", n);}{ replaceName(n);} ("," n=FormalParameter(true){ replaceName("FormalParameter", n);}{ replaceName(n);})* {return productionEndTerminal("FormalParametersInternal","-","{FormalParameter}^-","Replacement","Default",first,token);}

 )  }

FSTInfo FormalParameter(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[LOOKAHEAD(Annotation()) n=Annotation(true){ replaceName(n);}] (n=ParamModifier(true){ replaceName(n);})* n=Type(true){ replaceName("Type", n);}{ replaceName(n);} ["..." ] n=VariableDeclaratorId(true){ replaceName(n);} {return productionEndTerminal("FormalParameter","-","{Type}","Replacement","Default",first,token);}

 )  }

FSTInfo ParamModifier(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<FINAL> {return productionEndTerminal("ParamModifier1","-","-","Replacement","Default",first,token);}
 |
	<NON_NULL> {return productionEndTerminal("ParamModifier2","-","-","Replacement","Default",first,token);}
 |
	<NULLABLE> {return productionEndTerminal("ParamModifier3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ConstructorDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=TypeParameters(true){ replaceName(n);}] t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} n=FormalParameters(true){ replaceName("FormalParameters", n);}{ replaceName(n);} ["throws" n=NameList(true){ replaceName(n);}] "{" [LOOKAHEAD(ExplicitConstructorInvocation()) n=ExplicitConstructorInvocation(true){ replaceName(n);}] (n=BlockStatement(true){ replaceName(n);})* "}" {return productionEndTerminal("ConstructorDeclaration","-","{<IDENTIFIER>}({FormalParameters})","Replacement","Default",first,token);}

 )  }

FSTInfo ExplicitConstructorInvocation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD("this" Arguments() ";") "this" n=Arguments(true){ replaceName(n);} ";" {return productionEndTerminal("ExplicitConstructorInvocation1","-","-","Replacement","Default",first,token);}
 |
	[LOOKAHEAD(2) n=PrimaryExpression(true){ replaceName(n);} "."] "super" n=Arguments(true){ replaceName(n);} ";" {return productionEndTerminal("ExplicitConstructorInvocation2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Initializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	["static" ] n=Block(true){ replaceName(n);} {return productionEndTerminal("Initializer","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Type(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) n=ReferenceTypeP(true){ replaceName(n);} {return productionEndTerminal("Type1","-","{TOSTRING}","Replacement","Default",first,token);}
 |
	n=PrimitiveType(true){ replaceName(n);} {return productionEndTerminal("Type2","-","{TOSTRING}","Replacement","Default",first,token);}

 )  }

FSTInfo ReferenceTypeP(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=PrimitiveType(true){ replaceName(n);} (LOOKAHEAD(2) "[" "]" )+ {return productionEndTerminal("ReferenceTypeP1","-","-","Replacement","Default",first,token);}
 |
	n=ClassOrInterfaceType(true){ replaceName(n);} (LOOKAHEAD(2) "[" "]" )* {return productionEndTerminal("ReferenceTypeP2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ClassOrInterfaceType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> [LOOKAHEAD(2) n=TypeArguments(true){ replaceName(n);}] (LOOKAHEAD(2) n=ClassOrInterfaceTypeIntern(true){ replaceName(n);})* {return productionEndTerminal("ClassOrInterfaceType","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ClassOrInterfaceTypeIntern(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"." <IDENTIFIER> [LOOKAHEAD(2) n=TypeArguments(true){ replaceName(n);}] {return productionEndTerminal("ClassOrInterfaceTypeIntern","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TypeArguments(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<" n=TypeArgument(true){ replaceName(n);} ("," n=TypeArgument(true){ replaceName(n);})* ">" {return productionEndTerminal("TypeArguments","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TypeArgument(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ReferenceTypeP(true){ replaceName(n);} {return productionEndTerminal("TypeArgument1","-","-","Replacement","Default",first,token);}
 |
	"?" [n=WildcardBounds(true){ replaceName(n);}] {return productionEndTerminal("TypeArgument2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo WildcardBounds(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"extends" n=ReferenceTypeP(true){ replaceName(n);} {return productionEndTerminal("WildcardBounds1","-","-","Replacement","Default",first,token);}
 |
	"super" n=ReferenceTypeP(true){ replaceName(n);} {return productionEndTerminal("WildcardBounds2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PrimitiveType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"boolean"  {return productionEndTerminal("PrimitiveType1","-","-","Replacement","Default",first,token);}
 |
	"char"  {return productionEndTerminal("PrimitiveType2","-","-","Replacement","Default",first,token);}
 |
	"byte"  {return productionEndTerminal("PrimitiveType3","-","-","Replacement","Default",first,token);}
 |
	"short"  {return productionEndTerminal("PrimitiveType4","-","-","Replacement","Default",first,token);}
 |
	"int"  {return productionEndTerminal("PrimitiveType5","-","-","Replacement","Default",first,token);}
 |
	"long"  {return productionEndTerminal("PrimitiveType6","-","-","Replacement","Default",first,token);}
 |
	"float"  {return productionEndTerminal("PrimitiveType7","-","-","Replacement","Default",first,token);}
 |
	"double"  {return productionEndTerminal("PrimitiveType8","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ResultType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"void"  {return productionEndTerminal("ResultType1","-","-","Replacement","Default",first,token);}
 |
	n=Type(true){ replaceName(n);} {return productionEndTerminal("ResultType2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Name(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} (LOOKAHEAD(2) "." t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));})* {return productionEndTerminal("Name","-","{<IDENTIFIER>}^.","Replacement","Default",first,token);}

 )  }

FSTInfo NameList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Name(true){ replaceName(n);} ("," n=Name(true){ replaceName(n);})* {return productionEndTerminal("NameList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Expression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ConditionalExpression(true){ replaceName(n);} [LOOKAHEAD(2) n=AssignExp(true){ replaceName(n);}] {return productionEndTerminal("Expression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AssignExp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AssignmentOperator(true){ replaceName(n);} n=Expression(true){ replaceName(n);} {return productionEndTerminal("AssignExp","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AssignmentOperator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"="  {return productionEndTerminal("AssignmentOperator1","-","-","Replacement","Default",first,token);}
 |
	"*="  {return productionEndTerminal("AssignmentOperator2","-","-","Replacement","Default",first,token);}
 |
	"/="  {return productionEndTerminal("AssignmentOperator3","-","-","Replacement","Default",first,token);}
 |
	"%="  {return productionEndTerminal("AssignmentOperator4","-","-","Replacement","Default",first,token);}
 |
	"+="  {return productionEndTerminal("AssignmentOperator5","-","-","Replacement","Default",first,token);}
 |
	"-="  {return productionEndTerminal("AssignmentOperator6","-","-","Replacement","Default",first,token);}
 |
	"<<="  {return productionEndTerminal("AssignmentOperator7","-","-","Replacement","Default",first,token);}
 |
	">>="  {return productionEndTerminal("AssignmentOperator8","-","-","Replacement","Default",first,token);}
 |
	">>>="  {return productionEndTerminal("AssignmentOperator9","-","-","Replacement","Default",first,token);}
 |
	"&="  {return productionEndTerminal("AssignmentOperator10","-","-","Replacement","Default",first,token);}
 |
	"^="  {return productionEndTerminal("AssignmentOperator11","-","-","Replacement","Default",first,token);}
 |
	"|="  {return productionEndTerminal("AssignmentOperator12","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ConditionalExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(ConditionalOrExpression() "?") n=ConditionalExpressionFull(true){ replaceName(n);} {return productionEndTerminal("ConditionalExpression1","-","-","Replacement","Default",first,token);}
 |
	n=EquivalenceExpr(true){ replaceName(n);} {return productionEndTerminal("ConditionalExpression2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EquivalenceExpr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ImpliesExpr(true){ replaceName(n);} (n=EquivalenceOpImpliesExpr(true){ replaceName(n);})* {return productionEndTerminal("EquivalenceExpr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EquivalenceOpImpliesExpr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=EquivalenceOp(true){ replaceName(n);} n=ImpliesExpr(true){ replaceName(n);} {return productionEndTerminal("EquivalenceOpImpliesExpr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EquivalenceOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<JMLEQUAL> {return productionEndTerminal("EquivalenceOp1","-","-","Replacement","Default",first,token);}
 |
	<JMLNOTEQUAL> {return productionEndTerminal("EquivalenceOp2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ImpliesExpr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ConditionalOrExpression(true){ replaceName(n);} [n=RLongArrowImpliesNonBackwardExpr(true){ replaceName(n);}] {return productionEndTerminal("ImpliesExpr1","-","-","Replacement","Default",first,token);}
 |
	n=ConditionalOrExpression(true){ replaceName(n);} <LLONGARROW> n=ConditionalOrExpression(true){ replaceName(n);} (n=LLongArrowConditionalOrExpression(true){ replaceName(n);})* {return productionEndTerminal("ImpliesExpr2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ImpliesNonBackwardExpr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ConditionalOrExpression(true){ replaceName(n);} [n=RLongArrowImpliesNonBackwardExpr(true){ replaceName(n);}] {return productionEndTerminal("ImpliesNonBackwardExpr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RLongArrowImpliesNonBackwardExpr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<RLONGARROW> n=ImpliesNonBackwardExpr(true){ replaceName(n);} {return productionEndTerminal("RLongArrowImpliesNonBackwardExpr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo LLongArrowConditionalOrExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<LLONGARROW> n=ConditionalOrExpression(true){ replaceName(n);} {return productionEndTerminal("LLongArrowConditionalOrExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ConditionalExpressionFull(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ConditionalOrExpression(true){ replaceName(n);} "?" n=Expression(true){ replaceName(n);} ":" n=Expression(true){ replaceName(n);} {return productionEndTerminal("ConditionalExpressionFull","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ConditionalOrExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ConditionalAndExpression(true){ replaceName(n);} ("||" n=ConditionalAndExpression(true){ replaceName(n);})* {return productionEndTerminal("ConditionalOrExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ConditionalAndExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=InclusiveOrExpression(true){ replaceName(n);} ("&&" n=InclusiveOrExpression(true){ replaceName(n);})* {return productionEndTerminal("ConditionalAndExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo InclusiveOrExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ExclusiveOrExpression(true){ replaceName(n);} ("|" n=ExclusiveOrExpression(true){ replaceName(n);})* {return productionEndTerminal("InclusiveOrExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ExclusiveOrExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AndExpression(true){ replaceName(n);} ("^" n=AndExpression(true){ replaceName(n);})* {return productionEndTerminal("ExclusiveOrExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AndExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=EqualityExpression(true){ replaceName(n);} ("&" n=EqualityExpression(true){ replaceName(n);})* {return productionEndTerminal("AndExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EqualityExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=InstanceOfExpression(true){ replaceName(n);} (n=EqualityExpressionIntern(true){ replaceName(n);})* {return productionEndTerminal("EqualityExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EqualityExpressionIntern(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=EqualityOp(true){ replaceName(n);} n=InstanceOfExpression(true){ replaceName(n);} {return productionEndTerminal("EqualityExpressionIntern","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EqualityOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"=="  {return productionEndTerminal("EqualityOp1","-","-","Replacement","Default",first,token);}
 |
	"!="  {return productionEndTerminal("EqualityOp2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo InstanceOfExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=RelationalExpression(true){ replaceName(n);} ["instanceof" n=Type(true){ replaceName(n);}] {return productionEndTerminal("InstanceOfExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RelationalExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ShiftExpression(true){ replaceName(n);} (n=RelationalExpressionIntern(true){ replaceName(n);})* {return productionEndTerminal("RelationalExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RelationalExpressionIntern(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=RelationalOp(true){ replaceName(n);} n=ShiftExpression(true){ replaceName(n);} {return productionEndTerminal("RelationalExpressionIntern","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RelationalOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<"  {return productionEndTerminal("RelationalOp1","-","-","Replacement","Default",first,token);}
 |
	">"  {return productionEndTerminal("RelationalOp2","-","-","Replacement","Default",first,token);}
 |
	"<="  {return productionEndTerminal("RelationalOp3","-","-","Replacement","Default",first,token);}
 |
	">="  {return productionEndTerminal("RelationalOp4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ShiftExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AdditiveExpression(true){ replaceName(n);} (LOOKAHEAD(2) n=ShiftExpressionRight(true){ replaceName(n);})* {return productionEndTerminal("ShiftExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ShiftExpressionRight(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ShiftOp(true){ replaceName(n);} n=AdditiveExpression(true){ replaceName(n);} {return productionEndTerminal("ShiftExpressionRight","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ShiftOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<<"  {return productionEndTerminal("ShiftOp1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(3) ">" ">" ">"  {return productionEndTerminal("ShiftOp2","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(2) ">" ">"  {return productionEndTerminal("ShiftOp3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AdditiveExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MultiplicativeExpression(true){ replaceName(n);} (n=AdditiveExpressionIntern(true){ replaceName(n);})* {return productionEndTerminal("AdditiveExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AdditiveExpressionIntern(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AdditiveOp(true){ replaceName(n);} n=MultiplicativeExpression(true){ replaceName(n);} {return productionEndTerminal("AdditiveExpressionIntern","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AdditiveOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"+"  {return productionEndTerminal("AdditiveOp1","-","-","Replacement","Default",first,token);}
 |
	"-"  {return productionEndTerminal("AdditiveOp2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MultiplicativeExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=UnaryExpression(true){ replaceName(n);} (n=MultiplicativeExpressionIntern(true){ replaceName(n);})* {return productionEndTerminal("MultiplicativeExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MultiplicativeExpressionIntern(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MultiplicativeOp(true){ replaceName(n);} n=UnaryExpression(true){ replaceName(n);} {return productionEndTerminal("MultiplicativeExpressionIntern","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MultiplicativeOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"*"  {return productionEndTerminal("MultiplicativeOp1","-","-","Replacement","Default",first,token);}
 |
	"/"  {return productionEndTerminal("MultiplicativeOp2","-","-","Replacement","Default",first,token);}
 |
	"%"  {return productionEndTerminal("MultiplicativeOp3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo UnaryExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AdditiveOp(true){ replaceName(n);} n=UnaryExpression(true){ replaceName(n);} {return productionEndTerminal("UnaryExpression1","-","-","Replacement","Default",first,token);}
 |
	n=PreIncrementExpression(true){ replaceName(n);} {return productionEndTerminal("UnaryExpression2","-","-","Replacement","Default",first,token);}
 |
	n=PreDecrementExpression(true){ replaceName(n);} {return productionEndTerminal("UnaryExpression3","-","-","Replacement","Default",first,token);}
 |
	n=UnaryExpressionNotPlusMinus(true){ replaceName(n);} {return productionEndTerminal("UnaryExpression4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PreIncrementExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"++" n=PrimaryExpression(true){ replaceName(n);} {return productionEndTerminal("PreIncrementExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PreDecrementExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"--" n=PrimaryExpression(true){ replaceName(n);} {return productionEndTerminal("PreDecrementExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo UnaryExpressionNotPlusMinus(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=UnaryOp(true){ replaceName(n);} n=UnaryExpression(true){ replaceName(n);} {return productionEndTerminal("UnaryExpressionNotPlusMinus1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(CastLookahead()) n=CastExpression(true){ replaceName(n);} {return productionEndTerminal("UnaryExpressionNotPlusMinus2","-","-","Replacement","Default",first,token);}
 |
	n=PostfixExpression(true){ replaceName(n);} {return productionEndTerminal("UnaryExpressionNotPlusMinus3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo UnaryOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"~"  {return productionEndTerminal("UnaryOp1","-","-","Replacement","Default",first,token);}
 |
	"!"  {return productionEndTerminal("UnaryOp2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CastLookahead(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) "(" n=PrimitiveType(true){ replaceName(n);} {return productionEndTerminal("CastLookahead1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD("(" Type() "[") "(" n=Type(true){ replaceName(n);} "[" "]" {return productionEndTerminal("CastLookahead2","-","-","Replacement","Default",first,token);}
 |
	"(" n=Type(true){ replaceName(n);} ")" n=CastLAOp(true){ replaceName(n);} {return productionEndTerminal("CastLookahead3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CastLAOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"~"  {return productionEndTerminal("CastLAOp1","-","-","Replacement","Default",first,token);}
 |
	"!"  {return productionEndTerminal("CastLAOp2","-","-","Replacement","Default",first,token);}
 |
	"("  {return productionEndTerminal("CastLAOp3","-","-","Replacement","Default",first,token);}
 |
	"this"  {return productionEndTerminal("CastLAOp4","-","-","Replacement","Default",first,token);}
 |
	"super"  {return productionEndTerminal("CastLAOp5","-","-","Replacement","Default",first,token);}
 |
	"new"  {return productionEndTerminal("CastLAOp6","-","-","Replacement","Default",first,token);}
 |
	<IDENTIFIER> {return productionEndTerminal("CastLAOp7","-","-","Replacement","Default",first,token);}
 |
	n=Literal(true){ replaceName(n);} {return productionEndTerminal("CastLAOp8","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PostfixExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=PrimaryExpression(true){ replaceName(n);} [n=PostfixOp(true){ replaceName(n);}] {return productionEndTerminal("PostfixExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PostfixOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"++"  {return productionEndTerminal("PostfixOp1","-","-","Replacement","Default",first,token);}
 |
	"--"  {return productionEndTerminal("PostfixOp2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CastExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD("(" PrimitiveType()) "(" n=Type(true){ replaceName(n);} ")" n=UnaryExpression(true){ replaceName(n);} {return productionEndTerminal("CastExpression1","-","-","Replacement","Default",first,token);}
 |
	"(" n=Type(true){ replaceName(n);} ")" n=UnaryExpressionNotPlusMinus(true){ replaceName(n);} {return productionEndTerminal("CastExpression2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PrimaryExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=PrimaryPrefix(true){ replaceName(n);} (LOOKAHEAD(2) n=PrimarySuffix(true){ replaceName(n);})* {return productionEndTerminal("PrimaryExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MemberSelector(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"." n=TypeArguments(true){ replaceName(n);} <IDENTIFIER> {return productionEndTerminal("MemberSelector","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PrimaryPrefix(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Literal(true){ replaceName(n);} {return productionEndTerminal("PrimaryPrefix1","-","-","Replacement","Default",first,token);}
 |
	"this"  {return productionEndTerminal("PrimaryPrefix2","-","-","Replacement","Default",first,token);}
 |
	"super" "." <IDENTIFIER> {return productionEndTerminal("PrimaryPrefix3","-","-","Replacement","Default",first,token);}
 |
	"(" n=Expression(true){ replaceName(n);} ")" {return productionEndTerminal("PrimaryPrefix4","-","-","Replacement","Default",first,token);}
 |
	n=AllocationExpression(true){ replaceName(n);} {return productionEndTerminal("PrimaryPrefix5","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD( ResultType() "." "class") n=ResultType(true){ replaceName(n);} "." "class" {return productionEndTerminal("PrimaryPrefix6","-","-","Replacement","Default",first,token);}
 |
	n=Name(true){ replaceName(n);} {return productionEndTerminal("PrimaryPrefix7","-","-","Replacement","Default",first,token);}
 |
	n=JmlPrimary(true){ replaceName(n);} {return productionEndTerminal("PrimaryPrefix8","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PrimarySuffix(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) "." "this"  {return productionEndTerminal("PrimarySuffix1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(2) "." "super"  {return productionEndTerminal("PrimarySuffix2","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(2) "." n=AllocationExpression(true){ replaceName(n);} {return productionEndTerminal("PrimarySuffix3","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(3) n=MemberSelector(true){ replaceName(n);} {return productionEndTerminal("PrimarySuffix4","-","-","Replacement","Default",first,token);}
 |
	"[" n=Expression(true){ replaceName(n);} "]" {return productionEndTerminal("PrimarySuffix5","-","-","Replacement","Default",first,token);}
 |
	"." <IDENTIFIER> {return productionEndTerminal("PrimarySuffix6","-","-","Replacement","Default",first,token);}
 |
	n=Arguments(true){ replaceName(n);} {return productionEndTerminal("PrimarySuffix7","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Literal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<INTEGER_LITERAL> {return productionEndTerminal("Literal1","-","-","Replacement","Default",first,token);}
 |
	<FLOATING_POINT_LITERAL> {return productionEndTerminal("Literal2","-","-","Replacement","Default",first,token);}
 |
	<CHARACTER_LITERAL> {return productionEndTerminal("Literal3","-","-","Replacement","Default",first,token);}
 |
	<STRING_LITERAL> {return productionEndTerminal("Literal4","-","-","Replacement","Default",first,token);}
 |
	n=BooleanLiteral(true){ replaceName(n);} {return productionEndTerminal("Literal5","-","-","Replacement","Default",first,token);}
 |
	n=NullLiteral(true){ replaceName(n);} {return productionEndTerminal("Literal6","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo BooleanLiteral(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"true"  {return productionEndTerminal("BooleanLiteral1","-","-","Replacement","Default",first,token);}
 |
	"false"  {return productionEndTerminal("BooleanLiteral2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NullLiteral(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"null"  {return productionEndTerminal("NullLiteral","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Arguments(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" [n=ArgumentList(true){ replaceName(n);}] ")" {return productionEndTerminal("Arguments","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ArgumentList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Expression(true){ replaceName(n);} ("," n=Expression(true){ replaceName(n);})* {return productionEndTerminal("ArgumentList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AllocationExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) "new" n=PrimitiveType(true){ replaceName(n);} n=ArrayDimsAndInits(true){ replaceName(n);} {return productionEndTerminal("AllocationExpression1","-","-","Replacement","Default",first,token);}
 |
	"new" n=ClassOrInterfaceType(true){ replaceName(n);} [n=TypeArguments(true){ replaceName(n);}] n=AllocationExpressionInit(true){ replaceName(n);} {return productionEndTerminal("AllocationExpression2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AllocationExpressionInit(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ArrayDimsAndInits(true){ replaceName(n);} {return productionEndTerminal("AllocationExpressionInit1","-","-","Replacement","Default",first,token);}
 |
	n=Arguments(true){ replaceName(n);} [n=ClassOrInterfaceBody(true){ replaceName(n);}] {return productionEndTerminal("AllocationExpressionInit2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ArrayDimsAndInits(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) "[" n=Expression(true){ replaceName(n);} "]" (LOOKAHEAD(2) "[" n=Expression(true){ replaceName(n);} "]")* (LOOKAHEAD(2) "[" "]" )* {return productionEndTerminal("ArrayDimsAndInits1","-","-","Replacement","Default",first,token);}
 |
	("[" "]" )+ n=ArrayInitializer(true){ replaceName(n);} {return productionEndTerminal("ArrayDimsAndInits2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Statement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) n=LabeledStatement(true){ replaceName(n);} {return productionEndTerminal("Statement1","-","-","Replacement","Default",first,token);}
 |
	n=AssertStatement(true){ replaceName(n);} {return productionEndTerminal("Statement2","-","-","Replacement","Default",first,token);}
 |
	n=Block(true){ replaceName(n);} {return productionEndTerminal("Statement3","-","-","Replacement","Default",first,token);}
 |
	n=EmptyStatement(true){ replaceName(n);} {return productionEndTerminal("Statement4","-","-","Replacement","Default",first,token);}
 |
	n=StatementExpression(true){ replaceName(n);} ";" {return productionEndTerminal("Statement5","-","-","Replacement","Default",first,token);}
 |
	n=SwitchStatement(true){ replaceName(n);} {return productionEndTerminal("Statement6","-","-","Replacement","Default",first,token);}
 |
	n=IfStatement(true){ replaceName(n);} {return productionEndTerminal("Statement7","-","-","Replacement","Default",first,token);}
 |
	n=WhileStatement(true){ replaceName(n);} {return productionEndTerminal("Statement8","-","-","Replacement","Default",first,token);}
 |
	n=DoStatement(true){ replaceName(n);} {return productionEndTerminal("Statement9","-","-","Replacement","Default",first,token);}
 |
	n=ForStatement(true){ replaceName(n);} {return productionEndTerminal("Statement10","-","-","Replacement","Default",first,token);}
 |
	n=BreakStatement(true){ replaceName(n);} {return productionEndTerminal("Statement11","-","-","Replacement","Default",first,token);}
 |
	n=ContinueStatement(true){ replaceName(n);} {return productionEndTerminal("Statement12","-","-","Replacement","Default",first,token);}
 |
	n=ReturnStatement(true){ replaceName(n);} {return productionEndTerminal("Statement13","-","-","Replacement","Default",first,token);}
 |
	n=ThrowStatement(true){ replaceName(n);} {return productionEndTerminal("Statement14","-","-","Replacement","Default",first,token);}
 |
	n=SynchronizedStatement(true){ replaceName(n);} {return productionEndTerminal("Statement15","-","-","Replacement","Default",first,token);}
 |
	n=TryStatement(true){ replaceName(n);} {return productionEndTerminal("Statement16","-","-","Replacement","Default",first,token);}
 |
	n=AssertStatement(true){ replaceName(n);} {return productionEndTerminal("Statement17","-","-","Replacement","Default",first,token);}
 |
	n=JMLAnnotationStatement(true){ replaceName(n);} {return productionEndTerminal("Statement18","-","-","Replacement","Default",first,token);}
 |
	n=ModelProgStatement(true){ replaceName(n);} {return productionEndTerminal("Statement19","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AssertRedundantlyStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ASSERT_REDUNDANTLY> n=Predicate(true){ replaceName(n);} [n=ColonExpression(true){ replaceName(n);}] {return productionEndTerminal("AssertRedundantlyStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo JMLAnnotationStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AssertRedundantlyStatement(true){ replaceName(n);} {return productionEndTerminal("JMLAnnotationStatement1","-","-","Replacement","Default",first,token);}
 |
	n=AssumeStatement(true){ replaceName(n);} {return productionEndTerminal("JMLAnnotationStatement2","-","-","Replacement","Default",first,token);}
 |
	n=HenceByStatement(true){ replaceName(n);} {return productionEndTerminal("JMLAnnotationStatement3","-","-","Replacement","Default",first,token);}
 |
	n=SetStatement(true){ replaceName(n);} {return productionEndTerminal("JMLAnnotationStatement4","-","-","Replacement","Default",first,token);}
 |
	n=RefiningStatement(true){ replaceName(n);} {return productionEndTerminal("JMLAnnotationStatement5","-","-","Replacement","Default",first,token);}
 |
	n=UnreachableStatement(true){ replaceName(n);} {return productionEndTerminal("JMLAnnotationStatement6","-","-","Replacement","Default",first,token);}
 |
	n=DebugStatement(true){ replaceName(n);} {return productionEndTerminal("JMLAnnotationStatement7","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SetStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<SET> n=Expression(true){ replaceName(n);} {return productionEndTerminal("SetStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RefiningStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<REFINING> n=SpecStatement(true){ replaceName(n);} n=Statement(true){ replaceName(n);} {return productionEndTerminal("RefiningStatement1","-","-","Replacement","Default",first,token);}
 |
	<REFINING> n=GenericSpecStatementCase(true){ replaceName(n);} n=Statement(true){ replaceName(n);} {return productionEndTerminal("RefiningStatement2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo UnreachableStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<UNREACHABLE> {return productionEndTerminal("UnreachableStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DebugStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<DEBUG> n=Expression(true){ replaceName(n);} {return productionEndTerminal("DebugStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo HenceByStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=HenceByKeyword(true){ replaceName(n);} n=Predicate(true){ replaceName(n);} {return productionEndTerminal("HenceByStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo HenceByKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<HENCE_BY> {return productionEndTerminal("HenceByKeyword1","-","-","Replacement","Default",first,token);}
 |
	<HENCE_BY_REDUNDANTLY> {return productionEndTerminal("HenceByKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AssertStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"assert" n=Expression(true){ replaceName(n);} [":" n=Expression(true){ replaceName(n);}] ";" {return productionEndTerminal("AssertStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo LabeledStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> ":" n=Statement(true){ replaceName(n);} {return productionEndTerminal("LabeledStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Block(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" (n=BlockStatement(true){ replaceName(n);})* "}" {return productionEndTerminal("Block","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo BlockStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD([ "final" ] Type() <IDENTIFIER>) n=LocalVariableDeclaration(true){ replaceName(n);} ";" {return productionEndTerminal("BlockStatement1","-","-","Replacement","Default",first,token);}
 |
	n=Statement(true){ replaceName(n);} {return productionEndTerminal("BlockStatement2","-","-","Replacement","Default",first,token);}
 |
	n=Annotation(true){ replaceName(n);} {return productionEndTerminal("BlockStatement3","-","-","Replacement","Default",first,token);}
 |
	n=Modifiers(true){ replaceName(n);} n=ClassOrInterfaceDeclaration(true){ replaceName(n);} {return productionEndTerminal("BlockStatement4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo LocalVariableDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	["final" ] n=Type(true){ replaceName(n);} n=VariableDeclarator(true){ replaceName(n);} ("," n=VariableDeclarator(true){ replaceName(n);})* {return productionEndTerminal("LocalVariableDeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EmptyStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	";"  {return productionEndTerminal("EmptyStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StatementExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=PreIncrementExpression(true){ replaceName(n);} {return productionEndTerminal("StatementExpression1","-","-","Replacement","Default",first,token);}
 |
	n=PreDecrementExpression(true){ replaceName(n);} {return productionEndTerminal("StatementExpression2","-","-","Replacement","Default",first,token);}
 |
	n=PrimaryExpression(true){ replaceName(n);} [n=StatementExpressionAssignment(true){ replaceName(n);}] {return productionEndTerminal("StatementExpression3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StatementExpressionAssignment(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"++"  {return productionEndTerminal("StatementExpressionAssignment1","-","-","Replacement","Default",first,token);}
 |
	"--"  {return productionEndTerminal("StatementExpressionAssignment2","-","-","Replacement","Default",first,token);}
 |
	n=AssignmentOperator(true){ replaceName(n);} n=Expression(true){ replaceName(n);} {return productionEndTerminal("StatementExpressionAssignment3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SwitchStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"switch" "(" n=Expression(true){ replaceName(n);} ")" "{" (n=SwitchStatementLabel(true){ replaceName(n);})* "}" {return productionEndTerminal("SwitchStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SwitchStatementLabel(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SwitchLabel(true){ replaceName(n);} (n=BlockStatement(true){ replaceName(n);})* {return productionEndTerminal("SwitchStatementLabel","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SwitchLabel(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"case" n=Expression(true){ replaceName(n);} ":" {return productionEndTerminal("SwitchLabel1","-","-","Replacement","Default",first,token);}
 |
	"default" ":"  {return productionEndTerminal("SwitchLabel2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo IfStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"if" "(" n=Expression(true){ replaceName(n);} ")" n=Statement(true){ replaceName(n);} [LOOKAHEAD(1) "else" n=Statement(true){ replaceName(n);}] {return productionEndTerminal("IfStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo WhileStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"while" "(" n=Expression(true){ replaceName(n);} ")" n=Statement(true){ replaceName(n);} {return productionEndTerminal("WhileStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DoStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"do" n=Statement(true){ replaceName(n);} "while" "(" n=Expression(true){ replaceName(n);} ")" ";" {return productionEndTerminal("DoStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ForStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"for" "(" n=ForStatementInternal(true){ replaceName(n);} ")" n=Statement(true){ replaceName(n);} {return productionEndTerminal("ForStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ForStatementInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(Type() <IDENTIFIER> ":") [n=FINAL_T(true){ replaceName(n);}] n=Type(true){ replaceName(n);} <IDENTIFIER> ":" n=Expression(true){ replaceName(n);} {return productionEndTerminal("ForStatementInternal1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(FINAL_T() Type() <IDENTIFIER> ":") n=FINAL_T(true){ replaceName(n);} n=Type(true){ replaceName(n);} <IDENTIFIER> ":" n=Expression(true){ replaceName(n);} {return productionEndTerminal("ForStatementInternal2","-","-","Replacement","Default",first,token);}
 |
	[n=ForInit(true){ replaceName(n);}] ";" [n=Expression(true){ replaceName(n);}] ";" [n=ForUpdate(true){ replaceName(n);}] {return productionEndTerminal("ForStatementInternal3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo FINAL_T(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"final"  {return productionEndTerminal("FINAL_T","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ForInit(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD([ "final" ] Type() <IDENTIFIER>) n=LocalVariableDeclaration(true){ replaceName(n);} {return productionEndTerminal("ForInit1","-","-","Replacement","Default",first,token);}
 |
	n=StatementExpressionList(true){ replaceName(n);} {return productionEndTerminal("ForInit2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StatementExpressionList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=StatementExpression(true){ replaceName(n);} ("," n=StatementExpression(true){ replaceName(n);})* {return productionEndTerminal("StatementExpressionList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ForUpdate(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=StatementExpressionList(true){ replaceName(n);} {return productionEndTerminal("ForUpdate","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo BreakStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"break" [<IDENTIFIER>] ";" {return productionEndTerminal("BreakStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ContinueStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"continue" [<IDENTIFIER>] ";" {return productionEndTerminal("ContinueStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ReturnStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"return" [n=Expression(true){ replaceName(n);}] ";" {return productionEndTerminal("ReturnStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ThrowStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"throw" n=Expression(true){ replaceName(n);} ";" {return productionEndTerminal("ThrowStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SynchronizedStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"synchronized" "(" n=Expression(true){ replaceName(n);} ")" n=Block(true){ replaceName(n);} {return productionEndTerminal("SynchronizedStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TryStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"try" n=Block(true){ replaceName(n);} n=TryStatementEnd(true){ replaceName(n);} {return productionEndTerminal("TryStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TryStatementEnd(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=CatchBlock(true){ replaceName(n);})+ ["finally" n=Block(true){ replaceName(n);}] {return productionEndTerminal("TryStatementEnd1","-","-","Replacement","Default",first,token);}
 |
	"finally" n=Block(true){ replaceName(n);} {return productionEndTerminal("TryStatementEnd2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CatchBlock(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"catch" "(" n=FormalParameter(true){ replaceName(n);} ")" n=Block(true){ replaceName(n);} {return productionEndTerminal("CatchBlock","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Annotation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD("@" Name() "(" ( <IDENTIFIER> "=" | ")" )) n=NormalAnnotation(true){ replaceName(n);} {return productionEndTerminal("Annotation1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD("@" Name() "(") n=SingleMemberAnnotation(true){ replaceName(n);} {return productionEndTerminal("Annotation2","-","-","Replacement","Default",first,token);}
 |
	n=MarkerAnnotation(true){ replaceName(n);} {return productionEndTerminal("Annotation3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NormalAnnotation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"@" n=Name(true){ replaceName(n);} "(" [n=MemberValuePairs(true){ replaceName(n);}] ")" {return productionEndTerminal("NormalAnnotation","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MarkerAnnotation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"@" n=Name(true){ replaceName(n);} {return productionEndTerminal("MarkerAnnotation","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SingleMemberAnnotation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"@" n=Name(true){ replaceName(n);} "(" n=MemberValue(true){ replaceName(n);} ")" {return productionEndTerminal("SingleMemberAnnotation","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MemberValuePairs(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MemberValuePair(true){ replaceName(n);} ("," n=MemberValuePair(true){ replaceName(n);})* {return productionEndTerminal("MemberValuePairs","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MemberValuePair(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> "=" n=MemberValue(true){ replaceName(n);} {return productionEndTerminal("MemberValuePair","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MemberValue(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Annotation(true){ replaceName(n);} {return productionEndTerminal("MemberValue1","-","-","Replacement","Default",first,token);}
 |
	n=MemberValueArrayInitializer(true){ replaceName(n);} {return productionEndTerminal("MemberValue2","-","-","Replacement","Default",first,token);}
 |
	n=ConditionalExpression(true){ replaceName(n);} {return productionEndTerminal("MemberValue3","-","-","Replacement","Default",first,token);}
 |
	 {return productionEndTerminal("MemberValue4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MemberValueArrayInitializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" n=MemberValue(true){ replaceName(n);} (LOOKAHEAD(2) "," n=MemberValue(true){ replaceName(n);})* ["," ] "}" {return productionEndTerminal("MemberValueArrayInitializer","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AnnotationTypeBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" (n=AnnotationTypeMemberDeclaration(true){ replaceName(n);})* "}" {return productionEndTerminal("AnnotationTypeBody","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AnnotationTypeMemberDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(Modifiers() Type() <IDENTIFIER> "(") n=Modifiers(true){ replaceName(n);} n=Type(true){ replaceName(n);} t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} "(" ")" [n=DefaultValue(true){ replaceName(n);}] ";" {return productionEndTerminal("AnnotationMethodDecl","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement","Default",first,token);}
 |
	LOOKAHEAD(Modifiers() "@" "interface") n=Modifiers(inTerminal){ replaceName(n);} "@" "interface" n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} "{" (n=AnnotationTypeMemberDeclaration(inTerminal){ replaceName(n);})* "}" {return productionEndNonTerminal("AnnotationInnerAnnotation","{Id}","{Id}");}
 |
	LOOKAHEAD(1) n=Modifiers(inTerminal){ replaceName(n);} n=ClassOrInterface(inTerminal){ replaceName(n);} n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=TypeParameters(inTerminal){ replaceName(n);}] [n=ExtendsList(inTerminal){ replaceName(n);}] [n=ImplementsList(inTerminal){ replaceName(n);}] "{" (n=ClassOrInterfaceBodyDeclaration(inTerminal){ replaceName(n);})* "}" {return productionEndNonTerminal("AnnotationInnerClass","{Id}","{Id}");}
 |
	LOOKAHEAD(2) n=Modifiers(inTerminal){ replaceName(n);} "enum" n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=ImplementsList(inTerminal){ replaceName(n);}] "{" n=EnumConstant(inTerminal){ replaceName(n);} ("," n=EnumConstant(inTerminal){ replaceName(n);})* [n=EnumBodyInternal(inTerminal){ replaceName(n);}] "}" {return productionEndNonTerminal("AnnotationInnerEnum","{Id}","{Id}");}
 |
	LOOKAHEAD(1) n=Modifiers(true){ replaceName(n);} n=FieldDeclaration(true){ replaceName("FieldDeclaration", n);}{ replaceName(n);} {return productionEndTerminal("AnnotationFieldDecl","{FieldDeclaration}","{FieldDeclaration}","FieldOverriding","Default",first,token);}
 |
	";"  {return productionEndTerminal("AnnoationEmptyDecl","{AUTO}","{AUTO}","Replacement","Default",first,token);}

 )  }

FSTInfo DefaultValue(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"default" n=MemberValue(true){ replaceName(n);} {return productionEndTerminal("DefaultValue","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo JMLModifier(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<SPEC_PUBLIC> {return productionEndTerminal("JMLModifier1","-","-","Replacement","Default",first,token);}
 |
	<SPEC_PROTECTED> {return productionEndTerminal("JMLModifier2","-","-","Replacement","Default",first,token);}
 |
	<MODEL> {return productionEndTerminal("JMLModifier3","-","-","Replacement","Default",first,token);}
 |
	<GHOST> {return productionEndTerminal("JMLModifier4","-","-","Replacement","Default",first,token);}
 |
	<PURE> {return productionEndTerminal("JMLModifier5","-","-","Replacement","Default",first,token);}
 |
	<INSTANCE> {return productionEndTerminal("JMLModifier6","-","-","Replacement","Default",first,token);}
 |
	<HELPER> {return productionEndTerminal("JMLModifier7","-","-","Replacement","Default",first,token);}
 |
	<UNINITIALIZED> {return productionEndTerminal("JMLModifier8","-","-","Replacement","Default",first,token);}
 |
	<SPEC_JAVA_MATH> {return productionEndTerminal("JMLModifier9","-","-","Replacement","Default",first,token);}
 |
	<SPEC_SAFE_MATH> {return productionEndTerminal("JMLModifier10","-","-","Replacement","Default",first,token);}
 |
	<SPEC_BIGINT_MATH> {return productionEndTerminal("JMLModifier11","-","-","Replacement","Default",first,token);}
 |
	<CODE_JAVA_MATH> {return productionEndTerminal("JMLModifier12","-","-","Replacement","Default",first,token);}
 |
	<CODE_SAFE_MATH> {return productionEndTerminal("JMLModifier13","-","-","Replacement","Default",first,token);}
 |
	<CODE_BIGINT_MATH> {return productionEndTerminal("JMLModifier14","-","-","Replacement","Default",first,token);}
 |
	<NON_NULL> {return productionEndTerminal("JMLModifier15","-","-","Replacement","Default",first,token);}
 |
	<NULLABLE> {return productionEndTerminal("JMLModifier16","-","-","Replacement","Default",first,token);}
 |
	<NULLABLE_BY_DEFAULT> {return productionEndTerminal("JMLModifier17","-","-","Replacement","Default",first,token);}
 |
	<EXTRACT> {return productionEndTerminal("JMLModifier18","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo JMLDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=Modifier(inTerminal){ replaceName(n);})* n=Invariant(inTerminal){ replaceName("Invariant", n);}{ replaceName(n);} {return productionEndNonTerminal("JMLDeclaration1","{Invariant}","{Invariant}");}
 |
	(n=Modifier(inTerminal){ replaceName(n);})* n=HistoryConstraint(inTerminal){ replaceName(n);} {return productionEndNonTerminal("JMLDeclaration2","{Invariant}","{Invariant}");}
 |
	(n=Modifier(inTerminal){ replaceName(n);})* n=RepresentsClause(inTerminal){ replaceName(n);} {return productionEndNonTerminal("JMLDeclaration3","{Invariant}","{Invariant}");}
 |
	(n=Modifier(inTerminal){ replaceName(n);})* n=InitiallyClause(inTerminal){ replaceName(n);} {return productionEndNonTerminal("JMLDeclaration4","{Invariant}","{Invariant}");}
 |
	(n=Modifier(inTerminal){ replaceName(n);})* n=MonitorsForClause(inTerminal){ replaceName(n);} {return productionEndNonTerminal("JMLDeclaration5","{Invariant}","{Invariant}");}
 |
	(n=Modifier(inTerminal){ replaceName(n);})* n=ReadableIfClause(inTerminal){ replaceName(n);} {return productionEndNonTerminal("JMLDeclaration6","{Invariant}","{Invariant}");}
 |
	(n=Modifier(inTerminal){ replaceName(n);})* n=WritableIfClause(inTerminal){ replaceName(n);} {return productionEndNonTerminal("JMLDeclaration7","{Invariant}","{Invariant}");}
 |
	(n=Modifier(inTerminal){ replaceName(n);})* n=AxiomClause(inTerminal){ replaceName(n);} {return productionEndNonTerminal("JMLDeclaration8","{Invariant}","{Invariant}");}
 |
	(n=Modifier(inTerminal){ replaceName(n);})* n=DataGroupClause(inTerminal){ replaceName(n);} {return productionEndNonTerminal("JMLDeclaration9","{Invariant}","{Invariant}");}
 |
	(n=Modifier(inTerminal){ replaceName(n);})* n=MapsIntoClause(inTerminal){ replaceName(n);} {return productionEndNonTerminal("JMLDeclaration10","{Invariant}","{Invariant}");}

 )  }

FSTInfo DataGroupClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=InGroupClause(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("DataGroupClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo InGroupClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=InKeyword(true){ replaceName(n);} n=GroupList(true){ replaceName(n);} {return productionEndTerminal("InGroupClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo InKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IN> {return productionEndTerminal("InKeyword1","-","-","Replacement","Default",first,token);}
 |
	<IN_REDUNDANTLY> {return productionEndTerminal("InKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo GroupList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=GroupName(true){ replaceName(n);} (n=CommaGroupName(true){ replaceName(n);})* {return productionEndTerminal("GroupList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CommaGroupName(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<COMMA> n=GroupName(true){ replaceName(n);} {return productionEndTerminal("CommaGroupName","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo GroupName(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=GroupNamePrefix(true){ replaceName(n);}] <IDENTIFIER> {return productionEndTerminal("GroupName","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo GroupNamePrefix(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<SUPER> <COLON> {return productionEndTerminal("GroupNamePrefix1","-","-","Replacement","Default",first,token);}
 |
	<THIS> <COLON> {return productionEndTerminal("GroupNamePrefix2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MapsIntoClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MapsKeyword(true){ replaceName(n);} n=MemberFieldRef(true){ replaceName(n);} <INTO> n=GroupList(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("MapsIntoClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MapsKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<MAPS> {return productionEndTerminal("MapsKeyword1","-","-","Replacement","Default",first,token);}
 |
	<MAPS_REDUNDANTLY> {return productionEndTerminal("MapsKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MemberFieldRef(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> <DOT> n=MapsMemberRefExpr(true){ replaceName(n);} {return productionEndTerminal("MemberFieldRef1","-","-","Replacement","Default",first,token);}
 |
	n=MapsArrayRefExpr(true){ replaceName(n);} [n=DotMapsMemberRefExpr(true){ replaceName(n);}] {return productionEndTerminal("MemberFieldRef2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DotMapsMemberRefExpr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<DOT> n=MapsMemberRefExpr(true){ replaceName(n);} {return productionEndTerminal("DotMapsMemberRefExpr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MapsMemberRefExpr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> {return productionEndTerminal("MapsMemberRefExpr1","-","-","Replacement","Default",first,token);}
 |
	<STAR> {return productionEndTerminal("MapsMemberRefExpr2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MapsArrayRefExpr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> n=MapsSpecArrayDim(true){ replaceName(n);} (n=MapsSpecArrayDim(true){ replaceName(n);})* {return productionEndTerminal("MapsArrayRefExpr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MapsSpecArrayDim(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<LBRACKET> n=SpecArrayRefExpr(true){ replaceName(n);} <RBRACKET> {return productionEndTerminal("MapsSpecArrayDim","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SpecArrayRefExpr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SpecExpression(true){ replaceName(n);} {return productionEndTerminal("SpecArrayRefExpr1","-","-","Replacement","Default",first,token);}
 |
	n=SpecExpression(true){ replaceName(n);} <DOT> <DOT> n=SpecExpression(true){ replaceName(n);} {return productionEndTerminal("SpecArrayRefExpr2","-","-","Replacement","Default",first,token);}
 |
	<STAR> {return productionEndTerminal("SpecArrayRefExpr3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Invariant(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=InvariantKeyword(true){ replaceName(n);} n=Predicate(true){ replaceName("Predicate", n);}{ replaceName(n);} <SEMICOLON> {return productionEndTerminal("Invariant","{Predicate}","{Predicate}","InvariantComposition","Default",first,token);}

 )  }

FSTInfo MethodSpecification(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[LOOKAHEAD(AlsoKeyword()) n=AlsoKeyword(inTerminal){ replaceName(n);}] [n=Specification(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("MethodSpecification","-","-");}

 )  }

FSTInfo AlsoKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ALSO> {return productionEndNonTerminal("AlsoKeyword","-","-");}

 )  }

FSTInfo Specification(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SpecCaseSeq(inTerminal){ replaceName(n);} [n=RedundantSpec(inTerminal){ replaceName(n);}] {return productionEndNonTerminal("Specification","-","-");}

 )  }

FSTInfo SpecCaseSeq(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SpecCase(true){ replaceName(n);} (LOOKAHEAD(3) n=AlsoSpecCase(true){ replaceName(n);})* {return productionEndTerminal("SpecCaseSeq","-","-","ContractComposition","Default",first,token);}

 )  }

FSTInfo AlsoSpecCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ALSO> n=SpecCase(true){ replaceName(n);} {return productionEndTerminal("AlsoSpecCase","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SpecCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=LightweightSpecCase(true){ replaceName(n);} {return productionEndTerminal("SpecCase1","-","-","Replacement","Default",first,token);}
 |
	n=HeavyWeightSpecCase(true){ replaceName(n);} {return productionEndTerminal("SpecCase2","-","-","Replacement","Default",first,token);}
 |
	n=ModelProgram(true){ replaceName(n);} {return productionEndTerminal("SpecCase3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo LightweightSpecCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=GenericSpecCase(true){ replaceName(n);} {return productionEndTerminal("LightweightSpecCase","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo GenericSpecCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=OriginalCaseKeyword(inTerminal){ replaceName(n);} {return productionEndNonTerminal("GenericSpecCase1","{SpecHeader){GenericSpecBody}","{SpecHeader){GenericSpecBody}");}
 |
	[n=SpecVarDecls(inTerminal){ replaceName(n);}] n=SpecHeader(inTerminal){ replaceName(n);} [n=GenericSpecBody(inTerminal){ replaceName("GenericSpecBody", n);}{ replaceName(n);}] {return productionEndNonTerminal("GenericSpecCase2","{SpecHeader){GenericSpecBody}","{SpecHeader){GenericSpecBody}");}
 |
	[n=SpecVarDecls(inTerminal){ replaceName(n);}] n=GenericSpecBody(inTerminal){ replaceName("GenericSpecBody", n);}{ replaceName(n);} {return productionEndNonTerminal("GenericSpecCase3","{SpecHeader){GenericSpecBody}","{SpecHeader){GenericSpecBody}");}

 )  }

FSTInfo GenericSpecBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SimpleSpecBody(true){ replaceName(n);} {return productionEndTerminal("GenericSpecBody1","-","-","Replacement","Default",first,token);}
 |
	<LBRACE> <BIT_OR> n=GenericSpecCaseSeq(true){ replaceName(n);} <BIT_OR> <RBRACE> {return productionEndTerminal("GenericSpecBody2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RedundantSpec(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Implications(true){ replaceName(n);} {return productionEndTerminal("RedundantSpec","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Implications(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IMPLIES_THAT> n=SpecCaseSeq(true){ replaceName(n);} {return productionEndTerminal("Implications","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo HeavyWeightSpecCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=BehaviorSpecCase(true){ replaceName(n);} {return productionEndTerminal("HeavyWeightSpecCase1","-","-","Replacement","Default",first,token);}
 |
	n=ExceptionalBehaviorSpecCase(true){ replaceName(n);} {return productionEndTerminal("HeavyWeightSpecCase2","-","-","Replacement","Default",first,token);}
 |
	n=NormalBehaviorSpecCase(true){ replaceName(n);} {return productionEndTerminal("HeavyWeightSpecCase3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo BehaviorSpecCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=Privacy(true){ replaceName(n);}] [<CODE>] n=BehaviorKeyword(true){ replaceName(n);} n=GenericSpecCase(true){ replaceName(n);} {return productionEndTerminal("BehaviorSpecCase","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo BehaviorKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<BEHAVIOR> {return productionEndTerminal("BehaviorKeyword1","-","-","Replacement","Default",first,token);}
 |
	<BEHAVIOUR> {return productionEndTerminal("BehaviorKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NormalBehaviorSpecCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=Privacy(true){ replaceName(n);}] [<CODE>] n=NormalBehaviorKeyword(true){ replaceName(n);} n=NormalSpecCase(true){ replaceName(n);} {return productionEndTerminal("NormalBehaviorSpecCase","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NormalBehaviorKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<NORMAL_BEHAVIOR> {return productionEndTerminal("NormalBehaviorKeyword1","-","-","Replacement","Default",first,token);}
 |
	<NORMAL_BEHAVIOUR> {return productionEndTerminal("NormalBehaviorKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NormalSpecCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=GenericSpecCase(true){ replaceName(n);} {return productionEndTerminal("NormalSpecCase","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ExceptionalBehaviorSpecCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=Privacy(true){ replaceName(n);}] [<CODE>] n=ExceptionalBehaviorKeyword(true){ replaceName(n);} n=ExceptionalSpecCase(true){ replaceName(n);} {return productionEndTerminal("ExceptionalBehaviorSpecCase","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ExceptionalBehaviorKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<EXCEPTIONAL_BEHAVIOR> {return productionEndTerminal("ExceptionalBehaviorKeyword1","-","-","Replacement","Default",first,token);}
 |
	<EXCEPTIONAL_BEHAVIOUR> {return productionEndTerminal("ExceptionalBehaviorKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ExceptionalSpecCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=GenericSpecCase(true){ replaceName(n);} {return productionEndTerminal("ExceptionalSpecCase","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SpecVarDecls(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ForallVarDecls(true){ replaceName(n);} [n=OldVarDecls(true){ replaceName(n);}] {return productionEndTerminal("SpecVarDecls1","-","-","Replacement","Default",first,token);}
 |
	n=OldVarDecls(true){ replaceName(n);} {return productionEndTerminal("SpecVarDecls2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ForallVarDecls(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ForallVarDeclarator(true){ replaceName(n);} (n=ForallVarDeclarator(true){ replaceName(n);})* {return productionEndTerminal("ForallVarDecls","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ForallVarDeclarator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<FORALL> [n=BoundVarModifiers(true){ replaceName(n);}] n=TypeSpec(true){ replaceName(n);} n=QuantifiedVarDeclarator(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("ForallVarDeclarator","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OldVarDecls(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=OldVarDeclarator(true){ replaceName(n);} (n=OldVarDeclarator(true){ replaceName(n);})* {return productionEndTerminal("OldVarDecls","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OldVarDeclarator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<OLD> [n=BoundVarModifiers(true){ replaceName(n);}] n=TypeSpec(true){ replaceName(n);} n=SpecVariableDeclarators(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("OldVarDeclarator","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RequiresClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=RequiresKeyword(true){ replaceName(n);} n=PredOrNot(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("RequiresClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RequiresKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<REQUIRES> {return productionEndTerminal("RequiresKeyword1","-","-","Replacement","Default",first,token);}
 |
	<PRE> {return productionEndTerminal("RequiresKeyword2","-","-","Replacement","Default",first,token);}
 |
	<REQUIRES_REDUNDANTLY> {return productionEndTerminal("RequiresKeyword3","-","-","Replacement","Default",first,token);}
 |
	<PRE_REDUNDANTLY> {return productionEndTerminal("RequiresKeyword4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PredOrNot(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Predicate(true){ replaceName(n);} {return productionEndTerminal("PredOrNot1","-","-","Replacement","Default",first,token);}
 |
	<NOT_SPECIFIED> {return productionEndTerminal("PredOrNot2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EnsuresClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=EnsuresKeyword(true){ replaceName(n);} n=PredOrNot(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("EnsuresClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo EnsuresKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ENSURES> {return productionEndTerminal("EnsuresKeyword1","-","-","Replacement","Default",first,token);}
 |
	<POST> {return productionEndTerminal("EnsuresKeyword2","-","-","Replacement","Default",first,token);}
 |
	<ENSURES_REDUNDANTLY> {return productionEndTerminal("EnsuresKeyword3","-","-","Replacement","Default",first,token);}
 |
	<POST_REDUNDANTLY> {return productionEndTerminal("EnsuresKeyword4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SignalsClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SignalsKeyword(true){ replaceName(n);} <LPAREN> n=ReferenceTypeP(true){ replaceName(n);} [n=Id(true){ replaceName(n);}] <RPAREN> [n=PredOrNot(true){ replaceName(n);}] <SEMICOLON> {return productionEndTerminal("SignalsClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SignalsKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<SIGNALS> {return productionEndTerminal("SignalsKeyword1","-","-","Replacement","Default",first,token);}
 |
	<SIGNALS_REDUNDANTLY> {return productionEndTerminal("SignalsKeyword2","-","-","Replacement","Default",first,token);}
 |
	<EXSURES> {return productionEndTerminal("SignalsKeyword3","-","-","Replacement","Default",first,token);}
 |
	<EXSURES_REDUNDANTLY> {return productionEndTerminal("SignalsKeyword4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SignalsOnlyClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SignalsOnlyKeyword(true){ replaceName(n);} n=ReferenceTypeP(true){ replaceName(n);} (n=CommaReferenceType(true){ replaceName(n);})* <SEMICOLON> {return productionEndTerminal("SignalsOnlyClause1","-","-","Replacement","Default",first,token);}
 |
	n=SignalsOnlyKeyword(true){ replaceName(n);} <NOTHING> <SEMICOLON> {return productionEndTerminal("SignalsOnlyClause2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CommaReferenceType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<COMMA> n=ReferenceTypeP(true){ replaceName(n);} {return productionEndTerminal("CommaReferenceType","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SignalsOnlyKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<SIGNALS_ONLY> {return productionEndTerminal("SignalsOnlyKeyword1","-","-","Replacement","Default",first,token);}
 |
	<SIGNALS_ONLY_REDUNDANTLY> {return productionEndTerminal("SignalsOnlyKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DivergesClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=DivergesKeyword(true){ replaceName(n);} n=PredOrNot(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("DivergesClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DivergesKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<DIVERGES> {return productionEndTerminal("DivergesKeyword1","-","-","Replacement","Default",first,token);}
 |
	<DIVERGES_REDUNDANTLY> {return productionEndTerminal("DivergesKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo WhenClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=WhenKeyword(true){ replaceName(n);} n=PredOrNot(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("WhenClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo WhenKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<WHEN> {return productionEndTerminal("WhenKeyword1","-","-","Replacement","Default",first,token);}
 |
	<WHEN_REDUNDANTLY> {return productionEndTerminal("WhenKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AssignableClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AssignableKeyword(true){ replaceName(n);} n=StoreRefList(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("AssignableClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AssignableKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ASSIGNABLE> {return productionEndTerminal("AssignableKeyword1","-","-","Replacement","Default",first,token);}
 |
	<ASSIGNABLE_REDUNDANTLY> {return productionEndTerminal("AssignableKeyword2","-","-","Replacement","Default",first,token);}
 |
	<MODIFIABLE> {return productionEndTerminal("AssignableKeyword3","-","-","Replacement","Default",first,token);}
 |
	<MODIFIABLE_REDUNDANTLY> {return productionEndTerminal("AssignableKeyword4","-","-","Replacement","Default",first,token);}
 |
	<MODIFIES> {return productionEndTerminal("AssignableKeyword5","-","-","Replacement","Default",first,token);}
 |
	<MODIFIES_REDUNDANTLY> {return productionEndTerminal("AssignableKeyword6","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AccessibleClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AccessibleKeyword(true){ replaceName(n);} n=StoreRefList(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("AccessibleClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AccessibleKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ACCESSIBLE> {return productionEndTerminal("AccessibleKeyword1","-","-","Replacement","Default",first,token);}
 |
	<ACCESSIBLE_REDUNDANTLY> {return productionEndTerminal("AccessibleKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CallableClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=CallableKeyword(true){ replaceName(n);} n=CallableMethodsList(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("CallableClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CallableKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<CALLABLE> {return productionEndTerminal("CallableKeyword1","-","-","Replacement","Default",first,token);}
 |
	<CALLABLE_REDUNDANTLY> {return productionEndTerminal("CallableKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CallableMethodsList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MethodNameList(true){ replaceName(n);} {return productionEndTerminal("CallableMethodsList1","-","-","Replacement","Default",first,token);}
 |
	n=StoreRefKeyword(true){ replaceName(n);} {return productionEndTerminal("CallableMethodsList2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MeasuredClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MeasuredByKeyword(true){ replaceName(n);} <NOT_SPECIFIED> <SEMICOLON> {return productionEndTerminal("MeasuredClause1","-","-","Replacement","Default",first,token);}
 |
	n=MeasuredByKeyword(true){ replaceName(n);} n=SpecExpression(true){ replaceName(n);} [n=IfPredicate(true){ replaceName(n);}] <SEMICOLON> {return productionEndTerminal("MeasuredClause2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo IfPredicate(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IF> n=Predicate(true){ replaceName(n);} {return productionEndTerminal("IfPredicate","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MeasuredByKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<MEASURED_BY> {return productionEndTerminal("MeasuredByKeyword1","-","-","Replacement","Default",first,token);}
 |
	<MEASURED_BY_REDUNDANTLY> {return productionEndTerminal("MeasuredByKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CapturesClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=CapturesKeyword(true){ replaceName(n);} n=StoreRefList(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("CapturesClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CapturesKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<CAPTURES> {return productionEndTerminal("CapturesKeyword1","-","-","Replacement","Default",first,token);}
 |
	<CAPTURES_REDUNDANTLY> {return productionEndTerminal("CapturesKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo WorkingSpaceClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=WorkingSpaceKeyword(true){ replaceName(n);} <NOT_SPECIFIED> <SEMICOLON> {return productionEndTerminal("WorkingSpaceClause1","-","-","Replacement","Default",first,token);}
 |
	n=WorkingSpaceKeyword(true){ replaceName(n);} n=SpecExpression(true){ replaceName(n);} [n=IfPredicate(true){ replaceName(n);}] <SEMICOLON> {return productionEndTerminal("WorkingSpaceClause2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo WorkingSpaceKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<WORKING_SPACE> {return productionEndTerminal("WorkingSpaceKeyword1","-","-","Replacement","Default",first,token);}
 |
	<WORKING_SPACE_REDUNDANTLY> {return productionEndTerminal("WorkingSpaceKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DurationClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=DurationKeyword(true){ replaceName(n);} <NOT_SPECIFIED> <SEMICOLON> {return productionEndTerminal("DurationClause1","-","-","Replacement","Default",first,token);}
 |
	n=DurationKeyword(true){ replaceName(n);} n=SpecExpression(true){ replaceName(n);} [n=IfPredicate(true){ replaceName(n);}] <SEMICOLON> {return productionEndTerminal("DurationClause2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DurationKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<DURATION> {return productionEndTerminal("DurationKeyword1","-","-","Replacement","Default",first,token);}
 |
	<DURATION_REDUNDANTLY> {return productionEndTerminal("DurationKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ModelProgram(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=Privacy(true){ replaceName(n);}] [<CODE>] <MODEL_PROGRAM> n=JmlCompoundStatement(true){ replaceName(n);} {return productionEndTerminal("ModelProgram","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo JmlCompoundStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Statement(true){ replaceName(n);} {return productionEndTerminal("JmlCompoundStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo JmlStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Statement(true){ replaceName(n);} {return productionEndTerminal("JmlStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ModelProgStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=NondeterministicChoice(true){ replaceName(n);} {return productionEndTerminal("ModelProgStatement1","-","-","Replacement","Default",first,token);}
 |
	n=NondeterministicIf(true){ replaceName(n);} {return productionEndTerminal("ModelProgStatement2","-","-","Replacement","Default",first,token);}
 |
	n=SpecStatement(true){ replaceName(n);} {return productionEndTerminal("ModelProgStatement3","-","-","Replacement","Default",first,token);}
 |
	n=Invariant(true){ replaceName(n);} {return productionEndTerminal("ModelProgStatement4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NondeterministicChoice(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<CHOOSE> n=AlternativeStatements(true){ replaceName(n);} {return productionEndTerminal("NondeterministicChoice","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AlternativeStatements(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=JmlCompoundStatement(true){ replaceName(n);} (n=OrJmlCompoundStatement(true){ replaceName(n);})* {return productionEndTerminal("AlternativeStatements","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OrJmlCompoundStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<OR> n=JmlCompoundStatement(true){ replaceName(n);} {return productionEndTerminal("OrJmlCompoundStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NondeterministicIf(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<CHOOSE_IF> n=GuardedStatements(true){ replaceName(n);} [n=ElseJmlCompoundStatement(true){ replaceName(n);}] {return productionEndTerminal("NondeterministicIf","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ElseJmlCompoundStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ELSE> n=JmlCompoundStatement(true){ replaceName(n);} {return productionEndTerminal("ElseJmlCompoundStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo GuardedStatements(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=GuardedStatement(true){ replaceName(n);} (n=OrGuardedStatement(true){ replaceName(n);})* {return productionEndTerminal("GuardedStatements","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OrGuardedStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<OR> n=GuardedStatement(true){ replaceName(n);} {return productionEndTerminal("OrGuardedStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo GuardedStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<LBRACE> n=AssumeStatement(true){ replaceName(n);} n=JmlStatement(true){ replaceName(n);} (n=JmlStatement(true){ replaceName(n);})* {return productionEndTerminal("GuardedStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MethodOrConstructorKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<METHOD> {return productionEndTerminal("MethodOrConstructorKeyword1","-","-","Replacement","Default",first,token);}
 |
	<CONSTRUCTOR> {return productionEndTerminal("MethodOrConstructorKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SpecStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=Privacy(true){ replaceName(n);}] n=BehaviorKeyword(true){ replaceName(n);} n=GenericSpecStatementCase(true){ replaceName(n);} {return productionEndTerminal("SpecStatement1","-","-","Replacement","Default",first,token);}
 |
	[n=Privacy(true){ replaceName(n);}] n=ExceptionalBehaviorKeyword(true){ replaceName(n);} n=ExceptionalSpecCase(true){ replaceName(n);} {return productionEndTerminal("SpecStatement2","-","-","Replacement","Default",first,token);}
 |
	[n=Privacy(true){ replaceName(n);}] n=NormalBehaviorKeyword(true){ replaceName(n);} n=NormalSpecCase(true){ replaceName(n);} {return productionEndTerminal("SpecStatement3","-","-","Replacement","Default",first,token);}
 |
	[n=Privacy(true){ replaceName(n);}] n=AbruptBehaviorKeyword(true){ replaceName(n);} n=AbruptSpecCase(true){ replaceName(n);} {return productionEndTerminal("SpecStatement4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo GenericSpecStatementCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=SpecVarDecls(true){ replaceName(n);}] n=GenericSpecStatementBody(true){ replaceName(n);} {return productionEndTerminal("GenericSpecStatementCase1","-","-","Replacement","Default",first,token);}
 |
	[n=SpecVarDecls(true){ replaceName(n);}] n=SpecHeader(true){ replaceName(n);} [n=GenericSpecStatementBody(true){ replaceName(n);}] {return productionEndTerminal("GenericSpecStatementCase2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo GenericSpecStatementBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SimpleSpecStatementBody(true){ replaceName(n);} {return productionEndTerminal("GenericSpecStatementBody1","-","-","Replacement","Default",first,token);}
 |
	<LBRACE> n=GenericSpecStatementCaseSeq(true){ replaceName(n);} <RBRACE> {return productionEndTerminal("GenericSpecStatementBody2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo GenericSpecStatementCaseSeq(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=GenericSpecStatementCase(true){ replaceName(n);} (n=AlsoGenericSpecStatementCase(true){ replaceName(n);})* {return productionEndTerminal("GenericSpecStatementCaseSeq","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AlsoGenericSpecStatementCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ALSO> n=GenericSpecStatementCase(true){ replaceName(n);} {return productionEndTerminal("AlsoGenericSpecStatementCase","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SimpleSpecStatementBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SimpleSpecStatementClause(true){ replaceName(n);} (n=SimpleSpecStatementClause(true){ replaceName(n);})* {return productionEndTerminal("SimpleSpecStatementBody","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SimpleSpecStatementClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=DivergesClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecStatementClause1","-","-","Replacement","Default",first,token);}
 |
	n=AssignableClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecStatementClause2","-","-","Replacement","Default",first,token);}
 |
	n=AccessibleClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecStatementClause3","-","-","Replacement","Default",first,token);}
 |
	n=CapturesClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecStatementClause4","-","-","Replacement","Default",first,token);}
 |
	n=CallableClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecStatementClause5","-","-","Replacement","Default",first,token);}
 |
	n=WhenClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecStatementClause6","-","-","Replacement","Default",first,token);}
 |
	n=WorkingSpaceClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecStatementClause7","-","-","Replacement","Default",first,token);}
 |
	n=DurationClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecStatementClause8","-","-","Replacement","Default",first,token);}
 |
	n=EnsuresClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecStatementClause9","-","-","Replacement","Default",first,token);}
 |
	n=SignalsOnlyClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecStatementClause10","-","-","Replacement","Default",first,token);}
 |
	n=SignalsClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecStatementClause11","-","-","Replacement","Default",first,token);}
 |
	n=MeasuredClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecStatementClause12","-","-","Replacement","Default",first,token);}
 |
	n=ContinuesClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecStatementClause13","-","-","Replacement","Default",first,token);}
 |
	n=BreaksClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecStatementClause14","-","-","Replacement","Default",first,token);}
 |
	n=ReturnsClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecStatementClause15","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AbruptBehaviorKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ABRUPT_BEHAVIOR> {return productionEndTerminal("AbruptBehaviorKeyword1","-","-","Replacement","Default",first,token);}
 |
	<ABRUPT_BEHAVIOUR> {return productionEndTerminal("AbruptBehaviorKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AbruptSpecCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=GenericSpecStatementCase(true){ replaceName(n);} {return productionEndTerminal("AbruptSpecCase","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ContinuesClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ContinuesKeyword(true){ replaceName(n);} [n=TargetLabel(true){ replaceName(n);}] [n=PredOrNot(true){ replaceName(n);}] <SEMICOLON> {return productionEndTerminal("ContinuesClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ContinuesKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<CONTINUES> {return productionEndTerminal("ContinuesKeyword1","-","-","Replacement","Default",first,token);}
 |
	<CONTINUES_REDUNDANTLY> {return productionEndTerminal("ContinuesKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StoreRefKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<NOTHING> {return productionEndTerminal("StoreRefKeyword1","-","-","Replacement","Default",first,token);}
 |
	<EVERYTHING> {return productionEndTerminal("StoreRefKeyword2","-","-","Replacement","Default",first,token);}
 |
	<NOT_SPECIFIED> {return productionEndTerminal("StoreRefKeyword3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Privacy(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<PUBLIC> {return productionEndTerminal("Privacy1","-","-","Replacement","Default",first,token);}
 |
	<PROTECTED> {return productionEndTerminal("Privacy2","-","-","Replacement","Default",first,token);}
 |
	<PRIVATE> {return productionEndTerminal("Privacy3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo GenericSpecCaseSeq(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=GenericSpecCase(true){ replaceName(n);} (n=AlsoGenericSpecCase(true){ replaceName(n);})* {return productionEndTerminal("GenericSpecCaseSeq","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AlsoGenericSpecCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ALSO> n=GenericSpecCase(true){ replaceName(n);} {return productionEndTerminal("AlsoGenericSpecCase","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SpecHeader(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=RequiresClause(true){ replaceName(n);} (n=RequiresClause(true){ replaceName(n);})* {return productionEndTerminal("SpecHeader","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SimpleSpecBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SimpleSpecBodyClause(true){ replaceName(n);} (n=SimpleSpecBodyClause(true){ replaceName(n);})* {return productionEndTerminal("SimpleSpecBody","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SimpleSpecBodyClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=DivergesClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecBodyClause1","-","-","Replacement","Default",first,token);}
 |
	n=AssignableClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecBodyClause2","-","-","Replacement","Default",first,token);}
 |
	n=AccessibleClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecBodyClause3","-","-","Replacement","Default",first,token);}
 |
	n=CapturesClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecBodyClause4","-","-","Replacement","Default",first,token);}
 |
	n=CallableClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecBodyClause5","-","-","Replacement","Default",first,token);}
 |
	n=WhenClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecBodyClause6","-","-","Replacement","Default",first,token);}
 |
	n=WorkingSpaceClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecBodyClause7","-","-","Replacement","Default",first,token);}
 |
	n=DurationClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecBodyClause8","-","-","Replacement","Default",first,token);}
 |
	n=EnsuresClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecBodyClause9","-","-","Replacement","Default",first,token);}
 |
	n=SignalsOnlyClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecBodyClause10","-","-","Replacement","Default",first,token);}
 |
	n=SignalsClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecBodyClause11","-","-","Replacement","Default",first,token);}
 |
	n=MeasuredClause(true){ replaceName(n);} {return productionEndTerminal("SimpleSpecBodyClause12","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TypeSpec(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Type(true){ replaceName(n);} [n=Dims(true){ replaceName(n);}] {return productionEndTerminal("TypeSpec1","-","-","Replacement","Default",first,token);}
 |
	<TYPE> [n=Dims(true){ replaceName(n);}] {return productionEndTerminal("TypeSpec2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Dims(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=BracketPair(true){ replaceName(n);} (n=BracketPair(true){ replaceName(n);})* {return productionEndTerminal("Dims","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo BracketPair(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<LBRACKET> <RBRACKET> {return productionEndTerminal("BracketPair","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TargetLabel(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<RARROW> <LPAREN> n=Id(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("TargetLabel","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ReturnsClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ReturnsKeyword(true){ replaceName(n);} [n=PredOrNot(true){ replaceName(n);}] <SEMICOLON> {return productionEndTerminal("ReturnsClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ReturnsKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<RETURNS> {return productionEndTerminal("ReturnsKeyword1","-","-","Replacement","Default",first,token);}
 |
	<RETURNS_REDUNDANTLY> {return productionEndTerminal("ReturnsKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo BreaksClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=BreaksKeyword(true){ replaceName(n);} [n=TargetLabel(true){ replaceName(n);}] [n=PredOrNot(true){ replaceName(n);}] <SEMICOLON> {return productionEndTerminal("BreaksClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo BreaksKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<BREAKS> {return productionEndTerminal("BreaksKeyword1","-","-","Replacement","Default",first,token);}
 |
	<BREAKS_REDUNDANTLY> {return productionEndTerminal("BreaksKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo BoundVarModifiers(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<NON_NULL> {return productionEndTerminal("BoundVarModifiers1","-","-","Replacement","Default",first,token);}
 |
	<NULLABLE> {return productionEndTerminal("BoundVarModifiers2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Predicate(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SpecExpression(true){ replaceName("SpecExpression", n);}{ replaceName(n);} {return productionEndTerminal("Predicate","{SpecExpression}","{SpecExpression}","Replacement","Default",first,token);}

 )  }

FSTInfo SpecExpressionList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SpecExpression(true){ replaceName(n);} (n=CommaSpecExpression(true){ replaceName(n);})* {return productionEndTerminal("SpecExpressionList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CommaSpecExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<COMMA> n=SpecExpression(true){ replaceName(n);} {return productionEndTerminal("CommaSpecExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SpecExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Expression(true){ replaceName(n);} {return productionEndTerminal("SpecExpression","{TOSTRING}","{TOSTRING}","Replacement","Default",first,token);}

 )  }

FSTInfo AssumeStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AssumeKeyword(true){ replaceName(n);} n=Predicate(true){ replaceName(n);} [n=ColonExpression(true){ replaceName(n);}] <SEMICOLON> {return productionEndTerminal("AssumeStatement","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AssumeKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ASSUME> {return productionEndTerminal("AssumeKeyword1","-","-","Replacement","Default",first,token);}
 |
	<ASSUME_REDUNDANTLY> {return productionEndTerminal("AssumeKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo InvariantKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<INVARIANT> {return productionEndTerminal("InvariantKeyword1","-","-","Replacement","Default",first,token);}
 |
	<INVARIANT_REDUNDANTLY> {return productionEndTerminal("InvariantKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ColonExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<COLON> n=Expression(true){ replaceName(n);} {return productionEndTerminal("ColonExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SpecVariableDeclarators(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SpecVariableDeclarator(true){ replaceName(n);} (n=CommaSpecVariableDeclarator(true){ replaceName(n);})* {return productionEndTerminal("SpecVariableDeclarators","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CommaSpecVariableDeclarator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<COMMA> n=SpecVariableDeclarator(true){ replaceName(n);} {return productionEndTerminal("CommaSpecVariableDeclarator","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SpecVariableDeclarator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} [n=Dims(true){ replaceName(n);}] [n=AssignSpecInitializer(true){ replaceName(n);}] {return productionEndTerminal("SpecVariableDeclarator","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AssignSpecInitializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ASSIGN> n=SpecInitializer(true){ replaceName(n);} {return productionEndTerminal("AssignSpecInitializer","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SpecInitializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SpecExpression(true){ replaceName(n);} {return productionEndTerminal("SpecInitializer1","-","-","Replacement","Default",first,token);}
 |
	n=SpecArrayInitializer(true){ replaceName(n);} {return productionEndTerminal("SpecInitializer2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SpecArrayInitializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<LBRACE> [n=SpecInitializerCommaSpecInitializer(true){ replaceName(n);}] <RBRACE> {return productionEndTerminal("SpecArrayInitializer","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SpecInitializerCommaSpecInitializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SpecInitializer(true){ replaceName(n);} (n=CommaSpecInitializer(true){ replaceName(n);})* [<COMMA>] {return productionEndTerminal("SpecInitializerCommaSpecInitializer","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CommaSpecInitializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<COMMA> n=SpecInitializer(true){ replaceName(n);} {return productionEndTerminal("CommaSpecInitializer","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MethodNameList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MethodName(true){ replaceName(n);} (n=CommaMethodName(true){ replaceName(n);})* {return productionEndTerminal("MethodNameList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CommaMethodName(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<COMMA> n=MethodName(true){ replaceName(n);} {return productionEndTerminal("CommaMethodName","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MethodName(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MethodRef(true){ replaceName(n);} [n=LParenParamDisambigListRParen(true){ replaceName(n);}] {return productionEndTerminal("MethodName1","-","-","Replacement","Default",first,token);}
 |
	n=MethodRefStart(true){ replaceName(n);} <DOT> <STAR> {return productionEndTerminal("MethodName2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StoreRefList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=StoreRefKeyword(true){ replaceName(n);} {return productionEndTerminal("StoreRefList1","-","-","Replacement","Default",first,token);}
 |
	n=StoreRef(true){ replaceName(n);} (n=CommaStoreRef(true){ replaceName(n);})* {return productionEndTerminal("StoreRefList2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CommaStoreRef(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<COMMA> n=StoreRef(true){ replaceName(n);} {return productionEndTerminal("CommaStoreRef","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StoreRef(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=StoreRefExpression(true){ replaceName(n);} {return productionEndTerminal("StoreRef1","-","-","Replacement","Default",first,token);}
 |
	n=InformalDescription(true){ replaceName(n);} {return productionEndTerminal("StoreRef2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StoreRefExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=StoreRefName(true){ replaceName(n);} (n=StoreRefNameSuffix(true){ replaceName(n);})* {return productionEndTerminal("StoreRefExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StoreRefName(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} {return productionEndTerminal("StoreRefName1","-","-","Replacement","Default",first,token);}
 |
	<SUPER> {return productionEndTerminal("StoreRefName2","-","-","Replacement","Default",first,token);}
 |
	<THIS> {return productionEndTerminal("StoreRefName3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StoreRefNameSuffix(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<DOT> n=Id(true){ replaceName(n);} {return productionEndTerminal("StoreRefNameSuffix1","-","-","Replacement","Default",first,token);}
 |
	<DOT> <THIS> {return productionEndTerminal("StoreRefNameSuffix2","-","-","Replacement","Default",first,token);}
 |
	<LBRACKET> n=SpecArrayRefExpr(true){ replaceName(n);} <RBRACKET> {return productionEndTerminal("StoreRefNameSuffix3","-","-","Replacement","Default",first,token);}
 |
	<DOT> <STAR> {return productionEndTerminal("StoreRefNameSuffix4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo QuantifiedVarDeclarator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} [n=Dims(true){ replaceName(n);}] {return productionEndTerminal("QuantifiedVarDeclarator","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MethodRef(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MethodRefStart(true){ replaceName(n);} (n=DotMethodRefRest(true){ replaceName(n);})* {return productionEndTerminal("MethodRef1","-","-","Replacement","Default",first,token);}
 |
	<NEW> n=ReferenceTypeP(true){ replaceName(n);} {return productionEndTerminal("MethodRef2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DotMethodRefRest(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<DOT> n=MethodRefRest(true){ replaceName(n);} {return productionEndTerminal("DotMethodRefRest","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MethodRefStart(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<SUPER> {return productionEndTerminal("MethodRefStart1","-","-","Replacement","Default",first,token);}
 |
	<THIS> {return productionEndTerminal("MethodRefStart2","-","-","Replacement","Default",first,token);}
 |
	n=Id(true){ replaceName(n);} {return productionEndTerminal("MethodRefStart3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MethodRefRest(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<THIS> {return productionEndTerminal("MethodRefRest1","-","-","Replacement","Default",first,token);}
 |
	n=Id(true){ replaceName(n);} {return productionEndTerminal("MethodRefRest2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo LParenParamDisambigListRParen(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<LPAREN> [n=ParamDisambigList(true){ replaceName(n);}] <RPAREN> {return productionEndTerminal("LParenParamDisambigListRParen","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ParamDisambigList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ParamDisambig(true){ replaceName(n);} (n=CommaParamDisambig(true){ replaceName(n);})* {return productionEndTerminal("ParamDisambigList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CommaParamDisambig(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<COMMA> n=ParamDisambig(true){ replaceName(n);} {return productionEndTerminal("CommaParamDisambig","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ParamDisambig(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=TypeSpec(true){ replaceName(n);} [n=IdOptDims(true){ replaceName(n);}] {return productionEndTerminal("ParamDisambig","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo IdOptDims(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} [n=OptDims(true){ replaceName(n);}] {return productionEndTerminal("IdOptDims","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptDims(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Dims(true){ replaceName(n);} {return productionEndTerminal("OptDims","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo HistoryConstraint(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ConstraintKeyword(true){ replaceName(n);} n=Predicate(true){ replaceName(n);} [n=ForConstrainedList(true){ replaceName(n);}] <SEMICOLON> {return productionEndTerminal("HistoryConstraint","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ForConstrainedList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<FOR> n=ConstrainedList(true){ replaceName(n);} {return productionEndTerminal("ForConstrainedList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ConstraintKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<CONSTRAINT> {return productionEndTerminal("ConstraintKeyword1","-","-","Replacement","Default",first,token);}
 |
	<CONSTRAINT_REDUNDANTLY> {return productionEndTerminal("ConstraintKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ConstrainedList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MethodNameList(true){ replaceName(n);} {return productionEndTerminal("ConstrainedList1","-","-","Replacement","Default",first,token);}
 |
	<EVERYTHING> {return productionEndTerminal("ConstrainedList2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RepresentsClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=RepresentsKeyword(true){ replaceName(n);} n=StoreRefExpression(true){ replaceName(n);} <LARROW> n=SpecExpression(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("RepresentsClause1","-","-","Replacement","Default",first,token);}
 |
	n=RepresentsKeyword(true){ replaceName(n);} n=StoreRefExpression(true){ replaceName(n);} <ASSIGN> n=SpecExpression(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("RepresentsClause2","-","-","Replacement","Default",first,token);}
 |
	n=RepresentsKeyword(true){ replaceName(n);} n=StoreRefExpression(true){ replaceName(n);} <SUCH_THAT> n=Predicate(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("RepresentsClause3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RepresentsKeyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<REPRESENTS> {return productionEndTerminal("RepresentsKeyword1","-","-","Replacement","Default",first,token);}
 |
	<REPRESENTS_REDUNDANTLY> {return productionEndTerminal("RepresentsKeyword2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo InitiallyClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<INITIALLY> n=Predicate(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("InitiallyClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AxiomClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<AXIOM> n=Predicate(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("AxiomClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ReadableIfClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<READABLE> n=Id(true){ replaceName(n);} <IF> n=Predicate(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("ReadableIfClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo WritableIfClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<WRITABLE> n=Id(true){ replaceName(n);} <IF> n=Predicate(true){ replaceName(n);} <SEMICOLON> {return productionEndTerminal("WritableIfClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MonitorsForClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<MONITORS_FOR> n=Id(true){ replaceName(n);} {return productionEndTerminal("MonitorsForClause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo JmlPrimary(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(OriginalClauseKeyword()) n=OriginalClauseKeyword(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(ResultExpression()) n=ResultExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary2","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(OldExpression()) n=OldExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary3","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(NotAssignedExpression()) n=NotAssignedExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary4","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(NotModifiedExpression()) n=NotModifiedExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary5","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(OnlyAccessedExpression()) n=OnlyAccessedExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary6","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(OnlyAssignedExpression()) n=OnlyAssignedExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary7","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(OnlyCalledExpression()) n=OnlyCalledExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary8","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(OnlyCapturedExpression()) n=OnlyCapturedExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary9","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(FreshExpression()) n=FreshExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary10","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(ReachExpression()) n=ReachExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary11","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(DurationExpression()) n=DurationExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary12","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(SpaceExpression()) n=SpaceExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary13","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(WorkingSpaceExpression()) n=WorkingSpaceExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary14","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(NonnullelementsExpression()) n=NonnullelementsExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary15","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(InformalDescription()) n=InformalDescription(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary16","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(TypeofExpression()) n=TypeofExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary17","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(ElemtypeExpression()) n=ElemtypeExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary18","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(TypeExpression()) n=TypeExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary19","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(LocksetExpression()) n=LocksetExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary20","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(MaxExpression()) n=MaxExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary21","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(IsInitializedExpression()) n=IsInitializedExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary22","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(InvariantForExpression()) n=InvariantForExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary23","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(LblnegExpression()) n=LblnegExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary24","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(LblposExpression()) n=LblposExpression(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary25","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(SpecQuantifiedExpr()) n=SpecQuantifiedExpr(true){ replaceName(n);} {return productionEndTerminal("JmlPrimary26","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ResultExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<RESULT> {return productionEndTerminal("ResultExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OldExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<OLD> <LPAREN> n=SpecExpression(true){ replaceName(n);} [n=CommaIdent(true){ replaceName(n);}] <RPAREN> {return productionEndTerminal("OldExpression1","-","-","Replacement","Default",first,token);}
 |
	<PRE> <LPAREN> n=SpecExpression(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("OldExpression2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CommaIdent(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<COMMA> <IDENTIFIER> {return productionEndTerminal("CommaIdent","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NotAssignedExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<NOT_ASSIGNED> <LPAREN> n=StoreRefList(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("NotAssignedExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NotModifiedExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<NOT_MODIFIED> <LPAREN> n=StoreRefList(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("NotModifiedExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OnlyAccessedExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ONLY_ACCESSED> <LPAREN> n=StoreRefList(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("OnlyAccessedExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OnlyAssignedExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ONLY_ASSIGNED> <LPAREN> n=StoreRefList(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("OnlyAssignedExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OnlyCalledExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ONLY_CALLED> <LPAREN> n=MethodNameList(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("OnlyCalledExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OnlyCapturedExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ONLY_CAPTURED> <LPAREN> n=StoreRefList(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("OnlyCapturedExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo FreshExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<FRESH> <LPAREN> n=SpecExpressionList(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("FreshExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ReachExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<REACH> <LPAREN> n=SpecExpression(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("ReachExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DurationExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<DURATION> <LPAREN> n=Expression(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("DurationExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SpaceExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<SPACE> <LPAREN> n=SpecExpression(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("SpaceExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo WorkingSpaceExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<WORKING_SPACE> <LPAREN> n=Expression(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("WorkingSpaceExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NonnullelementsExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<NONNULLELEMENTS> <LPAREN> n=SpecExpression(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("NonnullelementsExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TypeofExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<TYPEOF> <LPAREN> n=SpecExpression(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("TypeofExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ElemtypeExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<ELEMTYPE> <LPAREN> n=SpecExpression(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("ElemtypeExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TypeExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<TYPE> <LPAREN> n=Type(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("TypeExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo LocksetExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<LOCKSET> {return productionEndTerminal("LocksetExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo MaxExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<MAX> <LPAREN> n=SpecExpression(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("MaxExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo IsInitializedExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IS_INITIALIZED> <LPAREN> n=ReferenceType(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("IsInitializedExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo InvariantForExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<INVARIANT_FOR> <LPAREN> n=SpecExpression(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("InvariantForExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo LblnegExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<LPAREN> <LBLNEG> n=Id(true){ replaceName(n);} n=SpecExpression(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("LblnegExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo LblposExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<LPAREN> <LBLPOS> n=Id(true){ replaceName(n);} n=SpecExpression(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("LblposExpression","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SpecQuantifiedExpr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<LPAREN> n=Quantifier(true){ replaceName(n);} n=QuantifiedVarDecls(true){ replaceName(n);} <SEMICOLON> [n=PredicateSemicolon(true){ replaceName(n);}] n=SpecExpression(true){ replaceName(n);} <RPAREN> {return productionEndTerminal("SpecQuantifiedExpr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo PredicateSemicolon(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=Predicate(true){ replaceName(n);}] <SEMICOLON> {return productionEndTerminal("PredicateSemicolon","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Quantifier(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<FORALL> {return productionEndTerminal("Quantifier1","-","-","Replacement","Default",first,token);}
 |
	<EXISTS> {return productionEndTerminal("Quantifier2","-","-","Replacement","Default",first,token);}
 |
	<MAX> {return productionEndTerminal("Quantifier3","-","-","Replacement","Default",first,token);}
 |
	<MIN> {return productionEndTerminal("Quantifier4","-","-","Replacement","Default",first,token);}
 |
	<NUM_OF> {return productionEndTerminal("Quantifier5","-","-","Replacement","Default",first,token);}
 |
	<PRODUCT> {return productionEndTerminal("Quantifier6","-","-","Replacement","Default",first,token);}
 |
	<SUM> {return productionEndTerminal("Quantifier7","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo QuantifiedVarDecls(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=BoundVarModifiers(true){ replaceName(n);}] n=TypeSpec(true){ replaceName(n);} n=QuantifiedVarDeclarator(true){ replaceName(n);} (n=CommaQuantifiedVarDeclarator(true){ replaceName(n);})* {return productionEndTerminal("QuantifiedVarDecls","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CommaQuantifiedVarDeclarator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<COMMA> n=QuantifiedVarDeclarator(true){ replaceName(n);} {return productionEndTerminal("CommaQuantifiedVarDeclarator","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ReferenceType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Name(true){ replaceName(n);} {return productionEndTerminal("ReferenceType","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo InformalDescription(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<INF_DESC_START> n=NonStarsClose(true){ replaceName(n);} (n=NonStarsClose(true){ replaceName(n);})* <INF_DESC_END> {return productionEndTerminal("InformalDescription","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo NonStarsClose(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<CHARACTER_LITERAL> {return productionEndTerminal("NonStarsClose1","-","-","Replacement","Default",first,token);}
 |
	n=StarsNonClose(true){ replaceName(n);} {return productionEndTerminal("NonStarsClose2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StarsNonClose(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<STAR> (<STAR>)* <CHARACTER_LITERAL> {return productionEndTerminal("StarsNonClose","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Keyword(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> {return productionEndTerminal("Keyword","-","-","Replacement","Default",first,token);}

 )  }


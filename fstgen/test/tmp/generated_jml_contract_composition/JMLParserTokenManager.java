/* Generated By:JavaCC: Do not edit this line. JMLParserTokenManager.java */
package tmp.generated_jml_contract_composition;
import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;
import cide.gparser.*;
public class JMLParserTokenManager implements JMLParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2840L) != 0L || (active4 & 0x8040L) != 0L)
            return 2;
         if ((active0 & 0x1fffff83fffe0000L) != 0L || (active1 & 0x38L) != 0L)
         {
            jjmatchedKind = 232;
            return 40;
         }
         if ((active3 & 0x8000000000000L) != 0L || (active4 & 0x800000L) != 0L)
            return 8;
         if ((active0 & 0x7c00000000L) != 0L)
         {
            jjmatchedKind = 232;
            return 37;
         }
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x7L) != 0L)
         {
            jjmatchedKind = 232;
            return 33;
         }
         return -1;
      case 1:
         if ((active0 & 0x2040L) != 0L)
            return 0;
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 1;
            }
            return 36;
         }
         if ((active0 & 0xfffffefb9ffe0000L) != 0L || (active1 & 0x38L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 1;
            }
            return 40;
         }
         if ((active1 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 1;
            }
            return 32;
         }
         if ((active0 & 0x10060000000L) != 0L)
            return 40;
         return -1;
      case 2:
         if ((active0 & 0xfffecebbdffe0000L) != 0L || (active1 & 0x39L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 2;
            }
            return 40;
         }
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 2;
            }
            return 35;
         }
         if ((active1 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 2;
            }
            return 60;
         }
         if ((active0 & 0x1304000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 40;
         return -1;
      case 3:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 3;
            return 60;
         }
         if ((active0 & 0xdffcae3a5e9e0000L) != 0L || (active1 & 0x31L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 3;
            return 40;
         }
         if ((active0 & 0x2002408181600000L) != 0L || (active1 & 0xaL) != 0L)
            return 40;
         return -1;
      case 4:
         if ((active0 & 0x1b7cae02580e0000L) != 0L || (active1 & 0x11L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 4;
            }
            return 40;
         }
         if ((active0 & 0xc480003c06900000L) != 0L || (active1 & 0x20L) != 0L)
            return 40;
         return -1;
      case 5:
         if ((active0 & 0x8960840040040000L) != 0L)
            return 40;
         if ((active0 & 0x121c2a12180a0000L) != 0L || (active1 & 0x11L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 5;
            return 40;
         }
         return -1;
      case 6:
         if ((active0 & 0x12102a0008020000L) != 0L || (active1 & 0x11L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 6;
            return 40;
         }
         if ((active0 & 0xc001210080000L) != 0L)
            return 40;
         return -1;
      case 7:
         if ((active0 & 0x10102a0000000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 7;
            return 40;
         }
         if ((active0 & 0x200000008020000L) != 0L || (active1 & 0x10L) != 0L)
            return 40;
         return -1;
      case 8:
         if ((active0 & 0x10000a0000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 8;
            return 40;
         }
         if ((active0 & 0x10200000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 40;
         return -1;
      case 9:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 9;
            return 40;
         }
         if ((active0 & 0xa0000000000L) != 0L)
            return 40;
         return -1;
      case 10:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 10;
            return 40;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         jjmatchedKind = 247;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 266;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x80000L);
      case 38:
         jjmatchedKind = 263;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x10001L);
      case 40:
         jjmatchedKind = 235;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x800000000L);
      case 41:
         return jjStopAtPos(0, 236);
      case 42:
         jjmatchedKind = 261;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1000004000L);
      case 43:
         jjmatchedKind = 259;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1002L);
      case 44:
         return jjStopAtPos(0, 242);
      case 45:
         jjmatchedKind = 260;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x4002004L);
      case 46:
         jjmatchedKind = 243;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x800000L);
      case 47:
         jjmatchedKind = 262;
         return jjMoveStringLiteralDfa1_0(0x2840L, 0x0L, 0x0L, 0x8000L);
      case 58:
         return jjStopAtPos(0, 250);
      case 59:
         return jjStopAtPos(0, 241);
      case 60:
         jjmatchedKind = 246;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000000000000L, 0xf1100800L);
      case 61:
         jjmatchedKind = 245;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000000000L, 0x8000000L);
      case 62:
         jjmatchedKind = 290;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000000000000L, 0x300600000L);
      case 63:
         return jjStopAtPos(0, 249);
      case 64:
         return jjStopAtPos(0, 244);
      case 91:
         return jjStopAtPos(0, 239);
      case 92:
         return jjStopAtPos(0, 281);
      case 93:
         return jjStopAtPos(0, 240);
      case 94:
         jjmatchedKind = 265;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x40000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x60000L, 0x0L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x380000L, 0x0L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfc00000L, 0x0L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x70000000L, 0x0L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x380000000L, 0x0L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7c00000000L, 0x0L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3f0000000000L, 0x0L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x3800000000000L, 0x0L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3c000000000000L, 0x0L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1f80000000000000L, 0x0L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x7L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 237);
      case 124:
         jjmatchedKind = 264;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000000000L, 0x20000L);
      case 125:
         return jjStopAtPos(0, 238);
      case 126:
         return jjStopAtPos(0, 248);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, 0L, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active4 & 0x1L) != 0L)
            return jjStopAtPos(1, 256);
         break;
      case 41:
         if ((active4 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 292);
         break;
      case 42:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 291);
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L, active3, 0L, active4, 0L);
      case 43:
         if ((active4 & 0x2L) != 0L)
            return jjStopAtPos(1, 257);
         break;
      case 45:
         if ((active4 & 0x4L) != 0L)
            return jjStopAtPos(1, 258);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 280);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x800000L);
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      case 58:
         if ((active4 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 287);
         break;
      case 60:
         if ((active4 & 0x800L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x100000L);
      case 61:
         if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 253);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 254);
         else if ((active4 & 0x1000L) != 0L)
            return jjStopAtPos(1, 268);
         else if ((active4 & 0x2000L) != 0L)
            return jjStopAtPos(1, 269);
         else if ((active4 & 0x4000L) != 0L)
            return jjStopAtPos(1, 270);
         else if ((active4 & 0x8000L) != 0L)
            return jjStopAtPos(1, 271);
         else if ((active4 & 0x10000L) != 0L)
            return jjStopAtPos(1, 272);
         else if ((active4 & 0x20000L) != 0L)
            return jjStopAtPos(1, 273);
         else if ((active4 & 0x40000L) != 0L)
            return jjStopAtPos(1, 274);
         else if ((active4 & 0x80000L) != 0L)
            return jjStopAtPos(1, 275);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x78000000L);
      case 62:
         if ((active4 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 282);
         else if ((active4 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 289;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x100600000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800400c00000L, active1, 0L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x41000010000000L, active1, 0L, active3, 0L, active4, 0L);
      case 102:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 40);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xe080000001000000L, active1, 0x20L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000L, active1, 0L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2082000000L, active1, 0L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x380100000000L, active1, 0L, active3, 0L, active4, 0L);
      case 111:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40c04c080000L, active1, 0x18L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000100000L, active1, 0x7L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L, active3, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x422000000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000200000L, active1, 0L, active3, 0L, active4, 0L);
      case 124:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 255);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, 0L, active3, active4);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(0, old0, old1, 0L, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L, 0L, active4);
      return 2;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active4, 0x40000000L);
      case 46:
         if ((active4 & 0x800000L) != 0L)
            return jjStopAtPos(2, 279);
         break;
      case 61:
         if ((active4 & 0x100000L) != 0L)
            return jjStopAtPos(2, 276);
         else if ((active4 & 0x200000L) != 0L)
            return jjStopAtPos(2, 277);
         else if ((active4 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active4, 0x20000000L);
      case 62:
         if ((active4 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 283);
         else if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 288;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active4, 0x400000L);
      case 64:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(2, 6);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000003000000L, active1, 0x1L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2808000000000000L, active1, 0x28L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000400000000L, active1, 0x10L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100040180c000000L, active1, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x90002000080000L, active1, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400060000000000L, active1, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0xc200000000000000L, active1, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80080460000L, active1, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40a08200a00000L, active1, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000000L, active1, 0x2L, active4, 0L);
      case 119:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 40);
         break;
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L, 0L, active4);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active4 & 0x400000L) != 0L)
            return jjStopAtPos(3, 278);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active4, 0x40000000L);
      case 62:
         if ((active4 & 0x20000000L) != 0L)
            return jjStopAtPos(3, 285);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x3810100000L, active1, 0x10L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000800000L, active1, 0L, active4, 0L);
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 40);
         break;
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 40);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 40);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 40);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x400200200040000L, active1, 0L, active4, 0L);
      case 103:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200800000000000L, active1, 0L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L, active4, 0L);
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x20020000080000L, active1, 0x20L, active4, 0L);
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 40);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L, active4, 0L);
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0xc000040000000000L, active1, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L, active4, 0L);
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x406000000L, active1, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x910080008020000L, active1, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L, 0L, active4);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active4 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 286);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xc080000000000L, active1, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0xa00000000000000L, active1, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 40);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x10020000080000L, active1, 0L, active4, 0L);
      case 104:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x120000008000000L, active1, 0L, active4, 0L);
      case 107:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 40);
         break;
      case 108:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1040000000L, active1, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x40240000060000L, active1, 0L, active4, 0L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L, active4, 0L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 40);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 40);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L, active4, 0L);
      case 119:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L, 0L, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xa0000L, active1, 0L);
      case 99:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 40);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 40);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 40);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x11L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1010000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x80008000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 40);
         break;
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 40);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x208000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L, 0L, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000020000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 40);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0x1L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 40);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 40);
         break;
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 40);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0x10080000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000020000000000L, active1, 0x1L);
      case 112:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 40);
         break;
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 52, 40);
         break;
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 64, 40);
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 40);
         break;
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 41, 40);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 60, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 60;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 40:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 37:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 33:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 36)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(40);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(8);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 223)
                        kind = 223;
                     jjCheckNAddTwoStates(5, 6);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 223)
                        kind = 223;
                     jjCheckNAddStates(12, 14);
                  }
                  break;
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 60:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddStates(15, 17);
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 14:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if (curChar == 39 && kind > 229)
                     kind = 229;
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 15);
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 20:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 22:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 23:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 25:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 26:
                  if (curChar == 34 && kind > 230)
                     kind = 230;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 39:
                  if (curChar != 36)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar != 46)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddStates(22, 24);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddStates(22, 24);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddTwoStates(47, 12);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddTwoStates(51, 12);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 12);
                  break;
               case 56:
                  if (curChar != 48)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddStates(12, 14);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddTwoStates(58, 6);
                  break;
               case 59:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddTwoStates(59, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(31);
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(31);
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 231)
                        kind = 231;
                  }
                  break;
               case 1:
                  if (kind > 12)
                     kind = 12;
                  break;
               case 6:
                  if ((0x100000001000L & l) != 0L && kind > 223)
                     kind = 223;
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 12:
                  if ((0x5000000050L & l) != 0L && kind > 227)
                     kind = 227;
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(30, 32);
                  break;
               case 17:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 24:
                  if (curChar == 92)
                     jjAddStates(33, 35);
                  break;
               case 25:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 31:
                  if (curChar == 101 && kind > 231)
                     kind = 231;
                  break;
               case 34:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 38:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 57:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddTwoStates(58, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 40:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 37:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 36:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 33:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 60:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(40);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 12)
                     kind = 12;
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 60 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_5(0x8000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2L) != 0L)
            return 0;
         if ((active0 & 0x1fffff83fffe0000L) != 0L || (active1 & 0x9fffffdbfff7fc38L) != 0L || (active2 & 0xffff80010800ffffL) != 0L || (active3 & 0x77ffffffL) != 0L)
         {
            jjmatchedKind = 232;
            return 39;
         }
         if ((active0 & 0x7c00000000L) != 0L || (active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 232;
            return 36;
         }
         if ((active3 & 0x8000000000000L) != 0L || (active4 & 0x800000L) != 0L)
            return 7;
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x7L) != 0L)
         {
            jjmatchedKind = 232;
            return 32;
         }
         return -1;
      case 1:
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 1;
            }
            return 35;
         }
         if ((active0 & 0xffffc6fb9ffe0000L) != 0L || (active1 & 0x99ffffc3fff6fc38L) != 0L || (active2 & 0xffff80010800ffbdL) != 0L || (active3 & 0x7fffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 1;
            }
            return 39;
         }
         if ((active1 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 1;
            }
            return 31;
         }
         if ((active0 & 0x390060000000L) != 0L || (active1 & 0x600001800010000L) != 0L || (active2 & 0x42L) != 0L)
            return 39;
         return -1;
      case 2:
         if ((active0 & 0xfffecebbdffe0000L) != 0L || (active1 & 0x9ff7ffd3fff7fc39L) != 0L || (active2 & 0xffff80010800ffbfL) != 0L || (active3 & 0x77ffffffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 2;
            }
            return 39;
         }
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 2;
            }
            return 34;
         }
         if ((active1 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 2;
            }
            return 59;
         }
         if ((active0 & 0x1304000000000L) != 0L || (active1 & 0x8000000000004L) != 0L || (active3 & 0x8000000L) != 0L)
            return 39;
         return -1;
      case 3:
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 3;
            }
            return 59;
         }
         if ((active0 & 0xdffcae3a5e9e0000L) != 0L || (active1 & 0x9ff7ff1396377c31L) != 0L || (active2 & 0xebdf80010800ffbfL) != 0L || (active3 & 0x7fdfff9fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 3;
            }
            return 39;
         }
         if ((active0 & 0x2002408181600000L) != 0L || (active1 & 0xc069c0800aL) != 0L || (active2 & 0x1420000000000000L) != 0L || (active3 & 0x200060L) != 0L)
            return 39;
         return -1;
      case 4:
         if ((active0 & 0x1b7cae02580e0000L) != 0L || (active1 & 0x87b7ff91fef72c11L) != 0L || (active2 & 0xfbdf80010000cfbfL) != 0L || (active3 & 0x3f5fffdfL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 4;
            }
            return 39;
         }
         if ((active0 & 0xc480003c06900000L) != 0L || (active1 & 0x1840000200005020L) != 0L || (active2 & 0x8003000L) != 0L || (active3 & 0x40800000L) != 0L)
            return 39;
         return -1;
      case 5:
         if ((active0 & 0x8960840040040000L) != 0L || (active1 & 0x6010100020000L) != 0L || (active2 & 0xf0a0L) != 0L || (active3 & 0x400000L) != 0L)
            return 39;
         if ((active0 & 0x121c2a12180a0000L) != 0L || (active1 & 0x9fb1fe92fef52c11L) != 0L || (active2 & 0xfbdf800100000f1fL) != 0L || (active3 & 0x7f1fffdfL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 5;
            }
            return 39;
         }
         return -1;
      case 6:
         if ((active0 & 0x12102a0008020000L) != 0L || (active1 & 0x9e35ff927ef52c11L) != 0L || (active2 & 0x11df800000002f9fL) != 0L || (active3 & 0x7f5fffd8L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 6;
            }
            return 39;
         }
         if ((active0 & 0xc001210080000L) != 0L || (active1 & 0x180000080000000L) != 0L || (active2 & 0xea0000010000c000L) != 0L || (active3 & 0x7L) != 0L)
            return 39;
         return -1;
      case 7:
         if ((active0 & 0x1010220000000000L) != 0L || (active1 & 0x9f25ff920ef42001L) != 0L || (active2 & 0x591f00000000a393L) != 0L || (active3 & 0x7f4667c7L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 7;
            }
            return 39;
         }
         if ((active0 & 0x200080008020000L) != 0L || (active1 & 0x10000070010c10L) != 0L || (active2 & 0xc0800000000c0cL) != 0L || (active3 & 0x199818L) != 0L)
            return 39;
         return -1;
      case 8:
         if ((active0 & 0x10000a0000000000L) != 0L || (active1 & 0x99247f924ef42800L) != 0L || (active2 & 0x599e00000000a311L) != 0L || (active3 & 0x7f5777d7L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 8;
            }
            return 39;
         }
         if ((active0 & 0x10200000000000L) != 0L || (active1 & 0x601800000000001L) != 0L || (active2 & 0x1000000000c82L) != 0L)
            return 39;
         return -1;
      case 9:
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x5251f924ef42800L) != 0L || (active2 & 0x599e00000000ab10L) != 0L || (active3 & 0x7c577057L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 9;
            }
            return 39;
         }
         if ((active0 & 0xa0000000000L) != 0L || (active1 & 0x9800600000000000L) != 0L || (active2 & 0x1L) != 0L || (active3 & 0x3000780L) != 0L)
            return 39;
         return -1;
      case 10:
         if ((active1 & 0x20060202000000L) != 0L || (active3 & 0x8006000L) != 0L)
            return 39;
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x150559904cf42800L) != 0L || (active2 & 0x599e00000000ab11L) != 0L || (active3 & 0x76571557L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 10;
            }
            return 39;
         }
         return -1;
      case 11:
         if ((active1 & 0x15055d904cf42800L) != 0L || (active2 & 0x599e00000000ab01L) != 0L || (active3 & 0x72575551L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 11;
            }
            return 39;
         }
         if ((active0 & 0x1000000000000000L) != 0L || (active2 & 0x10L) != 0L || (active3 & 0x4000006L) != 0L)
            return 39;
         return -1;
      case 12:
         if ((active1 & 0x15055d904cf02800L) != 0L || (active2 & 0x599e00000000ab01L) != 0L || (active3 & 0x32575555L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 12;
            return 39;
         }
         if ((active1 & 0x40000L) != 0L || (active3 & 0x40000000L) != 0L)
            return 39;
         return -1;
      case 13:
         if ((active1 & 0x181000f02000L) != 0L || (active3 & 0x20000000L) != 0L)
            return 39;
         if ((active1 & 0x150545804c000800L) != 0L || (active2 & 0x599e00000000ab01L) != 0L || (active3 & 0x12575555L) != 0L)
         {
            if (jjmatchedPos != 13)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 13;
            }
            return 39;
         }
         return -1;
      case 14:
         if ((active1 & 0x150555804c000800L) != 0L || (active2 & 0x589c00000000aa01L) != 0L || (active3 & 0x12575555L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 14;
            return 39;
         }
         if ((active2 & 0x102000000000100L) != 0L)
            return 39;
         return -1;
      case 15:
         if ((active1 & 0x1505550040000800L) != 0L || (active2 & 0x489800000000a801L) != 0L || (active3 & 0x12575515L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 15;
            return 39;
         }
         if ((active1 & 0x800c000000L) != 0L || (active2 & 0x1004000000000200L) != 0L || (active3 & 0x40L) != 0L)
            return 39;
         return -1;
      case 16:
         if ((active1 & 0x1505550040000800L) != 0L || (active2 & 0x489800000000a801L) != 0L || (active3 & 0x12575515L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 16;
            return 39;
         }
         return -1;
      case 17:
         if ((active1 & 0x1501540040000800L) != 0L || (active2 & 0x4898000000008801L) != 0L || (active3 & 0x12175515L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 17;
            return 39;
         }
         if ((active1 & 0x4010000000000L) != 0L || (active2 & 0x2000L) != 0L || (active3 & 0x400000L) != 0L)
            return 39;
         return -1;
      case 18:
         if ((active1 & 0x1401540000000800L) != 0L || (active2 & 0x98000000000801L) != 0L || (active3 & 0x2175514L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 18;
            return 39;
         }
         if ((active1 & 0x100000040000000L) != 0L || (active2 & 0x4800000000008000L) != 0L || (active3 & 0x10000001L) != 0L)
            return 39;
         return -1;
      case 19:
         if ((active1 & 0x1401540000000000L) != 0L || (active2 & 0x10000000000801L) != 0L || (active3 & 0x2024504L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 19;
            return 39;
         }
         if ((active1 & 0x800L) != 0L || (active2 & 0x88000000000000L) != 0L || (active3 & 0x151010L) != 0L)
            return 39;
         return -1;
      case 20:
         if ((active1 & 0x1000540000000000L) != 0L || (active2 & 0x1L) != 0L || (active3 & 0x2024504L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 20;
            return 39;
         }
         if ((active1 & 0x401000000000000L) != 0L || (active2 & 0x10000000000800L) != 0L)
            return 39;
         return -1;
      case 21:
         if ((active1 & 0x140000000000L) != 0L || (active3 & 0x24004L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 21;
            return 39;
         }
         if ((active1 & 0x1000400000000000L) != 0L || (active2 & 0x1L) != 0L || (active3 & 0x2000500L) != 0L)
            return 39;
         return -1;
      case 22:
         if ((active1 & 0x40000000000L) != 0L || (active3 & 0x4000L) != 0L)
            return 39;
         if ((active1 & 0x100000000000L) != 0L || (active3 & 0x20004L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 22;
            return 39;
         }
         return -1;
      case 23:
         if ((active1 & 0x100000000000L) != 0L || (active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 23;
            return 39;
         }
         if ((active3 & 0x4L) != 0L)
            return 39;
         return -1;
      case 24:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 24;
            return 39;
         }
         if ((active3 & 0x20000L) != 0L)
            return 39;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStartNfaWithStates_2(0, 1, 0);
      case 33:
         jjmatchedKind = 247;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x4000000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 266;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x80000L);
      case 38:
         jjmatchedKind = 263;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x10001L);
      case 40:
         jjmatchedKind = 235;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x800000000L);
      case 41:
         return jjStopAtPos(0, 236);
      case 42:
         jjmatchedKind = 261;
         return jjMoveStringLiteralDfa1_2(0x100L, 0x0L, 0x0L, 0x0L, 0x1000004000L);
      case 43:
         jjmatchedKind = 259;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x1002L);
      case 44:
         return jjStopAtPos(0, 242);
      case 45:
         jjmatchedKind = 260;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x4002004L);
      case 46:
         jjmatchedKind = 243;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x800000L);
      case 47:
         jjmatchedKind = 262;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x8000L);
      case 58:
         return jjStopAtPos(0, 250);
      case 59:
         return jjStopAtPos(0, 241);
      case 60:
         jjmatchedKind = 246;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x1000000000000000L, 0xf1100800L);
      case 61:
         jjmatchedKind = 245;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x800000000000000L, 0x8000000L);
      case 62:
         jjmatchedKind = 290;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x2000000000000000L, 0x300600000L);
      case 63:
         return jjStopAtPos(0, 249);
      case 64:
         jjmatchedKind = 244;
         return jjMoveStringLiteralDfa1_2(0x80L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 239);
      case 92:
         jjmatchedKind = 281;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x60000024000803c0L, 0x7ffef7ff0000L, 0x0L, 0x0L);
      case 93:
         return jjStopAtPos(0, 240);
      case 94:
         jjmatchedKind = 265;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x40000L);
      case 97:
         return jjMoveStringLiteralDfa1_2(0x60000L, 0x6000001000000L, 0x300L, 0x3c00180L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_2(0x380000L, 0x0L, 0x1800000003000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_2(0xfc00000L, 0x1800000208c00000L, 0xca0L, 0x219800L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_2(0x70000000L, 0x41e00000000000L, 0x0L, 0x40018L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_2(0x380000000L, 0x80000000L, 0x8a18000000000000L, 0x10000001L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x7c00000000L, 0x0L, 0x0L, 0x8000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_2(0x8000000000L, 0x4000L, 0x0L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x180000000020c00L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_2(0x3f0000000000L, 0x600001800010000L, 0x2L, 0x4000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_2(0x400000000000L, 0x180000000000L, 0x100000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x6c100001000L, 0x10L, 0x40186600L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x3800000000000L, 0x70000000L, 0x6000000000000L, 0x20000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x40L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_2(0x3c000000000000L, 0x8000L, 0x1500000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_2(0x40000000000000L, 0x8010000000000000L, 0xc000000000c005L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_2(0x1f80000000000000L, 0x8010006302000L, 0x6020000008000000L, 0x6L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0xe000000000000000L, 0x7L, 0x0L, 0x0L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x20000000040000L, 0x0L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x18L, 0x0L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x20L, 0x8L, 0x20060L, 0x0L);
      case 123:
         return jjStopAtPos(0, 237);
      case 124:
         jjmatchedKind = 264;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x8000000000000000L, 0x20000L);
      case 125:
         return jjStopAtPos(0, 238);
      case 126:
         return jjStopAtPos(0, 248);
      default :
         return jjMoveNfa_2(2, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0, long active1, long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active4 & 0x1L) != 0L)
            return jjStopAtPos(1, 256);
         break;
      case 41:
         if ((active4 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 292);
         break;
      case 42:
         if ((active4 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 291);
         return jjMoveStringLiteralDfa2_2(active0, 0x80L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 43:
         if ((active4 & 0x2L) != 0L)
            return jjStopAtPos(1, 257);
         break;
      case 45:
         if ((active4 & 0x4L) != 0L)
            return jjStopAtPos(1, 258);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 280);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000L);
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 58:
         if ((active4 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 287);
         break;
      case 60:
         if ((active4 & 0x800L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L);
      case 61:
         if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 253);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 254);
         else if ((active4 & 0x1000L) != 0L)
            return jjStopAtPos(1, 268);
         else if ((active4 & 0x2000L) != 0L)
            return jjStopAtPos(1, 269);
         else if ((active4 & 0x4000L) != 0L)
            return jjStopAtPos(1, 270);
         else if ((active4 & 0x8000L) != 0L)
            return jjStopAtPos(1, 271);
         else if ((active4 & 0x10000L) != 0L)
            return jjStopAtPos(1, 272);
         else if ((active4 & 0x20000L) != 0L)
            return jjStopAtPos(1, 273);
         else if ((active4 & 0x40000L) != 0L)
            return jjStopAtPos(1, 274);
         else if ((active4 & 0x80000L) != 0L)
            return jjStopAtPos(1, 275);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x78000000L);
      case 62:
         if ((active4 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 282);
         else if ((active4 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 289;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100600000L);
      case 84:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x4800400c00000L, active1, 0x6c000000000L, active2, 0x20000000000000L, active3, 0x19800L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_2(active0, 0x20000L, active1, 0L, active2, 0x300L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x3000000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x41000010000000L, active1, 0xa1d9e00100020c00L, active2, 0xc180408000c005L, active3, 0x6000L, active4, 0L);
      case 102:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 40, 39);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x2001000000L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0xe080000001000000L, active1, 0x4020L, active2, 0xa0L, active3, 0x60L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x1800000000L, active1, 0x2000000000L, active2, 0x6000000c00000000L, active3, 0x1eL, active4, 0L);
      case 106:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0x2082000000L, active1, 0x1000000L, active2, 0x201000000000L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_2(active0, 0x60000000000L, active1, 0L, active2, 0x8200000000L, active3, 0x4000000L, active4, 0L);
      case 110:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x380100000000L, active1, 0x620001000050000L, active2, 0xa00190020180002L, active3, 0L, active4, 0L);
      case 111:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x40c04c080000L, active1, 0x1800180218c013d8L, active2, 0x1406400100e20c10L, active3, 0x683a0600L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x6302000L, active2, 0x20008040000L, active3, 0L, active4, 0L);
      case 114:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_2(1, 134, 39);
         return jjMoveStringLiteralDfa2_2(active0, 0x18000000100000L, active1, 0x7L, active2, 0x100000002013008L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_2(active0, 0x40000L, active1, 0x4006000000000000L, active2, 0x40000000000L, active3, 0x400180L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_2(active0, 0x300000000000000L, active1, 0x10000000000L, active2, 0x40000000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x422000000000000L, active1, 0x60008000L, active2, 0L, active3, 0x40000L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_2(active0, 0x800000000000000L, active1, 0L, active2, 0x10000000L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_2(active0, 0x200000000L, active1, 0x80000000L, active2, 0x8018000000000000L, active3, 0x10800001L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000000000200000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 124:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 255);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_2(0, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, active1, active2, active3, active4);
      return 2;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000L);
      case 46:
         if ((active4 & 0x800000L) != 0L)
            return jjStopAtPos(2, 279);
         break;
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(2, 7);
         break;
      case 61:
         if ((active4 & 0x100000L) != 0L)
            return jjStopAtPos(2, 276);
         else if ((active4 & 0x200000L) != 0L)
            return jjStopAtPos(2, 277);
         else if ((active4 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000000L);
      case 62:
         if ((active4 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 283);
         else if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 288;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000L);
      case 89:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0x100000003000000L, active1, 0x10000080001L, active2, 0x208000004L, active3, 0x6000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_2(active0, 0x20000000000000L, active1, 0x40000000000000L, active2, 0x201000000000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_2(active0, 0x4000000000000L, active1, 0x1e00000000000L, active2, 0x18000100000000L, active3, 0x13000000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x8c01000L, active2, 0L, active3, 0x40380600L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x100000L, active1, 0x6302000L, active2, 0x100000002013000L, active3, 0x60L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_2(active0, 0x10000000L, active1, 0x10000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x6000000000000000L, active3, 0x6L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x1800000000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0x2808000000000000L, active1, 0x60000040028L, active2, 0x800000000aL, active3, 0x800000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000400000000L, active1, 0x60020010L, active2, 0x80020000L, active3, 0x1800L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0x100040180c000000L, active1, 0x1980002210000c00L, active2, 0x400800e00c10L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0x90002000080000L, active1, 0x180000004000L, active2, 0x1820301800a0L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0x400060000000000L, active1, 0x800000c000000000L, active2, 0x1L, active3, 0x4018000L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0xc0000000000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0xc200000000000000L, active1, 0x200000000083c0L, active2, 0x6020001040300L, active3, 0x28060000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x80080460000L, active1, 0x6000001010000L, active2, 0x9e00000400000000L, active3, 0x400181L, active4, 0L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 115, 39);
         return jjMoveStringLiteralDfa3_2(active0, 0x40a08200a00000L, active1, 0x180000000L, active2, 0xc000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0x140000000L, active1, 0x4000000000000002L, active2, 0x50004000000L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x2600000000000000L, active2, 0L, active3, 0x18L, active4, 0L);
      case 119:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 48, 39);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0L, active4, 0L);
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(2, 66, 39);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_2(1, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, active1, active2, active3, active4);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active4 & 0x400000L) != 0L)
            return jjStopAtPos(3, 278);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000L);
      case 62:
         if ((active4 & 0x20000000L) != 0L)
            return jjStopAtPos(3, 285);
         break;
      case 80:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x10000000L, active2, 0x100000400000000L, active3, 0x8000000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0x3810100000L, active1, 0x600000000000010L, active2, 0x1800002003000L, active3, 0x40000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_2(active0, 0x40000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_2(active0, 0x1000000000800000L, active1, 0x4180000006302c00L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(3, 67, 39);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(3, 145);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x4L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(3, 21, 39);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(3, 22, 39);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_2(3, 31, 39);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_2(3, 65, 39);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(3, 79, 39);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(3, 146);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 181, 39);
         else if ((active3 & 0x200000L) != 0L)
         {
            jjmatchedKind = 213;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0x400200200040000L, active1, 0x2020000008c01000L, active2, 0x18000081000000L, active3, 0x53400018L, active4, 0L);
      case 103:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 46, 39);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_2(active0, 0x200800000000000L, active1, 0x100000000003c0L, active2, 0x4000000010L, active3, 0x180780L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_2(active0, 0x4000000000000L, active1, 0L, active2, 0x100000000L, active3, 0x20000L, active4, 0L);
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0x20020000080000L, active1, 0x60000020L, active2, 0x601000e00000L, active3, 0x4001800L, active4, 0L);
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(3, 32, 39);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(3, 170);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x6010000000000L, active3, 0x20000000L, active4, 0L);
      case 110:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(3, 167);
         else if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x60000040001L, active2, 0x6000000020000000L, active3, 0x46L, active4, 0L);
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 39, 39);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(3, 88, 39);
         return jjMoveStringLiteralDfa4_2(active0, 0xc000040000000000L, active1, 0L, active2, 0x200000000a0L, active3, 0x800000L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x180000020000L, active2, 0x40000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(3, 24, 39);
         return jjMoveStringLiteralDfa4_2(active0, 0x80000000000000L, active1, 0x8001e01080000000L, active2, 0x2014000001L, active3, 0L, active4, 0L);
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 61, 39);
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0x406000000L, active1, 0x1800008200004000L, active2, 0x10000L, active3, 0x6000L, active4, 0L);
      case 116:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0x910080008020000L, active1, 0x12000010000L, active2, 0x1000180000180c0aL, active3, 0x18000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0x40000000000000L, active1, 0x46000000000000L, active2, 0x8ac000000000c300L, active3, 0x1L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_2(active0, 0x8000000000000L, active1, 0x80000L, active2, 0x800000000L, active3, 0L, active4, 0L);
      case 120:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 161);
         break;
      default :
         break;
   }
   return jjStartNfa_2(2, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa4_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_2(2, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, active1, active2, active3, active4);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active4 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 286);
         break;
      case 69:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(4, 98);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x18800ef02000L, active2, 0x1000110000180000L, active3, 0x40L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0xc080000000000L, active1, 0x200000e0090000L, active2, 0x600600280400000cL, active3, 0x20001806L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_2(active0, 0xa00000000000000L, active1, 0L, active2, 0x2000000L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_2(4, 34, 39);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(4, 69, 39);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(4, 155, 39);
         return jjMoveStringLiteralDfa5_2(active0, 0x10020000080000L, active1, 0x8181e01000020c00L, active2, 0x40000001L, active3, 0x8000000L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x180600L, active4, 0L);
      case 103:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 118, 39);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x3c0L, active2, 0L, active3, 0x180L, active4, 0L);
      case 104:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(4, 23, 39);
         return jjMoveStringLiteralDfa5_2(active0, 0x1000000000000000L, active1, 0x4000000000000000L, active2, 0x80000000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x120000008000000L, active1, 0x10000040000L, active2, 0xc0000400000c02L, active3, 0x4020000L, active4, 0L);
      case 107:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x10003000L, active3, 0L, active4, 0L);
      case 108:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0x1040000000L, active1, 0L, active2, 0L, active3, 0x40000000L, active4, 0L);
      case 109:
         if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(4, 215, 39);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x6000000000000L, active2, 0x80000000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_2(active0, 0x200000000L, active1, 0x10000010000000L, active2, 0x1020000000L, active3, 0L, active4, 0L);
      case 111:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 101);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x18200000000300L, active3, 0x10000000L, active4, 0L);
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 58, 39);
         return jjMoveStringLiteralDfa5_2(active0, 0x40240000060000L, active1, 0x2600000000000000L, active2, 0x8b0000000000c000L, active3, 0x400019L, active4, 0L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(4, 25, 39);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x1L, active2, 0x41010000a0L, active3, 0x3000000L, active4, 0L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 37, 39);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 55, 39);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(4, 78, 39);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x1800060200000010L, active2, 0x10L, active3, 0x40000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_2(active0, 0x10000000L, active1, 0L, active2, 0x10000L, active3, 0x1e000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_2(active0, 0x800000000000L, active1, 0L, active2, 0x1800000000000L, active3, 0L, active4, 0L);
      case 119:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x400000e00000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa5_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_2(3, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, active1, active2, active3, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x4000000000080c00L, active2, 0x400000e00000L, active3, 0x40000000L);
      case 97:
         return jjMoveStringLiteralDfa6_2(active0, 0xa0000L, active1, 0x1e60000000000L, active2, 0x80002L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x18000006c000000L, active2, 0xcL, active3, 0x1800L);
      case 99:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 53, 39);
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active0, 0x10000000000000L, active1, 0x20010080000000L, active2, 0L, active3, 0L);
      case 100:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(5, 96, 39);
         return jjMoveStringLiteralDfa6_2(active0, 0x200000000L, active1, 0x1000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_2(5, 30, 39);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 47, 39);
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x4000000000000L, active2, 0x8b00001100000080L, active3, 0x4000001L);
      case 102:
         return jjMoveStringLiteralDfa6_2(active0, 0x200000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_2(active0, 0x4000000000000L, active1, 0L, active2, 0L, active3, 0x18L);
      case 104:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 59, 39);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(5, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 153);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x6101800000003d1L, active2, 0x1880010000000L, active3, 0x1c0600L);
      case 106:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x500000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_2(active0, 0x1010000000L, active1, 0L, active2, 0x6006002000010000L, active3, 0x20000006L);
      case 109:
         return jjMoveStringLiteralDfa6_2(active0, 0x20000000000L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active0, 0x80008000000L, active1, 0x10000L, active2, 0x40000cc00L, active3, 0x20180L);
      case 111:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x210040000010L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x2002000L, active2, 0L, active3, 0L);
      case 114:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(5, 81, 39);
         return jjMoveStringLiteralDfa6_2(active0, 0x1000000000000000L, active1, 0x1800008200000000L, active2, 0x10c0000800000000L, active3, 0x1e040L);
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 63, 39);
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x8000000000a00000L, active2, 0x100000002001L, active3, 0x3000000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 42, 39);
         return jjMoveStringLiteralDfa6_2(active0, 0x208000000000000L, active1, 0x40000L, active2, 0x18004084000300L, active3, 0x10400000L);
      case 117:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x10000000L, active2, 0x20020000000L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L);
      case 121:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa6_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(4, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, active1, active2, active3, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x4010000000000L, active2, 0x6000000002380L, active3, 0x20400000L);
      case 97:
         return jjMoveStringLiteralDfa7_2(active0, 0x200000000000L, active1, 0x1e00000000f00000L, active2, 0x400000200000L, active3, 0x8000780L);
      case 98:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0xc00L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_2(active0, 0x80000020000L, active1, 0x10000L, active2, 0x20000c00000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0L, active2, 0x100000000000000L, active3, 0L);
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 50, 39);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 51, 39);
         return jjMoveStringLiteralDfa7_2(active0, 0x20000000000L, active1, 0x8000008000000001L, active2, 0x10c0000000000001L, active3, 0x19e058L);
      case 102:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(6, 158);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(6, 168);
         return jjMoveStringLiteralDfa7_2(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(6, 164);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L);
      case 104:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x6000c040000L, active2, 0x18000c04000000L, active3, 0x13000000L);
      case 108:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(6, 165);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x70000010L, active2, 0x2000000eL, active3, 0x1800L);
      case 109:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(6, 19, 39);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x101800000003c0L, active2, 0x80010000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_2(active0, 0x1000000000000000L, active1, 0L, active2, 0x1800000100000L, active3, 0x40000L);
      case 112:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0L, active2, 0x100000000000L, active3, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x2000L, active2, 0x10L, active3, 0L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_2(6, 33, 39);
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(6, 166);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(6, 173);
         else if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x1e00000000000L, active2, 0x4800000000088000L, active3, 0x4000007L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(6, 28, 39);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_2(6, 95, 39);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(6, 144);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(6, 160, 39);
         return jjMoveStringLiteralDfa7_2(active0, 0x10000000000000L, active1, 0x6000000000000000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_2(active0, 0x8000000L, active1, 0x1202000000L, active2, 0xc00L, active3, 0L);
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 36, 39);
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x100000000000000L, active2, 0x80000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa7_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(5, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, active1, active2, active3, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x100000000000000L, active2, 0x4800000000008000L, active3, 0x4020007L);
      case 97:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x200000000c03c0L, active2, 0x800c00000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x2000000L, active2, 0x6000000000300L, active3, 0x3000780L);
      case 99:
         return jjMoveStringLiteralDfa8_2(active0, 0x200000000000L, active1, 0x200000000L, active2, 0x200000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x8000000000L, active2, 0x1000000000100000L, active3, 0x6040L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_2(7, 68, 39);
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(7, 130, 39);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(7, 131, 39);
         else if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_2(active0, 0x10080000000000L, active1, 0x1800040000000L, active2, 0x100000000c00L, active3, 0x20001000L);
      case 102:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0xa00000L, active2, 0L, active3, 0L);
      case 103:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 116, 39);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(7, 171);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0xc000000L, active2, 0x10000000L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x6000000000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x1800610000000000L, active2, 0x80L, active3, 0L);
      case 108:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(7, 92, 39);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0L, active2, 0x20000002L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa8_2(active0, 0x1000020000000000L, active1, 0x8600061000000001L, active2, 0x1L, active3, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x2000L, active2, 0x18000004000000L, active3, 0x10000000L);
      case 112:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 57, 39);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L);
      case 114:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 175, 39);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x4000000000000L, active2, 0x2000L, active3, 0x40400000L);
      case 115:
         if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0L, active2, 0x80400000080010L, active3, 0x110010L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(7, 17, 39);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(7, 169);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0L, active2, 0x400000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0L, active2, 0x101000000000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x180000500000L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(6, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa8_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(6, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0, active1, active2, active3, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x40000800L, active2, 0x80000010000010L, active3, 0x157010L);
      case 97:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x4000180000500000L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0L, active2, 0x100000200000L, active3, 0L);
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 52, 39);
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 45, 39);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(8, 159);
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x4000000a00000L, active2, 0x6000020002300L, active3, 0x400000L);
      case 102:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(8, 135, 39);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_2(active0, 0x1000000000000000L, active1, 0x200006000c000000L, active2, 0x400180000L, active3, 0L);
      case 108:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x20401c0L, active2, 0x800000L, active3, 0x3000780L);
      case 110:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(8, 154);
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x1800610000000000L, active2, 0x118000800000000L, active3, 0x10000000L);
      case 111:
         return jjMoveStringLiteralDfa9_2(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0x40000006L);
      case 112:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0x8000000L);
      case 114:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 176, 39);
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x100000000000000L, active2, 0x4800000000008000L, active3, 0x1L);
      case 115:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x1000000000000L, active2, 0x400000000800L, active3, 0x20000L);
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_2(8, 64, 39);
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_2(active0, 0x20000000000L, active1, 0x8400000200082000L, active2, 0x1L, active3, 0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x8000000000L, active2, 0x1000000000000000L, active3, 0x40L);
      case 120:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000L);
      case 121:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_2(8, 129, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(7, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa9_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(7, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, active0, active1, active2, active3, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x401000000f001c0L, active2, 0x800L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x1000000000L, active2, 0x18000400000000L, active3, 0x30000000L);
      case 98:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0x6000L);
      case 100:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x4000000000000L, active2, 0x100000000002000L, active3, 0x400000L);
      case 101:
         if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x100000000002000L, active2, 0x4800000000208000L, active3, 0x2000501L);
      case 102:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_2(9, 43, 39);
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0L, active2, 0x100010L, active3, 0L);
      case 103:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x400000000000L, active2, 0x80000L, active3, 0x40000000L);
      case 104:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(9, 83);
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0L, active2, 0x6000000000300L, active3, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x10002040000L, active2, 0x500000000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x20000000000000L, active2, 0x20800000L, active3, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x200006800c000000L, active2, 0x1000000000000000L, active3, 0x46L);
      case 111:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x180000000800L, active2, 0x80000000000000L, active3, 0x151010L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_2(9, 41, 39);
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0L, active2, 0x10000001L, active3, 0L);
      case 116:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(9, 126);
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x1000000000000000L, active2, 0x800400000L, active3, 0L);
      case 122:
         return jjMoveStringLiteralDfa10_2(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(8, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa10_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(8, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, active0, active1, active2, active3, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x1000400000000000L, active2, 0x800000001L, active3, 0x2000500L);
      case 97:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0L, active2, 0x106000000000300L, active3, 0x4020000L);
      case 99:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(10, 89, 39);
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x2180L, active2, 0L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x100008000000000L, active2, 0x5800000000008000L, active3, 0x41L);
      case 101:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(10, 117, 39);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(10, 219, 39);
         return jjMoveStringLiteralDfa11_2(active0, 0x1000000000000000L, active1, 0x800L, active2, 0x80000020800000L, active3, 0x151010L);
      case 102:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0L, active2, 0x100000000000L, active3, 0L);
      case 103:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(10, 125);
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x40000000000L, active2, 0x400000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x180000000000L, active2, 0x100000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0L, active2, 0x18000400000000L, active3, 0x10000006L);
      case 109:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0xf00000L, active2, 0L, active3, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x1000000000L, active2, 0x80000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 114:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_2(10, 97, 39);
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x401000000000000L, active2, 0x800L, active3, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x40L, active2, 0x200000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x1000c000000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x4000000000000L, active2, 0x402000L, active3, 0x400000L);
      case 121:
         if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0x4000L);
      case 122:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(9, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa11_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(9, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(10, active0, active1, active2, active3, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x4004c000000L, active2, 0x18000000000000L, active3, 0x10004000L);
      case 97:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x188000f00080L, active2, 0x1000000010000000L, active3, 0x40000040L);
      case 99:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L);
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(11, 60, 39);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(11, 151);
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x800L, active2, 0x80000000000000L, active3, 0x151010L);
      case 101:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x401000000040000L, active2, 0x180800L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x10000000000L, active2, 0x100400000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x4000000000000L, active2, 0x100400000002000L, active3, 0x400000L);
      case 112:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x40L, active2, 0L, active3, 0x20000000L);
      case 114:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_2(11, 132, 39);
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x1000400000000000L, active2, 0x400001L, active3, 0x2000500L);
      case 115:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0L);
      case 116:
         if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(11, 218, 39);
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x1000002000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x100000000000000L, active2, 0x4800000000008000L, active3, 0x1L);
      case 118:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0L, active2, 0x6000000000300L, active3, 0L);
      case 121:
         if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x4L);
      default :
         break;
   }
   return jjStartNfa_2(10, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa12_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(10, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(11, 0L, active1, active2, active3, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa13_2(active1, 0L, active2, 0L, active3, 0x4L);
      case 97:
         return jjMoveStringLiteralDfa13_2(active1, 0x10000000100L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa13_2(active1, 0L, active2, 0x18000000000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_2(active1, 0L, active2, 0x10000000L, active3, 0L);
      case 100:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(12, 82, 39);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(12, 147);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(12, 148);
         return jjMoveStringLiteralDfa13_2(active1, 0x405000040000000L, active2, 0x2800L, active3, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa13_2(active1, 0x1000400000002040L, active2, 0x500020600001L, active3, 0x12020500L);
      case 105:
         return jjMoveStringLiteralDfa13_2(active1, 0L, active2, 0x6000000000300L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa13_2(active1, 0x1000000000L, active2, 0L, active3, 0x20000000L);
      case 109:
         if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_2(12, 222, 39);
         return jjMoveStringLiteralDfa13_2(active1, 0xc000000L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa13_2(active1, 0x100188000000000L, active2, 0x5800000000008000L, active3, 0x41L);
      case 111:
         return jjMoveStringLiteralDfa13_2(active1, 0L, active2, 0x800000000L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_2(active1, 0x40000000000L, active2, 0L, active3, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa13_2(active1, 0x80L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_2(active1, 0xf00000L, active2, 0x100000000000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa13_2(active1, 0x800L, active2, 0x80000000000000L, active3, 0x151010L);
      case 122:
         return jjMoveStringLiteralDfa13_2(active1, 0L, active2, 0x400000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(11, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa13_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(11, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(12, 0L, active1, active2, active3, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa14_2(active1, 0L, active2, 0L, active3, 0x20000L);
      case 97:
         return jjMoveStringLiteralDfa14_2(active1, 0x400000c000000L, active2, 0x2000L, active3, 0x400000L);
      case 99:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(13, 70);
         break;
      case 100:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(13, 77, 39);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(13, 149);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(13, 150);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(13, 172);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(13, 174);
         return jjMoveStringLiteralDfa14_2(active1, 0x1100400000000000L, active2, 0x4800000000008001L, active3, 0x2000501L);
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(13, 71);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(13, 156);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_2(13, 221, 39);
         return jjMoveStringLiteralDfa14_2(active1, 0x40040000000L, active2, 0x18000400000000L, active3, 0x4000L);
      case 104:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(13, 84, 39);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(13, 85, 39);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(13, 86, 39);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(13, 87, 39);
         break;
      case 108:
         return jjMoveStringLiteralDfa14_2(active1, 0x10000000000L, active2, 0x100000000000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa14_2(active1, 0x800L, active2, 0x80000020000000L, active3, 0x151010L);
      case 111:
         return jjMoveStringLiteralDfa14_2(active1, 0L, active2, 0x6000000000300L, active3, 0L);
      case 114:
         if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(13, 163);
         return jjMoveStringLiteralDfa14_2(active1, 0L, active2, 0L, active3, 0x4L);
      case 116:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_2(active1, 0x108000000000L, active2, 0x1000000000000000L, active3, 0x40L);
      case 117:
         return jjMoveStringLiteralDfa14_2(active1, 0x401000000000100L, active2, 0x800L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa14_2(active1, 0L, active2, 0L, active3, 0x10000000L);
      case 121:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_2(13, 100, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(12, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa14_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(12, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(13, 0L, active1, active2, active3, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_2(active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa15_2(active1, 0x100000000000000L, active2, 0x4800000000008000L, active3, 0x10000001L);
      case 100:
         if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(14, 162);
         return jjMoveStringLiteralDfa15_2(active1, 0x40000000800L, active2, 0x80000000000000L, active3, 0x155010L);
      case 101:
         return jjMoveStringLiteralDfa15_2(active1, 0L, active2, 0L, active3, 0x4L);
      case 102:
         return jjMoveStringLiteralDfa15_2(active1, 0x40000000L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa15_2(active1, 0L, active2, 0x18000000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa15_2(active1, 0x10000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa15_2(active1, 0x8000000000L, active2, 0x1000000000000000L, active3, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa15_2(active1, 0x405000000000000L, active2, 0x2800L, active3, 0x400000L);
      case 114:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(14, 136, 39);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_2(14, 177, 39);
         return jjMoveStringLiteralDfa15_2(active1, 0L, active2, 0L, active3, 0x20000L);
      case 115:
         return jjMoveStringLiteralDfa15_2(active1, 0x100L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa15_2(active1, 0xc000000L, active2, 0x20000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa15_2(active1, 0x1000400000000000L, active2, 0x4000000000201L, active3, 0x2000500L);
      case 121:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_2(14, 184, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(13, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa15_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(13, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(14, 0L, active1, active2, active3, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_2(active1, 0x40000800L, active2, 0x98000000000000L, active3, 0x151010L);
      case 100:
         return jjMoveStringLiteralDfa16_2(active1, 0x401000000000000L, active2, 0x800L, active3, 0x4L);
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(15, 72);
         return jjMoveStringLiteralDfa16_2(active1, 0L, active2, 0L, active3, 0x20000L);
      case 104:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(15, 90, 39);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(15, 91, 39);
         break;
      case 109:
         return jjMoveStringLiteralDfa16_2(active1, 0L, active2, 0L, active3, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa16_2(active1, 0x1100400000000000L, active2, 0x4800000000008001L, active3, 0x2000501L);
      case 114:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(15, 137, 39);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(15, 178, 39);
         return jjMoveStringLiteralDfa16_2(active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 115:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(15, 157);
         break;
      case 116:
         return jjMoveStringLiteralDfa16_2(active1, 0x4000000000000L, active2, 0x2000L, active3, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa16_2(active1, 0x40000000000L, active2, 0L, active3, 0x4000L);
      case 121:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_2(15, 103, 39);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(15, 188, 39);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_2(15, 198, 39);
         break;
      case 122:
         return jjMoveStringLiteralDfa16_2(active1, 0x10000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(14, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa16_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(14, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(15, 0L, active1, active2, active3, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa17_2(active1, 0x401000000000000L, active2, 0x800L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa17_2(active1, 0x1000400000000000L, active2, 0x1L, active3, 0x2020500L);
      case 101:
         return jjMoveStringLiteralDfa17_2(active1, 0x110000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa17_2(active1, 0x4000000000000L, active2, 0x2000L, active3, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa17_2(active1, 0x40000000800L, active2, 0x80000000000000L, active3, 0x155010L);
      case 112:
         return jjMoveStringLiteralDfa17_2(active1, 0L, active2, 0L, active3, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa17_2(active1, 0x100000000000000L, active2, 0x4800000000008000L, active3, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa17_2(active1, 0x40000000L, active2, 0L, active3, 0x4L);
      case 118:
         return jjMoveStringLiteralDfa17_2(active1, 0L, active2, 0x18000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(15, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa17_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(15, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(16, 0L, active1, active2, active3, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_2(active1, 0x1000400000000000L, active2, 0x1L, active3, 0x2000500L);
      case 100:
         return jjMoveStringLiteralDfa18_2(active1, 0x140000000000L, active2, 0L, active3, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa18_2(active1, 0L, active2, 0x18000000000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa18_2(active1, 0x100000040000000L, active2, 0x4800000000008000L, active3, 0x10000001L);
      case 110:
         return jjMoveStringLiteralDfa18_2(active1, 0x401000000000000L, active2, 0x800L, active3, 0x4L);
      case 114:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_2(17, 104, 39);
         break;
      case 116:
         return jjMoveStringLiteralDfa18_2(active1, 0x800L, active2, 0x80000000000000L, active3, 0x151010L);
      case 117:
         return jjMoveStringLiteralDfa18_2(active1, 0L, active2, 0L, active3, 0x20000L);
      case 121:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(17, 114, 39);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(17, 141, 39);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(17, 214, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(16, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa18_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(16, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(17, 0L, active1, active2, active3, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa19_2(active1, 0x40000000000L, active2, 0L, active3, 0x4000L);
      case 100:
         return jjMoveStringLiteralDfa19_2(active1, 0L, active2, 0L, active3, 0x4L);
      case 101:
         if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(18, 220, 39);
         break;
      case 108:
         return jjMoveStringLiteralDfa19_2(active1, 0x800L, active2, 0x80000000000000L, active3, 0x151010L);
      case 110:
         return jjMoveStringLiteralDfa19_2(active1, 0x1000400000000000L, active2, 0x1L, active3, 0x2020500L);
      case 111:
         return jjMoveStringLiteralDfa19_2(active1, 0L, active2, 0x18000000000000L, active3, 0L);
      case 116:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_2(18, 94, 39);
         return jjMoveStringLiteralDfa19_2(active1, 0x401000000000000L, active2, 0x800L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa19_2(active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_2(18, 120, 39);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(18, 143, 39);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_2(18, 187, 39);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_2(18, 190, 39);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_2(18, 192, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(17, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa19_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(17, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(18, 0L, active1, active2, active3, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa20_2(active1, 0L, active2, 0L, active3, 0x4L);
      case 100:
         return jjMoveStringLiteralDfa20_2(active1, 0L, active2, 0L, active3, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa20_2(active1, 0x401000000000000L, active2, 0x800L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa20_2(active1, 0x140000000000L, active2, 0L, active3, 0x4000L);
      case 114:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(19, 179, 39);
         break;
      case 116:
         return jjMoveStringLiteralDfa20_2(active1, 0x1000400000000000L, active2, 0x1L, active3, 0x2000500L);
      case 117:
         return jjMoveStringLiteralDfa20_2(active1, 0L, active2, 0x10000000000000L, active3, 0L);
      case 121:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(19, 75, 39);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_2(19, 183, 39);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_2(19, 196, 39);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(19, 204, 39);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(19, 208, 39);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(19, 210, 39);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(19, 212, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(18, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa20_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(18, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(19, 0L, active1, active2, active3, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_2(active1, 0L, active2, 0L, active3, 0x20000L);
      case 100:
         return jjMoveStringLiteralDfa21_2(active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa21_2(active1, 0x1000400000000000L, active2, 0x1L, active3, 0x2000500L);
      case 110:
         return jjMoveStringLiteralDfa21_2(active1, 0L, active2, 0L, active3, 0x4L);
      case 114:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_2(20, 180, 39);
         break;
      case 116:
         return jjMoveStringLiteralDfa21_2(active1, 0x40000000000L, active2, 0L, active3, 0x4000L);
      case 121:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_2(20, 112, 39);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_2(20, 122, 39);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(20, 139, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(19, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa21_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(19, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(20, 0L, active1, active2, active3, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa22_2(active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa22_2(active1, 0x40000000000L, active2, 0L, active3, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa22_2(active1, 0L, active2, 0L, active3, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa22_2(active1, 0L, active2, 0L, active3, 0x4L);
      case 121:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_2(21, 110, 39);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(21, 124, 39);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_2(21, 128, 39);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(21, 200, 39);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(21, 202, 39);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(21, 217, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(20, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa22_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(20, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(21, 0L, active1, 0L, active3, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa23_2(active1, 0L, active3, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa23_2(active1, 0x100000000000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa23_2(active1, 0L, active3, 0x20000L);
      case 121:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_2(22, 106, 39);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(22, 206, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(21, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa23_2(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(21, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(22, 0L, active1, 0L, active3, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa24_2(active1, 0L, active3, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa24_2(active1, 0x100000000000L, active3, 0L);
      case 121:
         if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(23, 194, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(22, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa24_2(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(22, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(23, 0L, active1, 0L, active3, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa25_2(active1, 0x100000000000L, active3, 0L);
      case 121:
         if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(24, 209, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(23, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa25_2(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(23, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(24, 0L, active1, 0L, 0L, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 121:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_2(25, 108, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(24, 0L, active1, 0L, 0L, 0L);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 59;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 39:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 34:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  else if (curChar == 36)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(49, 51);
                  else if (curChar == 39)
                     jjAddStates(52, 53);
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  else if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 223)
                        kind = 223;
                     jjCheckNAddTwoStates(4, 5);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 223)
                        kind = 223;
                     jjCheckNAddStates(54, 56);
                  }
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 59:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 1:
                  if ((0xfffffbffffffffffL & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 3:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddStates(57, 59);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if (curChar == 39)
                     jjAddStates(52, 53);
                  break;
               case 13:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if (curChar == 39 && kind > 229)
                     kind = 229;
                  break;
               case 16:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 14);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 19:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 21:
                  if (curChar == 34)
                     jjCheckNAddStates(49, 51);
                  break;
               case 22:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 24:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 25:
                  if (curChar == 34 && kind > 230)
                     kind = 230;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(60, 63);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 28:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 38:
                  if (curChar != 36)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar != 46)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddStates(64, 66);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddStates(64, 66);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddTwoStates(46, 11);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddTwoStates(50, 11);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 11);
                  break;
               case 55:
                  if (curChar != 48)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddStates(54, 56);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddTwoStates(57, 5);
                  break;
               case 58:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddTwoStates(58, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(30);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(30);
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 231)
                        kind = 231;
                  }
                  break;
               case 0:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (kind > 9)
                     kind = 9;
                  break;
               case 5:
                  if ((0x100000001000L & l) != 0L && kind > 223)
                     kind = 223;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 11:
                  if ((0x5000000050L & l) != 0L && kind > 227)
                     kind = 227;
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 92)
                     jjAddStates(72, 74);
                  break;
               case 16:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 23:
                  if (curChar == 92)
                     jjAddStates(75, 77);
                  break;
               case 24:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 30:
                  if (curChar == 101 && kind > 231)
                     kind = 231;
                  break;
               case 33:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 37:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(80, 81);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(82, 83);
                  break;
               case 56:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddTwoStates(57, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 39:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 34:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 36:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 2:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 31:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 59:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 9)
                     kind = 9;
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(49, 51);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 59 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x4000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fffff83fffe0000L) != 0L || (active1 & 0x9fffffdbfff7fc38L) != 0L || (active2 & 0xffff80010800ffffL) != 0L || (active3 & 0x77ffffffL) != 0L)
         {
            jjmatchedKind = 232;
            return 39;
         }
         if ((active0 & 0x10L) != 0L)
            return 1;
         if ((active0 & 0x7c00000000L) != 0L || (active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 232;
            return 36;
         }
         if ((active3 & 0x8000000000000L) != 0L || (active4 & 0x800000L) != 0L)
            return 7;
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x7L) != 0L)
         {
            jjmatchedKind = 232;
            return 32;
         }
         return -1;
      case 1:
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 1;
            }
            return 35;
         }
         if ((active0 & 0xffffc6fb9ffe0000L) != 0L || (active1 & 0x99ffffc3fff6fc38L) != 0L || (active2 & 0xffff80010800ffbdL) != 0L || (active3 & 0x7fffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 1;
            }
            return 39;
         }
         if ((active1 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 1;
            }
            return 31;
         }
         if ((active0 & 0x390060000000L) != 0L || (active1 & 0x600001800010000L) != 0L || (active2 & 0x42L) != 0L)
            return 39;
         return -1;
      case 2:
         if ((active0 & 0xfffecebbdffe0000L) != 0L || (active1 & 0x9ff7ffd3fff7fc39L) != 0L || (active2 & 0xffff80010800ffbfL) != 0L || (active3 & 0x77ffffffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 2;
            }
            return 39;
         }
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 2;
            }
            return 34;
         }
         if ((active1 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 2;
            }
            return 59;
         }
         if ((active0 & 0x1304000000000L) != 0L || (active1 & 0x8000000000004L) != 0L || (active3 & 0x8000000L) != 0L)
            return 39;
         return -1;
      case 3:
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 3;
            }
            return 59;
         }
         if ((active0 & 0xdffcae3a5e9e0000L) != 0L || (active1 & 0x9ff7ff1396377c31L) != 0L || (active2 & 0xebdf80010800ffbfL) != 0L || (active3 & 0x7fdfff9fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 3;
            }
            return 39;
         }
         if ((active0 & 0x2002408181600000L) != 0L || (active1 & 0xc069c0800aL) != 0L || (active2 & 0x1420000000000000L) != 0L || (active3 & 0x200060L) != 0L)
            return 39;
         return -1;
      case 4:
         if ((active0 & 0x1b7cae02580e0000L) != 0L || (active1 & 0x87b7ff91fef72c11L) != 0L || (active2 & 0xfbdf80010000cfbfL) != 0L || (active3 & 0x3f5fffdfL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 4;
            }
            return 39;
         }
         if ((active0 & 0xc480003c06900000L) != 0L || (active1 & 0x1840000200005020L) != 0L || (active2 & 0x8003000L) != 0L || (active3 & 0x40800000L) != 0L)
            return 39;
         return -1;
      case 5:
         if ((active0 & 0x8960840040040000L) != 0L || (active1 & 0x6010100020000L) != 0L || (active2 & 0xf0a0L) != 0L || (active3 & 0x400000L) != 0L)
            return 39;
         if ((active0 & 0x121c2a12180a0000L) != 0L || (active1 & 0x9fb1fe92fef52c11L) != 0L || (active2 & 0xfbdf800100000f1fL) != 0L || (active3 & 0x7f1fffdfL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 5;
            }
            return 39;
         }
         return -1;
      case 6:
         if ((active0 & 0x12102a0008020000L) != 0L || (active1 & 0x9e35ff927ef52c11L) != 0L || (active2 & 0x11df800000002f9fL) != 0L || (active3 & 0x7f5fffd8L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 6;
            }
            return 39;
         }
         if ((active0 & 0xc001210080000L) != 0L || (active1 & 0x180000080000000L) != 0L || (active2 & 0xea0000010000c000L) != 0L || (active3 & 0x7L) != 0L)
            return 39;
         return -1;
      case 7:
         if ((active0 & 0x1010220000000000L) != 0L || (active1 & 0x9f25ff920ef42001L) != 0L || (active2 & 0x591f00000000a393L) != 0L || (active3 & 0x7f4667c7L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 7;
            }
            return 39;
         }
         if ((active0 & 0x200080008020000L) != 0L || (active1 & 0x10000070010c10L) != 0L || (active2 & 0xc0800000000c0cL) != 0L || (active3 & 0x199818L) != 0L)
            return 39;
         return -1;
      case 8:
         if ((active0 & 0x10000a0000000000L) != 0L || (active1 & 0x99247f924ef42800L) != 0L || (active2 & 0x599e00000000a311L) != 0L || (active3 & 0x7f5777d7L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 8;
            }
            return 39;
         }
         if ((active0 & 0x10200000000000L) != 0L || (active1 & 0x601800000000001L) != 0L || (active2 & 0x1000000000c82L) != 0L)
            return 39;
         return -1;
      case 9:
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x5251f924ef42800L) != 0L || (active2 & 0x599e00000000ab10L) != 0L || (active3 & 0x7c577057L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 9;
            }
            return 39;
         }
         if ((active0 & 0xa0000000000L) != 0L || (active1 & 0x9800600000000000L) != 0L || (active2 & 0x1L) != 0L || (active3 & 0x3000780L) != 0L)
            return 39;
         return -1;
      case 10:
         if ((active1 & 0x20060202000000L) != 0L || (active3 & 0x8006000L) != 0L)
            return 39;
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x150559904cf42800L) != 0L || (active2 & 0x599e00000000ab11L) != 0L || (active3 & 0x76571557L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 10;
            }
            return 39;
         }
         return -1;
      case 11:
         if ((active1 & 0x15055d904cf42800L) != 0L || (active2 & 0x599e00000000ab01L) != 0L || (active3 & 0x72575551L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 11;
            }
            return 39;
         }
         if ((active0 & 0x1000000000000000L) != 0L || (active2 & 0x10L) != 0L || (active3 & 0x4000006L) != 0L)
            return 39;
         return -1;
      case 12:
         if ((active1 & 0x15055d904cf02800L) != 0L || (active2 & 0x599e00000000ab01L) != 0L || (active3 & 0x32575555L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 12;
            return 39;
         }
         if ((active1 & 0x40000L) != 0L || (active3 & 0x40000000L) != 0L)
            return 39;
         return -1;
      case 13:
         if ((active1 & 0x181000f02000L) != 0L || (active3 & 0x20000000L) != 0L)
            return 39;
         if ((active1 & 0x150545804c000800L) != 0L || (active2 & 0x599e00000000ab01L) != 0L || (active3 & 0x12575555L) != 0L)
         {
            if (jjmatchedPos != 13)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 13;
            }
            return 39;
         }
         return -1;
      case 14:
         if ((active1 & 0x150555804c000800L) != 0L || (active2 & 0x589c00000000aa01L) != 0L || (active3 & 0x12575555L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 14;
            return 39;
         }
         if ((active2 & 0x102000000000100L) != 0L)
            return 39;
         return -1;
      case 15:
         if ((active1 & 0x1505550040000800L) != 0L || (active2 & 0x489800000000a801L) != 0L || (active3 & 0x12575515L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 15;
            return 39;
         }
         if ((active1 & 0x800c000000L) != 0L || (active2 & 0x1004000000000200L) != 0L || (active3 & 0x40L) != 0L)
            return 39;
         return -1;
      case 16:
         if ((active1 & 0x1505550040000800L) != 0L || (active2 & 0x489800000000a801L) != 0L || (active3 & 0x12575515L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 16;
            return 39;
         }
         return -1;
      case 17:
         if ((active1 & 0x1501540040000800L) != 0L || (active2 & 0x4898000000008801L) != 0L || (active3 & 0x12175515L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 17;
            return 39;
         }
         if ((active1 & 0x4010000000000L) != 0L || (active2 & 0x2000L) != 0L || (active3 & 0x400000L) != 0L)
            return 39;
         return -1;
      case 18:
         if ((active1 & 0x1401540000000800L) != 0L || (active2 & 0x98000000000801L) != 0L || (active3 & 0x2175514L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 18;
            return 39;
         }
         if ((active1 & 0x100000040000000L) != 0L || (active2 & 0x4800000000008000L) != 0L || (active3 & 0x10000001L) != 0L)
            return 39;
         return -1;
      case 19:
         if ((active1 & 0x1401540000000000L) != 0L || (active2 & 0x10000000000801L) != 0L || (active3 & 0x2024504L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 19;
            return 39;
         }
         if ((active1 & 0x800L) != 0L || (active2 & 0x88000000000000L) != 0L || (active3 & 0x151010L) != 0L)
            return 39;
         return -1;
      case 20:
         if ((active1 & 0x1000540000000000L) != 0L || (active2 & 0x1L) != 0L || (active3 & 0x2024504L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 20;
            return 39;
         }
         if ((active1 & 0x401000000000000L) != 0L || (active2 & 0x10000000000800L) != 0L)
            return 39;
         return -1;
      case 21:
         if ((active1 & 0x140000000000L) != 0L || (active3 & 0x24004L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 21;
            return 39;
         }
         if ((active1 & 0x1000400000000000L) != 0L || (active2 & 0x1L) != 0L || (active3 & 0x2000500L) != 0L)
            return 39;
         return -1;
      case 22:
         if ((active1 & 0x40000000000L) != 0L || (active3 & 0x4000L) != 0L)
            return 39;
         if ((active1 & 0x100000000000L) != 0L || (active3 & 0x20004L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 22;
            return 39;
         }
         return -1;
      case 23:
         if ((active1 & 0x100000000000L) != 0L || (active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 23;
            return 39;
         }
         if ((active3 & 0x4L) != 0L)
            return 39;
         return -1;
      case 24:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 24;
            return 39;
         }
         if ((active3 & 0x20000L) != 0L)
            return 39;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStartNfaWithStates_1(0, 4, 1);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         jjmatchedKind = 247;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x4000000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 266;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x80000L);
      case 38:
         jjmatchedKind = 263;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x10001L);
      case 40:
         jjmatchedKind = 235;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x800000000L);
      case 41:
         return jjStopAtPos(0, 236);
      case 42:
         jjmatchedKind = 261;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x1000004000L);
      case 43:
         jjmatchedKind = 259;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x1002L);
      case 44:
         return jjStopAtPos(0, 242);
      case 45:
         jjmatchedKind = 260;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x4002004L);
      case 46:
         jjmatchedKind = 243;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x800000L);
      case 47:
         jjmatchedKind = 262;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x8000L);
      case 58:
         return jjStopAtPos(0, 250);
      case 59:
         return jjStopAtPos(0, 241);
      case 60:
         jjmatchedKind = 246;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x1000000000000000L, 0xf1100800L);
      case 61:
         jjmatchedKind = 245;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x800000000000000L, 0x8000000L);
      case 62:
         jjmatchedKind = 290;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x2000000000000000L, 0x300600000L);
      case 63:
         return jjStopAtPos(0, 249);
      case 64:
         return jjStopAtPos(0, 244);
      case 91:
         return jjStopAtPos(0, 239);
      case 92:
         jjmatchedKind = 281;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x60000024000803c0L, 0x7ffef7ff0000L, 0x0L, 0x0L);
      case 93:
         return jjStopAtPos(0, 240);
      case 94:
         jjmatchedKind = 265;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x40000L);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x60000L, 0x6000001000000L, 0x300L, 0x3c00180L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x380000L, 0x0L, 0x1800000003000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0xfc00000L, 0x1800000208c00000L, 0xca0L, 0x219800L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x70000000L, 0x41e00000000000L, 0x0L, 0x40018L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x380000000L, 0x80000000L, 0x8a18000000000000L, 0x10000001L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x7c00000000L, 0x0L, 0x0L, 0x8000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x8000000000L, 0x4000L, 0x0L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x180000000020c00L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x3f0000000000L, 0x600001800010000L, 0x2L, 0x4000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x400000000000L, 0x180000000000L, 0x100000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x6c100001000L, 0x10L, 0x40186600L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x3800000000000L, 0x70000000L, 0x6000000000000L, 0x20000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x40L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x3c000000000000L, 0x8000L, 0x1500000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x40000000000000L, 0x8010000000000000L, 0xc000000000c005L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x1f80000000000000L, 0x8010006302000L, 0x6020000008000000L, 0x6L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0xe000000000000000L, 0x7L, 0x0L, 0x0L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x20000000040000L, 0x0L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x18L, 0x0L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x20L, 0x8L, 0x20060L, 0x0L);
      case 123:
         return jjStopAtPos(0, 237);
      case 124:
         jjmatchedKind = 264;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x8000000000000000L, 0x20000L);
      case 125:
         return jjStopAtPos(0, 238);
      case 126:
         return jjStopAtPos(0, 248);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0, long active1, long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active4 & 0x1L) != 0L)
            return jjStopAtPos(1, 256);
         break;
      case 41:
         if ((active4 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 292);
         break;
      case 42:
         if ((active4 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 291);
         break;
      case 43:
         if ((active4 & 0x2L) != 0L)
            return jjStopAtPos(1, 257);
         break;
      case 45:
         if ((active4 & 0x4L) != 0L)
            return jjStopAtPos(1, 258);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 280);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000L);
      case 58:
         if ((active4 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 287);
         break;
      case 60:
         if ((active4 & 0x800L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L);
      case 61:
         if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 253);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 254);
         else if ((active4 & 0x1000L) != 0L)
            return jjStopAtPos(1, 268);
         else if ((active4 & 0x2000L) != 0L)
            return jjStopAtPos(1, 269);
         else if ((active4 & 0x4000L) != 0L)
            return jjStopAtPos(1, 270);
         else if ((active4 & 0x8000L) != 0L)
            return jjStopAtPos(1, 271);
         else if ((active4 & 0x10000L) != 0L)
            return jjStopAtPos(1, 272);
         else if ((active4 & 0x20000L) != 0L)
            return jjStopAtPos(1, 273);
         else if ((active4 & 0x40000L) != 0L)
            return jjStopAtPos(1, 274);
         else if ((active4 & 0x80000L) != 0L)
            return jjStopAtPos(1, 275);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x78000000L);
      case 62:
         if ((active4 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 282);
         else if ((active4 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 289;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100600000L);
      case 84:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x4800400c00000L, active1, 0x6c000000000L, active2, 0x20000000000000L, active3, 0x19800L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000L, active1, 0L, active2, 0x300L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x3000000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x41000010000000L, active1, 0xa1d9e00100020c00L, active2, 0xc180408000c005L, active3, 0x6000L, active4, 0L);
      case 102:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 40, 39);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x2001000000L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0xe080000001000000L, active1, 0x4020L, active2, 0xa0L, active3, 0x60L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x1800000000L, active1, 0x2000000000L, active2, 0x6000000c00000000L, active3, 0x1eL, active4, 0L);
      case 106:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x2082000000L, active1, 0x1000000L, active2, 0x201000000000L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x60000000000L, active1, 0L, active2, 0x8200000000L, active3, 0x4000000L, active4, 0L);
      case 110:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x380100000000L, active1, 0x620001000050000L, active2, 0xa00190020180002L, active3, 0L, active4, 0L);
      case 111:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x40c04c080000L, active1, 0x1800180218c013d8L, active2, 0x1406400100e20c10L, active3, 0x683a0600L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x6302000L, active2, 0x20008040000L, active3, 0L, active4, 0L);
      case 114:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(1, 134, 39);
         return jjMoveStringLiteralDfa2_1(active0, 0x18000000100000L, active1, 0x7L, active2, 0x100000002013008L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000L, active1, 0x4006000000000000L, active2, 0x40000000000L, active3, 0x400180L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x300000000000000L, active1, 0x10000000000L, active2, 0x40000000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x422000000000000L, active1, 0x60008000L, active2, 0L, active3, 0x40000L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0x800000000000000L, active1, 0L, active2, 0x10000000L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000000L, active1, 0x80000000L, active2, 0x8018000000000000L, active3, 0x10800001L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000200000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 124:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 255);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_1(0, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1, active2, active3, active4);
      return 2;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000L);
      case 46:
         if ((active4 & 0x800000L) != 0L)
            return jjStopAtPos(2, 279);
         break;
      case 61:
         if ((active4 & 0x100000L) != 0L)
            return jjStopAtPos(2, 276);
         else if ((active4 & 0x200000L) != 0L)
            return jjStopAtPos(2, 277);
         else if ((active4 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000000L);
      case 62:
         if ((active4 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 283);
         else if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 288;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000L);
      case 89:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000003000000L, active1, 0x10000080001L, active2, 0x208000004L, active3, 0x6000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000000000L, active1, 0x40000000000000L, active2, 0x201000000000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000000000L, active1, 0x1e00000000000L, active2, 0x18000100000000L, active3, 0x13000000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x8c01000L, active2, 0L, active3, 0x40380600L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000L, active1, 0x6302000L, active2, 0x100000002013000L, active3, 0x60L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000L, active1, 0x10000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x6000000000000000L, active3, 0x6L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x1800000000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x2808000000000000L, active1, 0x60000040028L, active2, 0x800000000aL, active3, 0x800000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000400000000L, active1, 0x60020010L, active2, 0x80020000L, active3, 0x1800L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x100040180c000000L, active1, 0x1980002210000c00L, active2, 0x400800e00c10L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x90002000080000L, active1, 0x180000004000L, active2, 0x1820301800a0L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x400060000000000L, active1, 0x800000c000000000L, active2, 0x1L, active3, 0x4018000L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0xc0000000000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0xc200000000000000L, active1, 0x200000000083c0L, active2, 0x6020001040300L, active3, 0x28060000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x80080460000L, active1, 0x6000001010000L, active2, 0x9e00000400000000L, active3, 0x400181L, active4, 0L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 115, 39);
         return jjMoveStringLiteralDfa3_1(active0, 0x40a08200a00000L, active1, 0x180000000L, active2, 0xc000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x140000000L, active1, 0x4000000000000002L, active2, 0x50004000000L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x2600000000000000L, active2, 0L, active3, 0x18L, active4, 0L);
      case 119:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 48, 39);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0L, active4, 0L);
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(2, 66, 39);
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_1(1, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1, active2, active3, active4);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active4 & 0x400000L) != 0L)
            return jjStopAtPos(3, 278);
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000L);
      case 62:
         if ((active4 & 0x20000000L) != 0L)
            return jjStopAtPos(3, 285);
         break;
      case 80:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x10000000L, active2, 0x100000400000000L, active3, 0x8000000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x3810100000L, active1, 0x600000000000010L, active2, 0x1800002003000L, active3, 0x40000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000800000L, active1, 0x4180000006302c00L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(3, 67, 39);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(3, 145);
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0L, active2, 0x4L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(3, 21, 39);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(3, 22, 39);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(3, 31, 39);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(3, 65, 39);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(3, 79, 39);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(3, 146);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 181, 39);
         else if ((active3 & 0x200000L) != 0L)
         {
            jjmatchedKind = 213;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x400200200040000L, active1, 0x2020000008c01000L, active2, 0x18000081000000L, active3, 0x53400018L, active4, 0L);
      case 103:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 46, 39);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x200800000000000L, active1, 0x100000000003c0L, active2, 0x4000000010L, active3, 0x180780L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000000000L, active1, 0L, active2, 0x100000000L, active3, 0x20000L, active4, 0L);
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x20020000080000L, active1, 0x60000020L, active2, 0x601000e00000L, active3, 0x4001800L, active4, 0L);
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(3, 32, 39);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(3, 170);
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0L, active2, 0x6010000000000L, active3, 0x20000000L, active4, 0L);
      case 110:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(3, 167);
         else if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x60000040001L, active2, 0x6000000020000000L, active3, 0x46L, active4, 0L);
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 39, 39);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(3, 88, 39);
         return jjMoveStringLiteralDfa4_1(active0, 0xc000040000000000L, active1, 0L, active2, 0x200000000a0L, active3, 0x800000L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x180000020000L, active2, 0x40000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(3, 24, 39);
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000000000L, active1, 0x8001e01080000000L, active2, 0x2014000001L, active3, 0L, active4, 0L);
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 61, 39);
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x406000000L, active1, 0x1800008200004000L, active2, 0x10000L, active3, 0x6000L, active4, 0L);
      case 116:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x910080008020000L, active1, 0x12000010000L, active2, 0x1000180000180c0aL, active3, 0x18000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000000000L, active1, 0x46000000000000L, active2, 0x8ac000000000c300L, active3, 0x1L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000000L, active1, 0x80000L, active2, 0x800000000L, active3, 0L, active4, 0L);
      case 120:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 161);
         break;
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_1(2, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1, active2, active3, active4);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active4 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 286);
         break;
      case 69:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(4, 98);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x18800ef02000L, active2, 0x1000110000180000L, active3, 0x40L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0xc080000000000L, active1, 0x200000e0090000L, active2, 0x600600280400000cL, active3, 0x20001806L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0xa00000000000000L, active1, 0L, active2, 0x2000000L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(4, 34, 39);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(4, 69, 39);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(4, 155, 39);
         return jjMoveStringLiteralDfa5_1(active0, 0x10020000080000L, active1, 0x8181e01000020c00L, active2, 0x40000001L, active3, 0x8000000L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x180600L, active4, 0L);
      case 103:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 118, 39);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x3c0L, active2, 0L, active3, 0x180L, active4, 0L);
      case 104:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(4, 23, 39);
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000000000000L, active1, 0x4000000000000000L, active2, 0x80000000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x120000008000000L, active1, 0x10000040000L, active2, 0xc0000400000c02L, active3, 0x4020000L, active4, 0L);
      case 107:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0L, active2, 0x10003000L, active3, 0L, active4, 0L);
      case 108:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x1040000000L, active1, 0L, active2, 0L, active3, 0x40000000L, active4, 0L);
      case 109:
         if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(4, 215, 39);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x6000000000000L, active2, 0x80000000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000000L, active1, 0x10000010000000L, active2, 0x1020000000L, active3, 0L, active4, 0L);
      case 111:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 101);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0L, active2, 0x18200000000300L, active3, 0x10000000L, active4, 0L);
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 58, 39);
         return jjMoveStringLiteralDfa5_1(active0, 0x40240000060000L, active1, 0x2600000000000000L, active2, 0x8b0000000000c000L, active3, 0x400019L, active4, 0L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(4, 25, 39);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x1L, active2, 0x41010000a0L, active3, 0x3000000L, active4, 0L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 37, 39);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 55, 39);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(4, 78, 39);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x1800060200000010L, active2, 0x10L, active3, 0x40000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000L, active1, 0L, active2, 0x10000L, active3, 0x1e000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_1(active0, 0x800000000000L, active1, 0L, active2, 0x1800000000000L, active3, 0L, active4, 0L);
      case 119:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0L, active2, 0x400000e00000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_1(3, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1, active2, active3, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x4000000000080c00L, active2, 0x400000e00000L, active3, 0x40000000L);
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0xa0000L, active1, 0x1e60000000000L, active2, 0x80002L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x18000006c000000L, active2, 0xcL, active3, 0x1800L);
      case 99:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 53, 39);
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x10000000000000L, active1, 0x20010080000000L, active2, 0L, active3, 0L);
      case 100:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(5, 96, 39);
         return jjMoveStringLiteralDfa6_1(active0, 0x200000000L, active1, 0x1000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(5, 30, 39);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 47, 39);
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x4000000000000L, active2, 0x8b00001100000080L, active3, 0x4000001L);
      case 102:
         return jjMoveStringLiteralDfa6_1(active0, 0x200000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000000000L, active1, 0L, active2, 0L, active3, 0x18L);
      case 104:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 59, 39);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(5, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 153);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x6101800000003d1L, active2, 0x1880010000000L, active3, 0x1c0600L);
      case 106:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x500000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_1(active0, 0x1010000000L, active1, 0L, active2, 0x6006002000010000L, active3, 0x20000006L);
      case 109:
         return jjMoveStringLiteralDfa6_1(active0, 0x20000000000L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x80008000000L, active1, 0x10000L, active2, 0x40000cc00L, active3, 0x20180L);
      case 111:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0L, active2, 0x210040000010L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x2002000L, active2, 0L, active3, 0L);
      case 114:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(5, 81, 39);
         return jjMoveStringLiteralDfa6_1(active0, 0x1000000000000000L, active1, 0x1800008200000000L, active2, 0x10c0000800000000L, active3, 0x1e040L);
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 63, 39);
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x8000000000a00000L, active2, 0x100000002001L, active3, 0x3000000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 42, 39);
         return jjMoveStringLiteralDfa6_1(active0, 0x208000000000000L, active1, 0x40000L, active2, 0x18004084000300L, active3, 0x10400000L);
      case 117:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x10000000L, active2, 0x20020000000L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L);
      case 121:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(4, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, active1, active2, active3, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x4010000000000L, active2, 0x6000000002380L, active3, 0x20400000L);
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x200000000000L, active1, 0x1e00000000f00000L, active2, 0x400000200000L, active3, 0x8000780L);
      case 98:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0xc00L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x80000020000L, active1, 0x10000L, active2, 0x20000c00000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0L, active2, 0x100000000000000L, active3, 0L);
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 50, 39);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 51, 39);
         return jjMoveStringLiteralDfa7_1(active0, 0x20000000000L, active1, 0x8000008000000001L, active2, 0x10c0000000000001L, active3, 0x19e058L);
      case 102:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(6, 158);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(6, 168);
         return jjMoveStringLiteralDfa7_1(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(6, 164);
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L);
      case 104:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x6000c040000L, active2, 0x18000c04000000L, active3, 0x13000000L);
      case 108:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(6, 165);
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x70000010L, active2, 0x2000000eL, active3, 0x1800L);
      case 109:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(6, 19, 39);
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x101800000003c0L, active2, 0x80010000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x1000000000000000L, active1, 0L, active2, 0x1800000100000L, active3, 0x40000L);
      case 112:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0L, active2, 0x100000000000L, active3, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x2000L, active2, 0x10L, active3, 0L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(6, 33, 39);
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(6, 166);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(6, 173);
         else if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x1e00000000000L, active2, 0x4800000000088000L, active3, 0x4000007L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(6, 28, 39);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(6, 95, 39);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(6, 144);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(6, 160, 39);
         return jjMoveStringLiteralDfa7_1(active0, 0x10000000000000L, active1, 0x6000000000000000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x8000000L, active1, 0x1202000000L, active2, 0xc00L, active3, 0L);
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 36, 39);
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x100000000000000L, active2, 0x80000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(5, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, active1, active2, active3, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x100000000000000L, active2, 0x4800000000008000L, active3, 0x4020007L);
      case 97:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x200000000c03c0L, active2, 0x800c00000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x2000000L, active2, 0x6000000000300L, active3, 0x3000780L);
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0x200000000000L, active1, 0x200000000L, active2, 0x200000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x8000000000L, active2, 0x1000000000100000L, active3, 0x6040L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(7, 68, 39);
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(7, 130, 39);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(7, 131, 39);
         else if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active0, 0x10080000000000L, active1, 0x1800040000000L, active2, 0x100000000c00L, active3, 0x20001000L);
      case 102:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0xa00000L, active2, 0L, active3, 0L);
      case 103:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 116, 39);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(7, 171);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0xc000000L, active2, 0x10000000L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x6000000000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x1800610000000000L, active2, 0x80L, active3, 0L);
      case 108:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(7, 92, 39);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0L, active2, 0x20000002L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa8_1(active0, 0x1000020000000000L, active1, 0x8600061000000001L, active2, 0x1L, active3, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x2000L, active2, 0x18000004000000L, active3, 0x10000000L);
      case 112:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 57, 39);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L);
      case 114:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 175, 39);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x4000000000000L, active2, 0x2000L, active3, 0x40400000L);
      case 115:
         if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0L, active2, 0x80400000080010L, active3, 0x110010L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(7, 17, 39);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(7, 169);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0L, active2, 0x400000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0L, active2, 0x101000000000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x180000500000L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(6, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, active1, active2, active3, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x40000800L, active2, 0x80000010000010L, active3, 0x157010L);
      case 97:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x4000180000500000L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0L, active2, 0x100000200000L, active3, 0L);
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 52, 39);
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 45, 39);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(8, 159);
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x4000000a00000L, active2, 0x6000020002300L, active3, 0x400000L);
      case 102:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(8, 135, 39);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0x1000000000000000L, active1, 0x200006000c000000L, active2, 0x400180000L, active3, 0L);
      case 108:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x20401c0L, active2, 0x800000L, active3, 0x3000780L);
      case 110:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(8, 154);
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x1800610000000000L, active2, 0x118000800000000L, active3, 0x10000000L);
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0x40000006L);
      case 112:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0x8000000L);
      case 114:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 176, 39);
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x100000000000000L, active2, 0x4800000000008000L, active3, 0x1L);
      case 115:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x1000000000000L, active2, 0x400000000800L, active3, 0x20000L);
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_1(8, 64, 39);
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_1(active0, 0x20000000000L, active1, 0x8400000200082000L, active2, 0x1L, active3, 0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x8000000000L, active2, 0x1000000000000000L, active3, 0x40L);
      case 120:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000L);
      case 121:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(8, 129, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(7, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(7, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, active1, active2, active3, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x401000000f001c0L, active2, 0x800L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x1000000000L, active2, 0x18000400000000L, active3, 0x30000000L);
      case 98:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0x6000L);
      case 100:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x4000000000000L, active2, 0x100000000002000L, active3, 0x400000L);
      case 101:
         if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x100000000002000L, active2, 0x4800000000208000L, active3, 0x2000501L);
      case 102:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 43, 39);
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0L, active2, 0x100010L, active3, 0L);
      case 103:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x400000000000L, active2, 0x80000L, active3, 0x40000000L);
      case 104:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(9, 83);
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0L, active2, 0x6000000000300L, active3, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x10002040000L, active2, 0x500000000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x20000000000000L, active2, 0x20800000L, active3, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x200006800c000000L, active2, 0x1000000000000000L, active3, 0x46L);
      case 111:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x180000000800L, active2, 0x80000000000000L, active3, 0x151010L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 41, 39);
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0L, active2, 0x10000001L, active3, 0L);
      case 116:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(9, 126);
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x1000000000000000L, active2, 0x800400000L, active3, 0L);
      case 122:
         return jjMoveStringLiteralDfa10_1(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa10_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(8, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0, active1, active2, active3, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x1000400000000000L, active2, 0x800000001L, active3, 0x2000500L);
      case 97:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0L, active2, 0x106000000000300L, active3, 0x4020000L);
      case 99:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(10, 89, 39);
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x2180L, active2, 0L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x100008000000000L, active2, 0x5800000000008000L, active3, 0x41L);
      case 101:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(10, 117, 39);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(10, 219, 39);
         return jjMoveStringLiteralDfa11_1(active0, 0x1000000000000000L, active1, 0x800L, active2, 0x80000020800000L, active3, 0x151010L);
      case 102:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0L, active2, 0x100000000000L, active3, 0L);
      case 103:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(10, 125);
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x40000000000L, active2, 0x400000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x180000000000L, active2, 0x100000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0L, active2, 0x18000400000000L, active3, 0x10000006L);
      case 109:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0xf00000L, active2, 0L, active3, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x1000000000L, active2, 0x80000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 114:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(10, 97, 39);
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x401000000000000L, active2, 0x800L, active3, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x40L, active2, 0x200000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x1000c000000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x4000000000000L, active2, 0x402000L, active3, 0x400000L);
      case 121:
         if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0x4000L);
      case 122:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa11_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(9, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0, active1, active2, active3, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x4004c000000L, active2, 0x18000000000000L, active3, 0x10004000L);
      case 97:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x188000f00080L, active2, 0x1000000010000000L, active3, 0x40000040L);
      case 99:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L);
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(11, 60, 39);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(11, 151);
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x800L, active2, 0x80000000000000L, active3, 0x151010L);
      case 101:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x401000000040000L, active2, 0x180800L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x10000000000L, active2, 0x100400000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x4000000000000L, active2, 0x100400000002000L, active3, 0x400000L);
      case 112:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x40L, active2, 0L, active3, 0x20000000L);
      case 114:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(11, 132, 39);
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x1000400000000000L, active2, 0x400001L, active3, 0x2000500L);
      case 115:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0L);
      case 116:
         if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(11, 218, 39);
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x1000002000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x100000000000000L, active2, 0x4800000000008000L, active3, 0x1L);
      case 118:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0L, active2, 0x6000000000300L, active3, 0L);
      case 121:
         if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x4L);
      default :
         break;
   }
   return jjStartNfa_1(10, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa12_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(10, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, 0L, active1, active2, active3, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa13_1(active1, 0L, active2, 0L, active3, 0x4L);
      case 97:
         return jjMoveStringLiteralDfa13_1(active1, 0x10000000100L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa13_1(active1, 0L, active2, 0x18000000000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_1(active1, 0L, active2, 0x10000000L, active3, 0L);
      case 100:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(12, 82, 39);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(12, 147);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(12, 148);
         return jjMoveStringLiteralDfa13_1(active1, 0x405000040000000L, active2, 0x2800L, active3, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa13_1(active1, 0x1000400000002040L, active2, 0x500020600001L, active3, 0x12020500L);
      case 105:
         return jjMoveStringLiteralDfa13_1(active1, 0L, active2, 0x6000000000300L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa13_1(active1, 0x1000000000L, active2, 0L, active3, 0x20000000L);
      case 109:
         if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(12, 222, 39);
         return jjMoveStringLiteralDfa13_1(active1, 0xc000000L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa13_1(active1, 0x100188000000000L, active2, 0x5800000000008000L, active3, 0x41L);
      case 111:
         return jjMoveStringLiteralDfa13_1(active1, 0L, active2, 0x800000000L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_1(active1, 0x40000000000L, active2, 0L, active3, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa13_1(active1, 0x80L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_1(active1, 0xf00000L, active2, 0x100000000000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa13_1(active1, 0x800L, active2, 0x80000000000000L, active3, 0x151010L);
      case 122:
         return jjMoveStringLiteralDfa13_1(active1, 0L, active2, 0x400000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(11, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa13_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(11, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(12, 0L, active1, active2, active3, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa14_1(active1, 0L, active2, 0L, active3, 0x20000L);
      case 97:
         return jjMoveStringLiteralDfa14_1(active1, 0x400000c000000L, active2, 0x2000L, active3, 0x400000L);
      case 99:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(13, 70);
         break;
      case 100:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(13, 77, 39);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(13, 149);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(13, 150);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(13, 172);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(13, 174);
         return jjMoveStringLiteralDfa14_1(active1, 0x1100400000000000L, active2, 0x4800000000008001L, active3, 0x2000501L);
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(13, 71);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(13, 156);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(13, 221, 39);
         return jjMoveStringLiteralDfa14_1(active1, 0x40040000000L, active2, 0x18000400000000L, active3, 0x4000L);
      case 104:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(13, 84, 39);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(13, 85, 39);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(13, 86, 39);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(13, 87, 39);
         break;
      case 108:
         return jjMoveStringLiteralDfa14_1(active1, 0x10000000000L, active2, 0x100000000000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa14_1(active1, 0x800L, active2, 0x80000020000000L, active3, 0x151010L);
      case 111:
         return jjMoveStringLiteralDfa14_1(active1, 0L, active2, 0x6000000000300L, active3, 0L);
      case 114:
         if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(13, 163);
         return jjMoveStringLiteralDfa14_1(active1, 0L, active2, 0L, active3, 0x4L);
      case 116:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_1(active1, 0x108000000000L, active2, 0x1000000000000000L, active3, 0x40L);
      case 117:
         return jjMoveStringLiteralDfa14_1(active1, 0x401000000000100L, active2, 0x800L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa14_1(active1, 0L, active2, 0L, active3, 0x10000000L);
      case 121:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(13, 100, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(12, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa14_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(12, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(13, 0L, active1, active2, active3, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_1(active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa15_1(active1, 0x100000000000000L, active2, 0x4800000000008000L, active3, 0x10000001L);
      case 100:
         if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(14, 162);
         return jjMoveStringLiteralDfa15_1(active1, 0x40000000800L, active2, 0x80000000000000L, active3, 0x155010L);
      case 101:
         return jjMoveStringLiteralDfa15_1(active1, 0L, active2, 0L, active3, 0x4L);
      case 102:
         return jjMoveStringLiteralDfa15_1(active1, 0x40000000L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa15_1(active1, 0L, active2, 0x18000000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa15_1(active1, 0x10000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa15_1(active1, 0x8000000000L, active2, 0x1000000000000000L, active3, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa15_1(active1, 0x405000000000000L, active2, 0x2800L, active3, 0x400000L);
      case 114:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(14, 136, 39);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(14, 177, 39);
         return jjMoveStringLiteralDfa15_1(active1, 0L, active2, 0L, active3, 0x20000L);
      case 115:
         return jjMoveStringLiteralDfa15_1(active1, 0x100L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa15_1(active1, 0xc000000L, active2, 0x20000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa15_1(active1, 0x1000400000000000L, active2, 0x4000000000201L, active3, 0x2000500L);
      case 121:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(14, 184, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(13, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa15_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(13, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(14, 0L, active1, active2, active3, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_1(active1, 0x40000800L, active2, 0x98000000000000L, active3, 0x151010L);
      case 100:
         return jjMoveStringLiteralDfa16_1(active1, 0x401000000000000L, active2, 0x800L, active3, 0x4L);
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(15, 72);
         return jjMoveStringLiteralDfa16_1(active1, 0L, active2, 0L, active3, 0x20000L);
      case 104:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(15, 90, 39);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(15, 91, 39);
         break;
      case 109:
         return jjMoveStringLiteralDfa16_1(active1, 0L, active2, 0L, active3, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa16_1(active1, 0x1100400000000000L, active2, 0x4800000000008001L, active3, 0x2000501L);
      case 114:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(15, 137, 39);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(15, 178, 39);
         return jjMoveStringLiteralDfa16_1(active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 115:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(15, 157);
         break;
      case 116:
         return jjMoveStringLiteralDfa16_1(active1, 0x4000000000000L, active2, 0x2000L, active3, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa16_1(active1, 0x40000000000L, active2, 0L, active3, 0x4000L);
      case 121:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(15, 103, 39);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(15, 188, 39);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(15, 198, 39);
         break;
      case 122:
         return jjMoveStringLiteralDfa16_1(active1, 0x10000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(14, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa16_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(14, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(15, 0L, active1, active2, active3, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa17_1(active1, 0x401000000000000L, active2, 0x800L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa17_1(active1, 0x1000400000000000L, active2, 0x1L, active3, 0x2020500L);
      case 101:
         return jjMoveStringLiteralDfa17_1(active1, 0x110000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa17_1(active1, 0x4000000000000L, active2, 0x2000L, active3, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa17_1(active1, 0x40000000800L, active2, 0x80000000000000L, active3, 0x155010L);
      case 112:
         return jjMoveStringLiteralDfa17_1(active1, 0L, active2, 0L, active3, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa17_1(active1, 0x100000000000000L, active2, 0x4800000000008000L, active3, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa17_1(active1, 0x40000000L, active2, 0L, active3, 0x4L);
      case 118:
         return jjMoveStringLiteralDfa17_1(active1, 0L, active2, 0x18000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(15, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa17_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(15, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(16, 0L, active1, active2, active3, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_1(active1, 0x1000400000000000L, active2, 0x1L, active3, 0x2000500L);
      case 100:
         return jjMoveStringLiteralDfa18_1(active1, 0x140000000000L, active2, 0L, active3, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa18_1(active1, 0L, active2, 0x18000000000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa18_1(active1, 0x100000040000000L, active2, 0x4800000000008000L, active3, 0x10000001L);
      case 110:
         return jjMoveStringLiteralDfa18_1(active1, 0x401000000000000L, active2, 0x800L, active3, 0x4L);
      case 114:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(17, 104, 39);
         break;
      case 116:
         return jjMoveStringLiteralDfa18_1(active1, 0x800L, active2, 0x80000000000000L, active3, 0x151010L);
      case 117:
         return jjMoveStringLiteralDfa18_1(active1, 0L, active2, 0L, active3, 0x20000L);
      case 121:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(17, 114, 39);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(17, 141, 39);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(17, 214, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(16, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa18_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(16, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(17, 0L, active1, active2, active3, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa19_1(active1, 0x40000000000L, active2, 0L, active3, 0x4000L);
      case 100:
         return jjMoveStringLiteralDfa19_1(active1, 0L, active2, 0L, active3, 0x4L);
      case 101:
         if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(18, 220, 39);
         break;
      case 108:
         return jjMoveStringLiteralDfa19_1(active1, 0x800L, active2, 0x80000000000000L, active3, 0x151010L);
      case 110:
         return jjMoveStringLiteralDfa19_1(active1, 0x1000400000000000L, active2, 0x1L, active3, 0x2020500L);
      case 111:
         return jjMoveStringLiteralDfa19_1(active1, 0L, active2, 0x18000000000000L, active3, 0L);
      case 116:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(18, 94, 39);
         return jjMoveStringLiteralDfa19_1(active1, 0x401000000000000L, active2, 0x800L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa19_1(active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(18, 120, 39);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(18, 143, 39);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(18, 187, 39);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_1(18, 190, 39);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_1(18, 192, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(17, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa19_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(17, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(18, 0L, active1, active2, active3, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa20_1(active1, 0L, active2, 0L, active3, 0x4L);
      case 100:
         return jjMoveStringLiteralDfa20_1(active1, 0L, active2, 0L, active3, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa20_1(active1, 0x401000000000000L, active2, 0x800L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa20_1(active1, 0x140000000000L, active2, 0L, active3, 0x4000L);
      case 114:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(19, 179, 39);
         break;
      case 116:
         return jjMoveStringLiteralDfa20_1(active1, 0x1000400000000000L, active2, 0x1L, active3, 0x2000500L);
      case 117:
         return jjMoveStringLiteralDfa20_1(active1, 0L, active2, 0x10000000000000L, active3, 0L);
      case 121:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(19, 75, 39);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(19, 183, 39);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(19, 196, 39);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(19, 204, 39);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(19, 208, 39);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(19, 210, 39);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(19, 212, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(18, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa20_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(18, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(19, 0L, active1, active2, active3, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_1(active1, 0L, active2, 0L, active3, 0x20000L);
      case 100:
         return jjMoveStringLiteralDfa21_1(active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa21_1(active1, 0x1000400000000000L, active2, 0x1L, active3, 0x2000500L);
      case 110:
         return jjMoveStringLiteralDfa21_1(active1, 0L, active2, 0L, active3, 0x4L);
      case 114:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(20, 180, 39);
         break;
      case 116:
         return jjMoveStringLiteralDfa21_1(active1, 0x40000000000L, active2, 0L, active3, 0x4000L);
      case 121:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(20, 112, 39);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(20, 122, 39);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(20, 139, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(19, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa21_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(19, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(20, 0L, active1, active2, active3, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa22_1(active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa22_1(active1, 0x40000000000L, active2, 0L, active3, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa22_1(active1, 0L, active2, 0L, active3, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa22_1(active1, 0L, active2, 0L, active3, 0x4L);
      case 121:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(21, 110, 39);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(21, 124, 39);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_1(21, 128, 39);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(21, 200, 39);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(21, 202, 39);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(21, 217, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(20, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa22_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(20, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(21, 0L, active1, 0L, active3, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa23_1(active1, 0L, active3, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa23_1(active1, 0x100000000000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa23_1(active1, 0L, active3, 0x20000L);
      case 121:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(22, 106, 39);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(22, 206, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(21, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa23_1(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(21, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(22, 0L, active1, 0L, active3, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa24_1(active1, 0L, active3, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa24_1(active1, 0x100000000000L, active3, 0L);
      case 121:
         if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(23, 194, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(22, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa24_1(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(22, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(23, 0L, active1, 0L, active3, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa25_1(active1, 0x100000000000L, active3, 0L);
      case 121:
         if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(24, 209, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(23, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa25_1(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(23, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(24, 0L, active1, 0L, 0L, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 121:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(25, 108, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(24, 0L, active1, 0L, 0L, 0L);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 59;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 39:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 34:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 59:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(49, 51);
                  else if (curChar == 39)
                     jjAddStates(52, 53);
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 223)
                        kind = 223;
                     jjCheckNAddTwoStates(4, 5);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 223)
                        kind = 223;
                     jjCheckNAddStates(54, 56);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddStates(57, 59);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if (curChar == 39)
                     jjAddStates(52, 53);
                  break;
               case 13:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if (curChar == 39 && kind > 229)
                     kind = 229;
                  break;
               case 16:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 14);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 19:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 21:
                  if (curChar == 34)
                     jjCheckNAddStates(49, 51);
                  break;
               case 22:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 24:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 25:
                  if (curChar == 34 && kind > 230)
                     kind = 230;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(60, 63);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 28:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 38:
                  if (curChar != 36)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar != 46)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddStates(64, 66);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddStates(64, 66);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddTwoStates(46, 11);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 227)
                     kind = 227;
                  jjCheckNAddTwoStates(50, 11);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 11);
                  break;
               case 55:
                  if (curChar != 48)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddStates(54, 56);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddTwoStates(57, 5);
                  break;
               case 58:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddTwoStates(58, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(30);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(30);
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 231)
                        kind = 231;
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 5:
                  if ((0x100000001000L & l) != 0L && kind > 223)
                     kind = 223;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 11:
                  if ((0x5000000050L & l) != 0L && kind > 227)
                     kind = 227;
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 92)
                     jjAddStates(72, 74);
                  break;
               case 16:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 23:
                  if (curChar == 92)
                     jjAddStates(75, 77);
                  break;
               case 24:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 30:
                  if (curChar == 101 && kind > 231)
                     kind = 231;
                  break;
               case 33:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 37:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(80, 81);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(82, 83);
                  break;
               case 56:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 223)
                     kind = 223;
                  jjCheckNAddTwoStates(57, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 39:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 34:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 36:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 31:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 59:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(39);
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(49, 51);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 59 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   42, 43, 48, 49, 52, 53, 12, 23, 24, 26, 14, 16, 57, 59, 6, 8, 
   9, 12, 23, 24, 28, 26, 44, 45, 12, 52, 53, 12, 10, 11, 17, 18, 
   20, 25, 27, 29, 46, 47, 50, 51, 54, 55, 41, 42, 47, 48, 51, 52, 
   11, 22, 23, 25, 13, 15, 56, 58, 5, 7, 8, 11, 22, 23, 27, 25, 
   43, 44, 11, 51, 52, 11, 9, 10, 16, 17, 19, 24, 26, 28, 45, 46, 
   49, 50, 53, 54, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\141\142\163\164\162\141\143\164", 
"\141\163\163\145\162\164", "\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", 
"\143\141\163\145", "\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", 
"\143\157\156\163\164", "\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", 
"\144\157", "\144\157\165\142\154\145", "\145\154\163\145", "\145\156\165\155", 
"\145\170\164\145\156\144\163", "\146\141\154\163\145", "\146\151\156\141\154", 
"\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", "\147\157\164\157", "\151\146", 
"\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", 
"\151\156\164", "\151\156\164\145\162\146\141\143\145", "\154\157\156\147", 
"\156\141\164\151\166\145", "\156\145\167", "\156\165\154\154", "\160\141\143\153\141\147\145", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\164\165\162\156", "\163\150\157\162\164", "\163\164\141\164\151\143", 
"\163\164\162\151\143\164\146\160", "\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", 
"\134\157\162\151\147\151\156\141\154\137\163\160\145\143", "\134\157\162\151\147\151\156\141\154\137\143\141\163\145", 
"\134\157\162\151\147\151\156\141\154\137\143\154\141\165\163\145", "\134\157\162\151\147\151\156\141\154", "\150\145\156\143\145\137\142\171", 
"\150\145\156\143\145\137\142\171\137\162\145\144\165\156\144\141\156\164\154\171", "\155\157\144\145\154", 
"\163\160\145\143\137\160\162\157\164\145\143\164\145\144", "\147\150\157\163\164", "\160\165\162\145", 
"\151\156\163\164\141\156\143\145", "\150\145\154\160\145\162", 
"\165\156\151\156\151\164\151\141\154\151\172\145\144", "\134\152\141\166\141\137\155\141\164\150", 
"\163\160\145\143\137\152\141\166\141\137\155\141\164\150", "\163\160\145\143\137\163\141\146\145\137\155\141\164\150", 
"\143\157\144\145\137\152\141\166\141\137\155\141\164\150", "\143\157\144\145\137\163\141\146\145\137\155\141\164\150", 
"\141\154\163\157", "\163\160\145\143\137\160\165\142\154\151\143", 
"\163\160\145\143\137\142\151\147\151\156\164\137\155\141\164\150", "\143\157\144\145\137\142\151\147\151\156\164\137\155\141\164\150", 
"\156\157\156\137\156\165\154\154", "\156\165\154\154\141\142\154\145", 
"\156\165\154\154\141\142\154\145\137\142\171\137\144\145\146\141\165\154\164", "\145\170\164\162\141\143\164", "\155\145\164\150\157\144", 
"\143\157\156\163\164\162\165\143\164\157\162", "\134\124\131\120\105", "\151\156", 
"\151\156\137\162\145\144\165\156\144\141\156\164\154\171", "\134\151\156\164\157", "\155\141\160\163", 
"\155\141\160\163\137\162\145\144\165\156\144\141\156\164\154\171", "\163\164\141\164\151\143\137\151\156\151\164\151\141\154\151\172\145\162", 
"\155\141\151\156\164\141\151\156\151\156\147", 
"\155\141\151\156\164\141\151\156\151\156\147\137\162\145\144\165\156\144\141\156\164\154\171", "\154\157\157\160\137\151\156\166\141\162\151\141\156\164", 
"\154\157\157\160\137\151\156\166\141\162\151\141\156\164\137\162\145\144\165\156\144\141\156\164\154\171", "\144\145\143\162\145\141\163\151\156\147", 
"\144\145\143\162\145\141\163\151\156\147\137\162\145\144\165\156\144\141\156\164\154\171", "\144\145\143\162\145\141\163\145\163", 
"\144\145\143\162\145\141\163\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\141\163\163\165\155\145", 
"\141\163\163\165\155\145\137\162\145\144\165\156\144\141\156\164\154\171", "\163\145\164", "\162\145\146\151\156\151\156\147", 
"\165\156\162\145\141\143\150\141\142\154\145", "\144\145\142\165\147", "\150\145\156\143\145\142\171", 
"\150\145\156\143\145\142\171\137\162\145\144\165\156\144\141\156\164\154\171", "\151\156\166\141\162\151\141\156\164", 
"\151\156\166\141\162\151\141\156\164\137\162\145\144\165\156\144\141\156\164\154\171", "\143\157\156\163\164\162\141\151\156\164", 
"\143\157\156\163\164\162\141\151\156\164\137\162\145\144\165\156\144\141\156\164\154\171", "\134\145\166\145\162\171\164\150\151\156\147", 
"\134\163\165\143\150\137\164\150\141\164", "\162\145\160\162\145\163\145\156\164\163", 
"\162\145\160\162\145\163\145\156\164\163\137\162\145\144\165\156\144\141\156\164\154\171", "\151\156\151\164\151\141\154\154\171", "\162\145\141\144\141\142\154\145", 
"\167\162\151\164\141\142\154\145", "\155\157\156\151\164\157\162\163\137\146\157\162", 
"\143\150\157\157\163\145", "\157\162", "\143\150\157\157\163\145\137\151\146", 
"\141\142\162\165\160\164\137\142\145\150\141\166\151\157\162", "\141\142\162\165\160\164\137\142\145\150\141\166\151\157\165\162", 
"\143\157\156\164\151\156\165\145\163", 
"\143\157\156\164\151\156\165\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\142\162\145\141\153\163", 
"\142\162\145\141\153\163\137\162\145\144\165\156\144\141\156\164\154\171", "\162\145\164\165\162\156\163", 
"\162\145\164\165\162\156\163\137\162\145\144\165\156\144\141\156\164\154\171", "\134\162\145\163\165\154\164", "\134\157\154\144", "\134\160\162\145", 
"\134\156\157\164\137\141\163\163\151\147\156\145\144", "\134\156\157\164\137\155\157\144\151\146\151\145\144", 
"\134\157\156\154\171\137\141\143\143\145\163\163\145\144", "\134\157\156\154\171\137\143\141\160\164\165\162\145\144", 
"\134\157\156\154\171\137\143\141\154\154\145\144", "\134\146\162\145\163\150", "\134\162\145\141\143\150", 
"\134\144\165\162\141\164\151\157\156", "\163\160\141\143\145", 
"\134\167\157\162\153\151\156\147\137\163\160\141\143\145", "\134\156\157\156\156\165\154\154\145\154\145\155\145\156\164\163", 
"\134\164\171\160\145\157\146", "\134\145\154\145\155\164\171\160\145", "\154\157\143\153\163\145\164", 
"\134\155\141\170", "\134\151\163\137\151\156\151\164\151\141\154\151\172\145\144", 
"\134\151\156\166\141\162\151\141\156\164\137\146\157\162", "\134\154\142\154\156\145\147", "\134\146\157\162\141\154\154", 
"\134\145\170\151\163\164\163", "\134\155\151\156", "\134\156\165\155\137\157\146", 
"\134\160\162\157\144\165\143\164", "\134\163\165\155", "\134\156\157\164\150\151\156\147", 
"\134\156\157\164\137\163\160\145\143\151\146\151\145\144", "\134\154\142\154\160\157\163", 
"\134\157\156\154\171\137\141\163\163\151\147\156\145\144", "\142\145\150\141\166\151\157\162", "\142\145\150\141\166\151\157\165\162", 
"\156\157\162\155\141\154\137\142\145\150\141\166\151\157\162", "\156\157\162\155\141\154\137\142\145\150\141\166\151\157\165\162", 
"\145\170\143\145\160\164\151\157\156\141\154\137\142\145\150\141\166\151\157\162", 
"\145\170\143\145\160\164\151\157\156\141\154\137\142\145\150\141\166\151\157\165\162", "\163\141\155\145", "\162\145\161\165\151\162\145\163", 
"\162\145\161\165\151\162\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\160\162\145\137\162\145\144\165\156\144\141\156\164\154\171", 
"\145\156\163\165\162\145\163", "\160\157\163\164", 
"\145\156\163\165\162\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\160\157\163\164\137\162\145\144\165\156\144\141\156\164\154\171", 
"\163\151\147\156\141\154\163", 
"\163\151\147\156\141\154\163\137\162\145\144\165\156\144\141\156\164\154\171", "\145\170\163\165\162\145\163", 
"\145\170\163\165\162\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\163\151\147\156\141\154\163\137\157\156\154\171", 
"\163\151\147\156\141\154\163\137\157\156\154\171\137\162\145\144\165\156\144\141\156\164\154\171", "\144\151\166\145\162\147\145\163", 
"\144\151\166\145\162\147\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\167\150\145\156", 
"\167\150\145\156\137\162\145\144\165\156\144\141\156\164\154\171", "\141\163\163\151\147\156\141\142\154\145", 
"\141\163\163\151\147\156\141\142\154\145\137\162\145\144\165\156\144\141\156\164\154\171", "\155\157\144\151\146\151\141\142\154\145", 
"\155\157\144\151\146\151\141\142\154\145\137\162\145\144\165\156\144\141\156\164\154\171", "\143\141\154\154\141\142\154\145", 
"\143\141\154\154\141\142\154\145\137\162\145\144\165\156\144\141\156\164\154\171", "\155\145\141\163\165\162\145\144\137\142\171", 
"\155\145\141\163\165\162\145\144\137\142\171\137\162\145\144\165\156\144\141\156\164\154\171", "\143\141\160\164\165\162\145\163", 
"\143\141\160\164\165\162\145\163\137\162\145\144\165\156\144\141\156\164\154\171", 
"\167\157\162\153\151\156\147\137\163\160\141\143\145\137\162\145\144\165\156\144\141\156\164\154\171", 
"\144\165\162\141\164\151\157\156\137\162\145\144\165\156\144\141\156\164\154\171", "\155\157\144\151\146\151\145\163", 
"\155\157\144\151\146\151\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\143\157\144\145", 
"\141\163\163\145\162\164\137\162\145\144\165\156\144\141\156\164\154\171", "\141\170\151\157\155", "\141\143\143\145\163\163\151\142\154\145", 
"\141\143\143\145\163\163\151\142\154\145\137\162\145\144\165\156\144\141\156\164\154\171", "\151\155\160\154\151\145\163\137\164\150\141\164", 
"\146\157\162\137\145\170\141\155\160\154\145", 
"\145\170\143\145\160\164\151\157\156\141\154\137\145\170\141\155\160\154\145", "\156\157\162\155\141\154\137\145\170\141\155\160\154\145", 
"\155\157\144\145\154\137\160\162\157\147\162\141\155", null, null, null, null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\100", "\75", "\74", 
"\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", 
"\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", "\136", "\45", 
"\74\74", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", 
"\45\75", "\74\74\75", "\76\76\75", "\76\76\76\75", "\56\56\56", "\74\55", "\134", 
"\55\76", "\75\75\76", "\74\75\75", "\74\75\75\76", "\74\75\41\75\76", "\74\72", 
"\76\76\76", "\76\76", "\76", "\50\52", "\52\51", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_JML_SINGLE_LINE", 
   "IN_JML_MULTI_LINE", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 2, 0, 0, -1, 0, 3, 4, 5, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffe0001L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffff9e8ffffffffL, 
   0x1fffffffffL, 
};
static final long[] jjtoSkip = {
   0xc7feL, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
static final long[] jjtoSpecial = {
   0xc43eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
static final long[] jjtoMore = {
   0x13800L, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[60];
private final int[] jjstateSet = new int[120];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public JMLParserTokenManager(CharStream stream){
   input_stream = stream;
}
public JMLParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 60; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   t.offset = input_stream.getOffset();
   t.length = input_stream.getLength();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 16)
         {
            jjmatchedKind = 16;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 16)
         {
            jjmatchedKind = 16;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 16)
         {
            jjmatchedKind = 16;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 12 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}

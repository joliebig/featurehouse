/* Generated By:JavaCC: Do not edit this line. JMLParserTokenManager.java */
package tmp.generated_jml_contract_composition;
import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;
import cide.gparser.*;
public class JMLParserTokenManager implements JMLParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0xfL) != 0L)
         {
            jjmatchedKind = 233;
            return 33;
         }
         if ((active0 & 0x50c0L) != 0L || (active4 & 0x10080L) != 0L)
            return 2;
         if ((active0 & 0x3fffff07fffc0000L) != 0L || (active1 & 0x70L) != 0L)
         {
            jjmatchedKind = 233;
            return 40;
         }
         if ((active3 & 0x10000000000000L) != 0L || (active4 & 0x1000000L) != 0L)
            return 8;
         if ((active0 & 0xf800000000L) != 0L)
         {
            jjmatchedKind = 233;
            return 37;
         }
         return -1;
      case 1:
         if ((active0 & 0x4080L) != 0L)
            return 0;
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 1;
            }
            return 36;
         }
         if ((active0 & 0xfffffdf73ffc0000L) != 0L || (active1 & 0x71L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 1;
            }
            return 40;
         }
         if ((active0 & 0x200c0000000L) != 0L)
            return 40;
         if ((active1 & 0xeL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 1;
            }
            return 32;
         }
         return -1;
      case 2:
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 2;
            }
            return 35;
         }
         if ((active1 & 0x4L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 2;
            }
            return 60;
         }
         if ((active0 & 0x2608000000000L) != 0L || (active1 & 0x8L) != 0L)
            return 40;
         if ((active0 & 0xfffd9d77bffc0000L) != 0L || (active1 & 0x73L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 2;
            }
            return 40;
         }
         return -1;
      case 3:
         if ((active0 & 0xbff95c74bd3c0000L) != 0L || (active1 & 0x63L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 3;
            return 40;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 3;
            return 60;
         }
         if ((active0 & 0x4004810302c00000L) != 0L || (active1 & 0x14L) != 0L)
            return 40;
         return -1;
      case 4:
         if ((active0 & 0x36f95c04b01c0000L) != 0L || (active1 & 0x22L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 4;
            }
            return 40;
         }
         if ((active0 & 0x890000780d200000L) != 0L || (active1 & 0x41L) != 0L)
            return 40;
         return -1;
      case 5:
         if ((active0 & 0x12c1080080080000L) != 0L || (active1 & 0x1L) != 0L)
            return 40;
         if ((active0 & 0x2438542430140000L) != 0L || (active1 & 0x22L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 5;
            return 40;
         }
         return -1;
      case 6:
         if ((active0 & 0x2420540010040000L) != 0L || (active1 & 0x22L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 6;
            return 40;
         }
         if ((active0 & 0x18002420100000L) != 0L)
            return 40;
         return -1;
      case 7:
         if ((active0 & 0x2020540000000000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 7;
            return 40;
         }
         if ((active0 & 0x400000010040000L) != 0L || (active1 & 0x20L) != 0L)
            return 40;
         return -1;
      case 8:
         if ((active0 & 0x2000140000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 8;
            return 40;
         }
         if ((active0 & 0x20400000000000L) != 0L || (active1 & 0x2L) != 0L)
            return 40;
         return -1;
      case 9:
         if ((active0 & 0x140000000000L) != 0L)
            return 40;
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 9;
            return 40;
         }
         return -1;
      case 10:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 10;
            return 40;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         jjmatchedKind = 248;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 267;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x100000L);
      case 38:
         jjmatchedKind = 264;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x20002L);
      case 40:
         jjmatchedKind = 236;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1000000000L);
      case 41:
         return jjStopAtPos(0, 237);
      case 42:
         jjmatchedKind = 262;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x2000008000L);
      case 43:
         jjmatchedKind = 260;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x2004L);
      case 44:
         return jjStopAtPos(0, 243);
      case 45:
         jjmatchedKind = 261;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x8004008L);
      case 46:
         jjmatchedKind = 244;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1000000L);
      case 47:
         jjmatchedKind = 263;
         return jjMoveStringLiteralDfa1_0(0x50c0L, 0x0L, 0x0L, 0x10000L);
      case 58:
         return jjStopAtPos(0, 251);
      case 59:
         return jjStopAtPos(0, 242);
      case 60:
         jjmatchedKind = 247;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000000000000L, 0x1e2201000L);
      case 61:
         jjmatchedKind = 246;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000000000000L, 0x10000000L);
      case 62:
         jjmatchedKind = 291;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000000000L, 0x600c00000L);
      case 63:
         return jjStopAtPos(0, 250);
      case 64:
         return jjStopAtPos(0, 245);
      case 91:
         return jjStopAtPos(0, 240);
      case 92:
         return jjStopAtPos(0, 282);
      case 93:
         return jjStopAtPos(0, 241);
      case 94:
         jjmatchedKind = 266;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xc0000L, 0x0L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x700000L, 0x0L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1f800000L, 0x0L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xe0000000L, 0x0L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x700000000L, 0x0L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xf800000000L, 0x0L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7e0000000000L, 0x0L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x7000000000000L, 0x0L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x78000000000000L, 0x0L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x3f00000000000000L, 0x0L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0xfL, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 238);
      case 124:
         jjmatchedKind = 265;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x40001L);
      case 125:
         return jjStopAtPos(0, 239);
      case 126:
         return jjStopAtPos(0, 249);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, 0L, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active4 & 0x2L) != 0L)
            return jjStopAtPos(1, 257);
         break;
      case 41:
         if ((active4 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 293);
         break;
      case 42:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 292);
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L, active3, 0L, active4, 0L);
      case 43:
         if ((active4 & 0x4L) != 0L)
            return jjStopAtPos(1, 258);
         break;
      case 45:
         if ((active4 & 0x8L) != 0L)
            return jjStopAtPos(1, 259);
         else if ((active4 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 281);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x1000000L);
      case 47:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L, active3, 0L, active4, 0L);
      case 58:
         if ((active4 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 288);
         break;
      case 60:
         if ((active4 & 0x1000L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x200000L);
      case 61:
         if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 254);
         else if ((active3 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 255);
         else if ((active4 & 0x2000L) != 0L)
            return jjStopAtPos(1, 269);
         else if ((active4 & 0x4000L) != 0L)
            return jjStopAtPos(1, 270);
         else if ((active4 & 0x8000L) != 0L)
            return jjStopAtPos(1, 271);
         else if ((active4 & 0x10000L) != 0L)
            return jjStopAtPos(1, 272);
         else if ((active4 & 0x20000L) != 0L)
            return jjStopAtPos(1, 273);
         else if ((active4 & 0x40000L) != 0L)
            return jjStopAtPos(1, 274);
         else if ((active4 & 0x80000L) != 0L)
            return jjStopAtPos(1, 275);
         else if ((active4 & 0x100000L) != 0L)
            return jjStopAtPos(1, 276);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active3, 0L, active4, 0xf0000000L);
      case 62:
         if ((active4 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 283);
         else if ((active4 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 290;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x200c00000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x9000801800000L, active1, 0L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x82000020000000L, active1, 0L, active3, 0L, active4, 0L);
      case 102:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 41, 40);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xc100000002000000L, active1, 0x41L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4104000000L, active1, 0L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x700200000000L, active1, 0L, active3, 0L, active4, 0L);
      case 111:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x818098100000L, active1, 0x30L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000200000L, active1, 0xeL, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L, active3, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x844000000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000400000L, active1, 0L, active3, 0L, active4, 0L);
      case 124:
         if ((active4 & 0x1L) != 0L)
            return jjStopAtPos(1, 256);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, 0L, active3, active4);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(0, old0, old1, 0L, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L, 0L, active4);
      return 2;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active4, 0x80000000L);
      case 46:
         if ((active4 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 280);
         break;
      case 61:
         if ((active4 & 0x200000L) != 0L)
            return jjStopAtPos(2, 277);
         else if ((active4 & 0x400000L) != 0L)
            return jjStopAtPos(2, 278);
         else if ((active4 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 285;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active4, 0x40000000L);
      case 62:
         if ((active4 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 284);
         else if ((active4 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 289;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active4, 0x800000L);
      case 64:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(2, 6);
         else if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(2, 7);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000006000000L, active1, 0x2L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x5010000000000000L, active1, 0x50L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000800000000L, active1, 0x20L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000803018000000L, active1, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x120004000100000L, active1, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000c0000000000L, active1, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x8400000000000000L, active1, 0x1L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1001008c0000L, active1, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x81410401400000L, active1, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x280000000L, active1, 0x4L, active4, 0L);
      case 119:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 40);
         break;
      case 121:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L, 0L, active4);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active4 & 0x800000L) != 0L)
            return jjStopAtPos(3, 279);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active4, 0x80000000L);
      case 62:
         if ((active4 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 286);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x7020200000L, active1, 0x20L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000001000000L, active1, 0L, active4, 0L);
      case 100:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 40);
         break;
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 40);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 40);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 40);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x800400400080000L, active1, 0L, active4, 0L);
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x401000000000000L, active1, 0L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L, active4, 0L);
      case 108:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x40040000100000L, active1, 0x40L, active4, 0L);
      case 109:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 40);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L, active4, 0L);
      case 111:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000080000000000L, active1, 0x1L, active4, 0L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L, active4, 0L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x80c000000L, active1, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1220100010040000L, active1, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L, 0L, active4);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active4 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 287);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x18100000000000L, active1, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1400000000000000L, active1, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 40);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x20040000100000L, active1, 0L, active4, 0L);
      case 104:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x240000010000000L, active1, 0L, active4, 0L);
      case 107:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 40);
         break;
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2080000000L, active1, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x804800000c0000L, active1, 0L, active4, 0L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L, active4, 0L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 40);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 40);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L, active4, 0L);
      case 119:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L, 0L, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x140000L, active1, 0L);
      case 99:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 40);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 40);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 40);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x22L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2020000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x100010000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 40);
         break;
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 40);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x410000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L, 0L, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000040000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 40);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0x2L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 40);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 40);
         break;
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L);
      case 121:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 40);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0x20100000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000040000000000L, active1, 0x2L);
      case 112:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 40);
         break;
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 53, 40);
         break;
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 46, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 65, 40);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 44, 40);
         break;
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 40);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 61, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 60;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 40:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 37:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 33:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 36)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(40);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(8);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 224)
                        kind = 224;
                     jjCheckNAddTwoStates(5, 6);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 224)
                        kind = 224;
                     jjCheckNAddStates(12, 14);
                  }
                  break;
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 60:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddStates(15, 17);
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 14:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if (curChar == 39 && kind > 230)
                     kind = 230;
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 15);
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 20:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 22:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 23:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 25:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 26:
                  if (curChar == 34 && kind > 231)
                     kind = 231;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 39:
                  if (curChar != 36)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar != 46)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddStates(22, 24);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddStates(22, 24);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddTwoStates(47, 12);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddTwoStates(51, 12);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 12);
                  break;
               case 56:
                  if (curChar != 48)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddStates(12, 14);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddTwoStates(58, 6);
                  break;
               case 59:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddTwoStates(59, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(31);
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(31);
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 232)
                        kind = 232;
                  }
                  break;
               case 1:
                  if (kind > 13)
                     kind = 13;
                  break;
               case 6:
                  if ((0x100000001000L & l) != 0L && kind > 224)
                     kind = 224;
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 12:
                  if ((0x5000000050L & l) != 0L && kind > 228)
                     kind = 228;
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(30, 32);
                  break;
               case 17:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 24:
                  if (curChar == 92)
                     jjAddStates(33, 35);
                  break;
               case 25:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 31:
                  if (curChar == 101 && kind > 232)
                     kind = 232;
                  break;
               case 34:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 38:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 57:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddTwoStates(58, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 40:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 37:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 36:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 33:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 60:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(40);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 13)
                     kind = 13;
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 60 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_5(0x10000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2L) != 0L)
            return 0;
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0xfL) != 0L)
         {
            jjmatchedKind = 233;
            return 32;
         }
         if ((active0 & 0x3fffff07fffc0000L) != 0L || (active1 & 0x3fffffb7ffeff870L) != 0L || (active2 & 0xffff00021001ffffL) != 0L || (active3 & 0xefffffffL) != 0L)
         {
            jjmatchedKind = 233;
            return 39;
         }
         if ((active0 & 0xf800000000L) != 0L || (active3 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 233;
            return 36;
         }
         if ((active3 & 0x10000000000000L) != 0L || (active4 & 0x1000000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 1;
            }
            return 35;
         }
         if ((active0 & 0xffff8df73ffc0000L) != 0L || (active1 & 0x33ffff87ffedf871L) != 0L || (active2 & 0xffff00021001ff7bL) != 0L || (active3 & 0xffffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 1;
            }
            return 39;
         }
         if ((active1 & 0xeL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 1;
            }
            return 31;
         }
         if ((active0 & 0x7200c0000000L) != 0L || (active1 & 0xc00003000020000L) != 0L || (active2 & 0x84L) != 0L)
            return 39;
         return -1;
      case 2:
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 2;
            }
            return 34;
         }
         if ((active1 & 0x4L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 2;
            }
            return 59;
         }
         if ((active0 & 0x2608000000000L) != 0L || (active1 & 0x10000000000008L) != 0L || (active3 & 0x10000000L) != 0L)
            return 39;
         if ((active0 & 0xfffd9d77bffc0000L) != 0L || (active1 & 0x3fefffa7ffeff873L) != 0L || (active2 & 0xffff00021001ff7fL) != 0L || (active3 & 0xefffffffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 2;
            }
            return 39;
         }
         return -1;
      case 3:
         if ((active0 & 0xbff95c74bd3c0000L) != 0L || (active1 & 0x3feffe272c6ef863L) != 0L || (active2 & 0xd7bf00021001ff7fL) != 0L || (active3 & 0xffbfff3fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 3;
            }
            return 39;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 3;
            }
            return 59;
         }
         if ((active0 & 0x4004810302c00000L) != 0L || (active1 & 0x180d3810014L) != 0L || (active2 & 0x2840000000000000L) != 0L || (active3 & 0x4000c0L) != 0L)
            return 39;
         return -1;
      case 4:
         if ((active0 & 0x36f95c04b01c0000L) != 0L || (active1 & 0xf6fff23fdee5822L) != 0L || (active2 & 0xf7bf000200019f7fL) != 0L || (active3 & 0x7ebfffbfL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 4;
            }
            return 39;
         }
         if ((active0 & 0x890000780d200000L) != 0L || (active1 & 0x308000040000a041L) != 0L || (active2 & 0x10006000L) != 0L || (active3 & 0x81000000L) != 0L)
            return 39;
         return -1;
      case 5:
         if ((active0 & 0x12c1080080080000L) != 0L || (active1 & 0xc020200040001L) != 0L || (active2 & 0x1e140L) != 0L || (active3 & 0x800000L) != 0L)
            return 39;
         if ((active0 & 0x2438542430140000L) != 0L || (active1 & 0x3f63fd25fdea5822L) != 0L || (active2 & 0xf7bf000200001e3fL) != 0L || (active3 & 0xfe3fffbfL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 5;
            }
            return 39;
         }
         return -1;
      case 6:
         if ((active0 & 0x2420540010040000L) != 0L || (active1 & 0x3c6bff24fdea5822L) != 0L || (active2 & 0x23bf000000005f3fL) != 0L || (active3 & 0xfebfffb0L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 6;
            }
            return 39;
         }
         if ((active0 & 0x18002420100000L) != 0L || (active1 & 0x300000100000000L) != 0L || (active2 & 0xd400000200018000L) != 0L || (active3 & 0xfL) != 0L)
            return 39;
         return -1;
      case 7:
         if ((active0 & 0x2020440000000000L) != 0L || (active1 & 0x3e4bff241de84002L) != 0L || (active2 & 0xb23e000000014727L) != 0L || (active3 & 0xfe8ccf8eL) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 7;
            }
            return 39;
         }
         if ((active0 & 0x400100010040000L) != 0L || (active1 & 0x200000e0021820L) != 0L || (active2 & 0x181000000001818L) != 0L || (active3 & 0x333030L) != 0L)
            return 39;
         return -1;
      case 8:
         if ((active0 & 0x2000140000000000L) != 0L || (active1 & 0x3248ff249de85000L) != 0L || (active2 & 0xb33c000000014623L) != 0L || (active3 & 0xfeaeefaeL) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 8;
            }
            return 39;
         }
         if ((active0 & 0x20400000000000L) != 0L || (active1 & 0xc03000000000002L) != 0L || (active2 & 0x2000000001904L) != 0L)
            return 39;
         return -1;
      case 9:
         if ((active0 & 0x140000000000L) != 0L || (active1 & 0x3000c00000000000L) != 0L || (active2 & 0x3L) != 0L || (active3 & 0x6000f00L) != 0L)
            return 39;
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0xa4a3f249de85000L) != 0L || (active2 & 0xb33c000000015620L) != 0L || (active3 & 0xf8aee0aeL) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 9;
            }
            return 39;
         }
         return -1;
      case 10:
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x2a0ab32099e85000L) != 0L || (active2 & 0xb33c000000015622L) != 0L || (active3 & 0xecae2aaeL) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 10;
            }
            return 39;
         }
         if ((active1 & 0x400c0404000000L) != 0L || (active3 & 0x1000c000L) != 0L)
            return 39;
         return -1;
      case 11:
         if ((active0 & 0x2000000000000000L) != 0L || (active2 & 0x20L) != 0L || (active3 & 0x800000cL) != 0L)
            return 39;
         if ((active1 & 0x2a0abb2099e85000L) != 0L || (active2 & 0xb33c000000015602L) != 0L || (active3 & 0xe4aeaaa2L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 11;
            }
            return 39;
         }
         return -1;
      case 12:
         if ((active1 & 0x2a0abb2099e05000L) != 0L || (active2 & 0xb33c000000015602L) != 0L || (active3 & 0x64aeaaaaL) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 12;
            return 39;
         }
         if ((active1 & 0x80000L) != 0L || (active3 & 0x80000000L) != 0L)
            return 39;
         return -1;
      case 13:
         if ((active1 & 0x2a0a8b0098001000L) != 0L || (active2 & 0xb33c000000015602L) != 0L || (active3 & 0x24aeaaaaL) != 0L)
         {
            if (jjmatchedPos != 13)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 13;
            }
            return 39;
         }
         if ((active1 & 0x302001e04000L) != 0L || (active3 & 0x40000000L) != 0L)
            return 39;
         return -1;
      case 14:
         if ((active2 & 0x204000000000200L) != 0L)
            return 39;
         if ((active1 & 0x2a0aab0098001000L) != 0L || (active2 & 0xb138000000015402L) != 0L || (active3 & 0x24aeaaaaL) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 14;
            return 39;
         }
         return -1;
      case 15:
         if ((active1 & 0x2a0aaa0080001000L) != 0L || (active2 & 0x9130000000015002L) != 0L || (active3 & 0x24aeaa2aL) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 15;
            return 39;
         }
         if ((active1 & 0x10018000000L) != 0L || (active2 & 0x2008000000000400L) != 0L || (active3 & 0x80L) != 0L)
            return 39;
         return -1;
      case 16:
         if ((active1 & 0x2a0aaa0080001000L) != 0L || (active2 & 0x9130000000015002L) != 0L || (active3 & 0x24aeaa2aL) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 16;
            return 39;
         }
         return -1;
      case 17:
         if ((active1 & 0x8020000000000L) != 0L || (active2 & 0x4000L) != 0L || (active3 & 0x800000L) != 0L)
            return 39;
         if ((active1 & 0x2a02a80080001000L) != 0L || (active2 & 0x9130000000011002L) != 0L || (active3 & 0x242eaa2aL) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 17;
            return 39;
         }
         return -1;
      case 18:
         if ((active1 & 0x2802a80000001000L) != 0L || (active2 & 0x130000000001002L) != 0L || (active3 & 0x42eaa28L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 18;
            return 39;
         }
         if ((active1 & 0x200000080000000L) != 0L || (active2 & 0x9000000000010000L) != 0L || (active3 & 0x20000002L) != 0L)
            return 39;
         return -1;
      case 19:
         if ((active1 & 0x2802a80000000000L) != 0L || (active2 & 0x20000000001002L) != 0L || (active3 & 0x4048a08L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 19;
            return 39;
         }
         if ((active1 & 0x1000L) != 0L || (active2 & 0x110000000000000L) != 0L || (active3 & 0x2a2020L) != 0L)
            return 39;
         return -1;
      case 20:
         if ((active1 & 0x2000a80000000000L) != 0L || (active2 & 0x2L) != 0L || (active3 & 0x4048a08L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 20;
            return 39;
         }
         if ((active1 & 0x802000000000000L) != 0L || (active2 & 0x20000000001000L) != 0L)
            return 39;
         return -1;
      case 21:
         if ((active1 & 0x280000000000L) != 0L || (active3 & 0x48008L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 21;
            return 39;
         }
         if ((active1 & 0x2000800000000000L) != 0L || (active2 & 0x2L) != 0L || (active3 & 0x4000a00L) != 0L)
            return 39;
         return -1;
      case 22:
         if ((active1 & 0x200000000000L) != 0L || (active3 & 0x40008L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 22;
            return 39;
         }
         if ((active1 & 0x80000000000L) != 0L || (active3 & 0x8000L) != 0L)
            return 39;
         return -1;
      case 23:
         if ((active3 & 0x8L) != 0L)
            return 39;
         if ((active1 & 0x200000000000L) != 0L || (active3 & 0x40000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 23;
            return 39;
         }
         return -1;
      case 24:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 24;
            return 39;
         }
         if ((active3 & 0x40000L) != 0L)
            return 39;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStartNfaWithStates_2(0, 1, 0);
      case 33:
         jjmatchedKind = 248;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x8000000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 267;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x100000L);
      case 38:
         jjmatchedKind = 264;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x20002L);
      case 40:
         jjmatchedKind = 236;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x1000000000L);
      case 41:
         return jjStopAtPos(0, 237);
      case 42:
         jjmatchedKind = 262;
         return jjMoveStringLiteralDfa1_2(0x200L, 0x0L, 0x0L, 0x0L, 0x2000008000L);
      case 43:
         jjmatchedKind = 260;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x2004L);
      case 44:
         return jjStopAtPos(0, 243);
      case 45:
         jjmatchedKind = 261;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x8004008L);
      case 46:
         jjmatchedKind = 244;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x1000000L);
      case 47:
         jjmatchedKind = 263;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x10000L);
      case 58:
         return jjStopAtPos(0, 251);
      case 59:
         return jjStopAtPos(0, 242);
      case 60:
         jjmatchedKind = 247;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x2000000000000000L, 0x1e2201000L);
      case 61:
         jjmatchedKind = 246;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x1000000000000000L, 0x10000000L);
      case 62:
         jjmatchedKind = 291;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x4000000000000000L, 0x600c00000L);
      case 63:
         return jjStopAtPos(0, 250);
      case 64:
         jjmatchedKind = 245;
         return jjMoveStringLiteralDfa1_2(0x100L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 240);
      case 92:
         jjmatchedKind = 282;
         return jjMoveStringLiteralDfa1_2(0x0L, 0xc000004800100780L, 0xfffdeffe0000L, 0x0L, 0x0L);
      case 93:
         return jjStopAtPos(0, 241);
      case 94:
         jjmatchedKind = 266;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa1_2(0xc0000L, 0xc000002000000L, 0x600L, 0x7800300L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_2(0x700000L, 0x0L, 0x3000000006000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_2(0x1f800000L, 0x3000000411800000L, 0x1940L, 0x433000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_2(0xe0000000L, 0x83c00000000000L, 0x0L, 0x80030L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_2(0x700000000L, 0x100000000L, 0x1430000000000000L, 0x20000003L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_2(0xf800000000L, 0x0L, 0x0L, 0x10000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_2(0x10000000000L, 0x8000L, 0x0L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x300000000041800L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_2(0x7e0000000000L, 0xc00003000020000L, 0x4L, 0x8000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_2(0x800000000000L, 0x300000000000L, 0x200000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_2(0x0L, 0xd8200002000L, 0x20L, 0x8030cc00L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x7000000000000L, 0xe0000000L, 0xc000000000000L, 0x40000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x80L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_2(0x78000000000000L, 0x10000L, 0x2a00000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_2(0x80000000000000L, 0x20000000000000L, 0x18000000001800bL, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_2(0x3f00000000000000L, 0x1002000c604000L, 0xc040000010000000L, 0xcL, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0xc000000000000000L, 0xfL, 0x0L, 0x0L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x40000000080000L, 0x0L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x30L, 0x0L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x40L, 0x10L, 0x400c0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 238);
      case 124:
         jjmatchedKind = 265;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x0L, 0x40001L);
      case 125:
         return jjStopAtPos(0, 239);
      case 126:
         return jjStopAtPos(0, 249);
      default :
         return jjMoveNfa_2(2, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0, long active1, long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active4 & 0x2L) != 0L)
            return jjStopAtPos(1, 257);
         break;
      case 41:
         if ((active4 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 293);
         break;
      case 42:
         if ((active4 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 292);
         return jjMoveStringLiteralDfa2_2(active0, 0x100L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 43:
         if ((active4 & 0x4L) != 0L)
            return jjStopAtPos(1, 258);
         break;
      case 45:
         if ((active4 & 0x8L) != 0L)
            return jjStopAtPos(1, 259);
         else if ((active4 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 281);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000L);
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 58:
         if ((active4 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 288);
         break;
      case 60:
         if ((active4 & 0x1000L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000L);
      case 61:
         if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 254);
         else if ((active3 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 255);
         else if ((active4 & 0x2000L) != 0L)
            return jjStopAtPos(1, 269);
         else if ((active4 & 0x4000L) != 0L)
            return jjStopAtPos(1, 270);
         else if ((active4 & 0x8000L) != 0L)
            return jjStopAtPos(1, 271);
         else if ((active4 & 0x10000L) != 0L)
            return jjStopAtPos(1, 272);
         else if ((active4 & 0x20000L) != 0L)
            return jjStopAtPos(1, 273);
         else if ((active4 & 0x40000L) != 0L)
            return jjStopAtPos(1, 274);
         else if ((active4 & 0x80000L) != 0L)
            return jjStopAtPos(1, 275);
         else if ((active4 & 0x100000L) != 0L)
            return jjStopAtPos(1, 276);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xf0000000L);
      case 62:
         if ((active4 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 283);
         else if ((active4 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 290;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200c00000L);
      case 84:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x9000801800000L, active1, 0xd8000000000L, active2, 0x40000000000000L, active3, 0x33000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_2(active0, 0x40000L, active1, 0L, active2, 0x600L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x6000000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x82000020000000L, active1, 0x43b3c00200041800L, active2, 0x18300810001800bL, active3, 0xc000L, active4, 0L);
      case 102:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 41, 39);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x4002000000L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0xc100000002000000L, active1, 0x8041L, active2, 0x140L, active3, 0xc0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x3000000000L, active1, 0x4000000000L, active2, 0xc000001800000000L, active3, 0x3cL, active4, 0L);
      case 106:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0x4104000000L, active1, 0x2000000L, active2, 0x402000000000L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_2(active0, 0xc0000000000L, active1, 0L, active2, 0x10400000000L, active3, 0x8000000L, active4, 0L);
      case 110:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x700200000000L, active1, 0xc400020000a0000L, active2, 0x1400320040300004L, active3, 0L, active4, 0L);
      case 111:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x818098100000L, active1, 0x30003004318027b0L, active2, 0x280c800201c41820L, active3, 0xd0740c00L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0xc604000L, active2, 0x40010080000L, active3, 0L, active4, 0L);
      case 114:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(1, 135, 39);
         return jjMoveStringLiteralDfa2_2(active0, 0x30000000200000L, active1, 0xeL, active2, 0x200000004026010L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_2(active0, 0x80000L, active1, 0x800c000000000000L, active2, 0x80000000000L, active3, 0x800300L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_2(active0, 0x600000000000000L, active1, 0x20000000000L, active2, 0x80000000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x844000000000000L, active1, 0xc0010000L, active2, 0L, active3, 0x80000L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000000000000000L, active1, 0L, active2, 0x20000000L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_2(active0, 0x400000000L, active1, 0x100000000L, active2, 0x30000000000000L, active3, 0x21000003L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_2(active0, 0x2000000000400000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 124:
         if ((active4 & 0x1L) != 0L)
            return jjStopAtPos(1, 256);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_2(0, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, active1, active2, active3, active4);
      return 2;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000L);
      case 46:
         if ((active4 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 280);
         break;
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(2, 8);
         break;
      case 61:
         if ((active4 & 0x200000L) != 0L)
            return jjStopAtPos(2, 277);
         else if ((active4 & 0x400000L) != 0L)
            return jjStopAtPos(2, 278);
         else if ((active4 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 285;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000L);
      case 62:
         if ((active4 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 284);
         else if ((active4 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 289;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000L);
      case 89:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0x200000006000000L, active1, 0x20000100002L, active2, 0x410000008L, active3, 0xc000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_2(active0, 0x40000000000000L, active1, 0x80000000000000L, active2, 0x402000000000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_2(active0, 0x8000000000000L, active1, 0x3c00000000000L, active2, 0x30000200000000L, active3, 0x26000000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x11802000L, active2, 0L, active3, 0x80700c00L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x200000L, active1, 0xc604000L, active2, 0x200000004026000L, active3, 0xc0L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_2(active0, 0x20000000L, active1, 0x20000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0xc000000000000000L, active3, 0xcL, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x3000000000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0x5010000000000000L, active1, 0xc0000080050L, active2, 0x10000000014L, active3, 0x1000000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0x4000800000000L, active1, 0xc0040020L, active2, 0x100040000L, active3, 0x3000L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x40000000000000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000803018000000L, active1, 0x3300004420001800L, active2, 0x801001c01820L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0x120004000100000L, active1, 0x300000008000L, active2, 0x304060300140L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0x8000c0000000000L, active1, 0x18000000000L, active2, 0x3L, active3, 0x8030000L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x180000000000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0x8400000000000000L, active1, 0x40000000010781L, active2, 0xc040002080600L, active3, 0x500c0000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x1001008c0000L, active1, 0xc000002020000L, active2, 0x3c00000800000000L, active3, 0x800303L, active4, 0L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 116, 39);
         return jjMoveStringLiteralDfa3_2(active0, 0x81410401400000L, active1, 0x300000000L, active2, 0x18000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0x280000000L, active1, 0x8000000000000004L, active2, 0xa0008000000L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x4c00000000000000L, active2, 0L, active3, 0x30L, active4, 0L);
      case 119:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 49, 39);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L, active4, 0L);
      case 121:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(2, 67, 39);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_2(1, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, active1, active2, active3, active4);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active4 & 0x800000L) != 0L)
            return jjStopAtPos(3, 279);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000L);
      case 62:
         if ((active4 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 286);
         break;
      case 80:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x20000000L, active2, 0x200000800000000L, active3, 0x10000000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0x7020200000L, active1, 0xc00000000000020L, active2, 0x3000004006000L, active3, 0x80000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_2(active0, 0x80000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_2(active0, 0x2000000001000000L, active1, 0x830000000c605800L, active2, 0x10000000L, active3, 0L, active4, 0L);
      case 100:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_2(3, 68, 39);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(3, 146);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x8L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(3, 22, 39);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(3, 23, 39);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(3, 32, 39);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(3, 66, 39);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(3, 80, 39);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(3, 147);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 182, 39);
         else if ((active3 & 0x400000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0x800400400080000L, active1, 0x4040000011802000L, active2, 0x30000102000000L, active3, 0xa6800030L, active4, 0L);
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 47, 39);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_2(active0, 0x401000000000000L, active1, 0x20000000000780L, active2, 0x8000000020L, active3, 0x300f00L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_2(active0, 0x8000000000000L, active1, 0L, active2, 0x200000000L, active3, 0x40000L, active4, 0L);
      case 108:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0x40040000100000L, active1, 0xc0000040L, active2, 0xc02001c00000L, active3, 0x8003000L, active4, 0L);
      case 109:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_2(3, 33, 39);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(3, 171);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0xc020000000000L, active3, 0x40000000L, active4, 0L);
      case 110:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(3, 168);
         else if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0xc0000080002L, active2, 0xc000000040000000L, active3, 0x8cL, active4, 0L);
      case 111:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 40, 39);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(3, 89, 39);
         return jjMoveStringLiteralDfa4_2(active0, 0x8000080000000000L, active1, 0x1L, active2, 0x40000000140L, active3, 0x1000000L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x300000040000L, active2, 0x80000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(3, 25, 39);
         return jjMoveStringLiteralDfa4_2(active0, 0x100000000000000L, active1, 0x3c02100000000L, active2, 0x4028000003L, active3, 0L, active4, 0L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 62, 39);
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0x80c000000L, active1, 0x3000010400008000L, active2, 0x20000L, active3, 0xc000L, active4, 0L);
      case 116:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0x1220100010040000L, active1, 0x24000020000L, active2, 0x2000300000301814L, active3, 0x30000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0x80000000000000L, active1, 0x8c000000000000L, active2, 0x1580000000018600L, active3, 0x3L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_2(active0, 0x10000000000000L, active1, 0x100000L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 120:
         if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(3, 162);
         break;
      default :
         break;
   }
   return jjStartNfa_2(2, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa4_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_2(2, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, active1, active2, active3, active4);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active4 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 287);
         break;
      case 69:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(4, 99);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x31001de04000L, active2, 0x2000220000300000L, active3, 0x80L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0x18100000000000L, active1, 0x400001c0120000L, active2, 0xc00c005008000018L, active3, 0x4000300cL, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_2(active0, 0x1400000000000000L, active1, 0L, active2, 0x4000000L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x40000000000L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_2(4, 35, 39);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_2(4, 70, 39);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(4, 156, 39);
         return jjMoveStringLiteralDfa5_2(active0, 0x20040000100000L, active1, 0x303c02000041800L, active2, 0x80000003L, active3, 0x10000000L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x300c00L, active4, 0L);
      case 103:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 119, 39);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x780L, active2, 0L, active3, 0x300L, active4, 0L);
      case 104:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(4, 24, 39);
         return jjMoveStringLiteralDfa5_2(active0, 0x2000000000000000L, active1, 0x8000000000000000L, active2, 0x100000000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x240000010000000L, active1, 0x20000080000L, active2, 0x180000800001804L, active3, 0x8040000L, active4, 0L);
      case 107:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x20006000L, active3, 0L, active4, 0L);
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0x2080000000L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0L);
      case 109:
         if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(4, 216, 39);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0xc000000000000L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_2(active0, 0x400000000L, active1, 0x20000020000000L, active2, 0x2040000000L, active3, 0L, active4, 0L);
      case 111:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(4, 102);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x30400000000600L, active3, 0x20000000L, active4, 0L);
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 59, 39);
         return jjMoveStringLiteralDfa5_2(active0, 0x804800000c0000L, active1, 0x4c00000000000000L, active2, 0x1600000000018000L, active3, 0x800033L, active4, 0L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(4, 26, 39);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x2L, active2, 0x8202000140L, active3, 0x6000000L, active4, 0L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 38, 39);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 56, 39);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(4, 79, 39);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x30000c0400000020L, active2, 0x20L, active3, 0x80000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_2(active0, 0x20000000L, active1, 0L, active2, 0x20000L, active3, 0x3c000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_2(active0, 0x1000000000000L, active1, 0L, active2, 0x3000000000000L, active3, 0L, active4, 0L);
      case 119:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x800001c00000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa5_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_2(3, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, active1, active2, active3, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x8000000000101800L, active2, 0x800001c00000L, active3, 0x80000000L);
      case 97:
         return jjMoveStringLiteralDfa6_2(active0, 0x140000L, active1, 0x3cc0000000000L, active2, 0x100004L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x3000000d8000000L, active2, 0x18L, active3, 0x3000L);
      case 99:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 54, 39);
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active0, 0x20000000000000L, active1, 0x40020100000000L, active2, 0L, active3, 0L);
      case 100:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_2(5, 97, 39);
         return jjMoveStringLiteralDfa6_2(active0, 0x400000000L, active1, 0x2000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_2(5, 31, 39);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 48, 39);
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x8000000000000L, active2, 0x1600002200000100L, active3, 0x8000003L);
      case 102:
         return jjMoveStringLiteralDfa6_2(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_2(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0x30L);
      case 104:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 60, 39);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 153);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 154);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0xc203000000007a2L, active2, 0x3100020000000L, active3, 0x380c00L);
      case 106:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0xa00000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_2(active0, 0x2020000000L, active1, 0L, active2, 0xc00c004000020000L, active3, 0x4000000cL);
      case 109:
         return jjMoveStringLiteralDfa6_2(active0, 0x40000000000L, active1, 0L, active2, 0x200000L, active3, 0L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active0, 0x100010000000L, active1, 0x20000L, active2, 0x800019800L, active3, 0x40300L);
      case 111:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x420080000020L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x4004000L, active2, 0L, active3, 0L);
      case 114:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(5, 82, 39);
         return jjMoveStringLiteralDfa6_2(active0, 0x2000000000000000L, active1, 0x3000010400000000L, active2, 0x2180001000000000L, active3, 0x3c080L);
      case 115:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_2(5, 64, 39);
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x1400000L, active2, 0x200000004003L, active3, 0x6000000L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 43, 39);
         return jjMoveStringLiteralDfa6_2(active0, 0x410000000000000L, active1, 0x80000L, active2, 0x30008108000600L, active3, 0x20800000L);
      case 117:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x20000000L, active2, 0x40040000000L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000L);
      case 121:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa6_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(4, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, active1, active2, active3, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x8020000000000L, active2, 0xc000000004700L, active3, 0x40800000L);
      case 97:
         return jjMoveStringLiteralDfa7_2(active0, 0x400000000000L, active1, 0x3c00000001e00000L, active2, 0x800000400000L, active3, 0x10000f00L);
      case 98:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x1800L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_2(active0, 0x100000040000L, active1, 0x20000L, active2, 0x40001800000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0L, active2, 0x200000000000000L, active3, 0L);
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 51, 39);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 52, 39);
         return jjMoveStringLiteralDfa7_2(active0, 0x40000000000L, active1, 0x10000000002L, active2, 0x2180000000000003L, active3, 0x33c0b0L);
      case 102:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(6, 159);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(6, 169);
         return jjMoveStringLiteralDfa7_2(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(6, 165);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000L);
      case 104:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0xc0018080000L, active2, 0x30001808000000L, active3, 0x26000000L);
      case 108:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(6, 166);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0xe0000020L, active2, 0x4000001cL, active3, 0x3000L);
      case 109:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(6, 20, 39);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x20300000000780L, active2, 0x100020000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_2(active0, 0x2000000000000000L, active1, 0L, active2, 0x3000000200000L, active3, 0x80000L);
      case 112:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0L, active2, 0x200000000000L, active3, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x4000L, active2, 0x20L, active3, 0L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_2(6, 34, 39);
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(6, 167);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(6, 174);
         else if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x3c00000000000L, active2, 0x9000000000110000L, active3, 0x800000eL);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_2(6, 29, 39);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(6, 96, 39);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(6, 145);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_2(6, 161, 39);
         return jjMoveStringLiteralDfa7_2(active0, 0x20000000000000L, active1, 0xc000000000000000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_2(active0, 0x10000000L, active1, 0x2404000000L, active2, 0x1800L, active3, 0L);
      case 121:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 37, 39);
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x200000000000000L, active2, 0x100000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa7_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(5, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, active1, active2, active3, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x200000000000000L, active2, 0x9000000000010000L, active3, 0x804000eL);
      case 97:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x40000000180780L, active2, 0x1001800000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x4000000L, active2, 0xc000000000600L, active3, 0x6000f00L);
      case 99:
         return jjMoveStringLiteralDfa8_2(active0, 0x400000000000L, active1, 0x400000000L, active2, 0x400000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x10000000000L, active2, 0x2000000000200000L, active3, 0xc080L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(7, 69, 39);
         else if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(7, 131, 39);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_2(7, 132, 39);
         else if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_2(active0, 0x20100000000000L, active1, 0x3000080000000L, active2, 0x200000001800L, active3, 0x40002000L);
      case 102:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x1400000L, active2, 0L, active3, 0L);
      case 103:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 117, 39);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(7, 172);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x18000000L, active2, 0x20000000L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0xc000000000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x3000c20000000000L, active2, 0x100L, active3, 0L);
      case 108:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_2(7, 93, 39);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0L, active2, 0x40000004L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa8_2(active0, 0x2000040000000000L, active1, 0xc000c2000000002L, active2, 0x3L, active3, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x4000L, active2, 0x30000008000000L, active3, 0x20000000L);
      case 112:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 58, 39);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L);
      case 114:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 176, 39);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x8000000000000L, active2, 0x4000L, active3, 0x80800000L);
      case 115:
         if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0L, active2, 0x100800000100020L, active3, 0x220020L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(7, 18, 39);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(7, 170);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0L, active2, 0x202000000000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x300000a00000L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(6, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa8_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(6, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0, active1, active2, active3, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x80001000L, active2, 0x100000020000020L, active3, 0x2ae020L);
      case 97:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x8000300000a00000L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0L, active2, 0x200000400000L, active3, 0L);
      case 100:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 53, 39);
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 46, 39);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(8, 160);
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x8000001400000L, active2, 0xc000040004600L, active3, 0x800000L);
      case 102:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(8, 136, 39);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_2(active0, 0x2000000000000000L, active1, 0x40000c0018000000L, active2, 0x800300000L, active3, 0L);
      case 108:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x4080380L, active2, 0x1000000L, active3, 0x6000f00L);
      case 110:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(8, 155);
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x3000c20000000000L, active2, 0x230001000000000L, active3, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa9_2(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0x8000000cL);
      case 112:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0L, active2, 0x800000L, active3, 0x10000000L);
      case 114:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 177, 39);
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x200000000000000L, active2, 0x9000000000010000L, active3, 0x2L);
      case 115:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x2000000000000L, active2, 0x800000001000L, active3, 0x40000L);
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_2(8, 65, 39);
         else if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_2(active0, 0x40000000000L, active1, 0x800000400104000L, active2, 0x3L, active3, 0x8000000L);
      case 117:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x10000000000L, active2, 0x2000000000000000L, active3, 0x80L);
      case 120:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000L);
      case 121:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(8, 130, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(7, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa9_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(7, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, active0, active1, active2, active3, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x802000001e00380L, active2, 0x1000L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x2000000000L, active2, 0x30000800000000L, active3, 0x60000000L);
      case 98:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0xc000L);
      case 100:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x8000000000000L, active2, 0x200000000004000L, active3, 0x800000L);
      case 101:
         if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x200000000004000L, active2, 0x9000000000410000L, active3, 0x4000a02L);
      case 102:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_2(9, 44, 39);
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0L, active2, 0x200020L, active3, 0L);
      case 103:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x800000000000L, active2, 0x100000L, active3, 0x80000000L);
      case 104:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(9, 84);
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0L, active2, 0xc000000000600L, active3, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x20004080000L, active2, 0xa00000000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x40000000000000L, active2, 0x41000000L, active3, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x40000d0018000000L, active2, 0x2000000000000000L, active3, 0x8cL);
      case 111:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x300000001000L, active2, 0x100000000000000L, active3, 0x2a2020L);
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_2(9, 42, 39);
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0L, active2, 0x20000002L, active3, 0L);
      case 116:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(9, 127);
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x2000000000000000L, active2, 0x1000800000L, active3, 0L);
      case 122:
         return jjMoveStringLiteralDfa10_2(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(8, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa10_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(8, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, active0, active1, active2, active3, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x2000800000000000L, active2, 0x1000000002L, active3, 0x4000a00L);
      case 97:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0L, active2, 0x20c000000000600L, active3, 0x8040000L);
      case 99:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(10, 90, 39);
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x4300L, active2, 0L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x200010000000000L, active2, 0xb000000000010000L, active3, 0x82L);
      case 101:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_2(10, 118, 39);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(10, 220, 39);
         return jjMoveStringLiteralDfa11_2(active0, 0x2000000000000000L, active1, 0x1000L, active2, 0x100000041000000L, active3, 0x2a2020L);
      case 102:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0L, active2, 0x200000000000L, active3, 0L);
      case 103:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(10, 126);
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x80000000000L, active2, 0x800000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x300000000000L, active2, 0x200000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0L, active2, 0x30000800000000L, active3, 0x2000000cL);
      case 109:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x1e00000L, active2, 0L, active3, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x2000000000L, active2, 0x100000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0L, active2, 0x20L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L);
      case 114:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_2(10, 98, 39);
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x802000000000000L, active2, 0x1000L, active3, 0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x80L, active2, 0x400000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x20018000000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x8000000000000L, active2, 0x804000L, active3, 0x800000L);
      case 121:
         if ((active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0x8000L);
      case 122:
         return jjMoveStringLiteralDfa11_2(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(9, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa11_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(9, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(10, active0, active1, active2, active3, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x80098000000L, active2, 0x30000000000000L, active3, 0x20008000L);
      case 97:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x310001e00100L, active2, 0x2000000020000000L, active3, 0x80000080L);
      case 99:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000L);
      case 100:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_2(11, 61, 39);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(11, 152);
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x1000L, active2, 0x100000000000000L, active3, 0x2a2020L);
      case 101:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x802000000080000L, active2, 0x301000L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0L, active2, 0x1000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x20000000000L, active2, 0x200800000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x8000000000000L, active2, 0x200800000004000L, active3, 0x800000L);
      case 112:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x80L, active2, 0L, active3, 0x40000000L);
      case 114:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(11, 133, 39);
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x2000800000000000L, active2, 0x800002L, active3, 0x4000a00L);
      case 115:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0L);
      case 116:
         if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(11, 219, 39);
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x2000004000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0x200000000000000L, active2, 0x9000000000010000L, active3, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0L, active2, 0xc000000000600L, active3, 0L);
      case 121:
         if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x8L);
      default :
         break;
   }
   return jjStartNfa_2(10, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa12_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(10, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(11, 0L, active1, active2, active3, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa13_2(active1, 0L, active2, 0L, active3, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa13_2(active1, 0x20000000200L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa13_2(active1, 0L, active2, 0x30000000000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_2(active1, 0L, active2, 0x20000000L, active3, 0L);
      case 100:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(12, 83, 39);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(12, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(12, 149);
         return jjMoveStringLiteralDfa13_2(active1, 0x80a000080000000L, active2, 0x5000L, active3, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa13_2(active1, 0x2000800000004080L, active2, 0xa00040c00002L, active3, 0x24040a00L);
      case 105:
         return jjMoveStringLiteralDfa13_2(active1, 0L, active2, 0xc000000000600L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa13_2(active1, 0x2000000000L, active2, 0L, active3, 0x40000000L);
      case 109:
         if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_2(12, 223, 39);
         return jjMoveStringLiteralDfa13_2(active1, 0x18000000L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa13_2(active1, 0x200310000000000L, active2, 0xb000000000010000L, active3, 0x82L);
      case 111:
         return jjMoveStringLiteralDfa13_2(active1, 0L, active2, 0x1000000000L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_2(active1, 0x80000000000L, active2, 0L, active3, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa13_2(active1, 0x100L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_2(active1, 0x1e00000L, active2, 0x200000000000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa13_2(active1, 0x1000L, active2, 0x100000000000000L, active3, 0x2a2020L);
      case 122:
         return jjMoveStringLiteralDfa13_2(active1, 0L, active2, 0x800000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(11, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa13_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(11, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(12, 0L, active1, active2, active3, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa14_2(active1, 0L, active2, 0L, active3, 0x40000L);
      case 97:
         return jjMoveStringLiteralDfa14_2(active1, 0x8000018000000L, active2, 0x4000L, active3, 0x800000L);
      case 99:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(13, 71);
         break;
      case 100:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(13, 78, 39);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(13, 150);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(13, 151);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(13, 173);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStopAtPos(13, 175);
         return jjMoveStringLiteralDfa14_2(active1, 0x2200800000000000L, active2, 0x9000000000010002L, active3, 0x4000a02L);
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(13, 72);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(13, 157);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_2(13, 222, 39);
         return jjMoveStringLiteralDfa14_2(active1, 0x80080000000L, active2, 0x30000800000000L, active3, 0x8000L);
      case 104:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(13, 85, 39);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(13, 86, 39);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(13, 87, 39);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(13, 88, 39);
         break;
      case 108:
         return jjMoveStringLiteralDfa14_2(active1, 0x20000000000L, active2, 0x200000000000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa14_2(active1, 0x1000L, active2, 0x100000040000000L, active3, 0x2a2020L);
      case 111:
         return jjMoveStringLiteralDfa14_2(active1, 0L, active2, 0xc000000000600L, active3, 0L);
      case 114:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(13, 164);
         return jjMoveStringLiteralDfa14_2(active1, 0L, active2, 0L, active3, 0x8L);
      case 116:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_2(active1, 0x210000000000L, active2, 0x2000000000000000L, active3, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa14_2(active1, 0x802000000000200L, active2, 0x1000L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa14_2(active1, 0L, active2, 0L, active3, 0x20000000L);
      case 121:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_2(13, 101, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(12, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa14_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(12, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(13, 0L, active1, active2, active3, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_2(active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa15_2(active1, 0x200000000000000L, active2, 0x9000000000010000L, active3, 0x20000002L);
      case 100:
         if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(14, 163);
         return jjMoveStringLiteralDfa15_2(active1, 0x80000001000L, active2, 0x100000000000000L, active3, 0x2aa020L);
      case 101:
         return jjMoveStringLiteralDfa15_2(active1, 0L, active2, 0L, active3, 0x8L);
      case 102:
         return jjMoveStringLiteralDfa15_2(active1, 0x80000000L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa15_2(active1, 0L, active2, 0x30000000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa15_2(active1, 0x20000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa15_2(active1, 0x10000000000L, active2, 0x2000000000000000L, active3, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa15_2(active1, 0x80a000000000000L, active2, 0x5000L, active3, 0x800000L);
      case 114:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(14, 137, 39);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(14, 178, 39);
         return jjMoveStringLiteralDfa15_2(active1, 0L, active2, 0L, active3, 0x40000L);
      case 115:
         return jjMoveStringLiteralDfa15_2(active1, 0x200L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa15_2(active1, 0x18000000L, active2, 0x40000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa15_2(active1, 0x2000800000000000L, active2, 0x8000000000402L, active3, 0x4000a00L);
      case 121:
         if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_2(14, 185, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(13, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa15_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(13, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(14, 0L, active1, active2, active3, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_2(active1, 0x80001000L, active2, 0x130000000000000L, active3, 0x2a2020L);
      case 100:
         return jjMoveStringLiteralDfa16_2(active1, 0x802000000000000L, active2, 0x1000L, active3, 0x8L);
      case 101:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(15, 73);
         return jjMoveStringLiteralDfa16_2(active1, 0L, active2, 0L, active3, 0x40000L);
      case 104:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(15, 91, 39);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(15, 92, 39);
         break;
      case 109:
         return jjMoveStringLiteralDfa16_2(active1, 0L, active2, 0L, active3, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa16_2(active1, 0x2200800000000000L, active2, 0x9000000000010002L, active3, 0x4000a02L);
      case 114:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(15, 138, 39);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(15, 179, 39);
         return jjMoveStringLiteralDfa16_2(active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 115:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(15, 158);
         break;
      case 116:
         return jjMoveStringLiteralDfa16_2(active1, 0x8000000000000L, active2, 0x4000L, active3, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa16_2(active1, 0x80000000000L, active2, 0L, active3, 0x8000L);
      case 121:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_2(15, 104, 39);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_2(15, 189, 39);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(15, 199, 39);
         break;
      case 122:
         return jjMoveStringLiteralDfa16_2(active1, 0x20000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(14, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa16_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(14, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(15, 0L, active1, active2, active3, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa17_2(active1, 0x802000000000000L, active2, 0x1000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa17_2(active1, 0x2000800000000000L, active2, 0x2L, active3, 0x4040a00L);
      case 101:
         return jjMoveStringLiteralDfa17_2(active1, 0x220000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa17_2(active1, 0x8000000000000L, active2, 0x4000L, active3, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa17_2(active1, 0x80000001000L, active2, 0x100000000000000L, active3, 0x2aa020L);
      case 112:
         return jjMoveStringLiteralDfa17_2(active1, 0L, active2, 0L, active3, 0x20000000L);
      case 116:
         return jjMoveStringLiteralDfa17_2(active1, 0x200000000000000L, active2, 0x9000000000010000L, active3, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa17_2(active1, 0x80000000L, active2, 0L, active3, 0x8L);
      case 118:
         return jjMoveStringLiteralDfa17_2(active1, 0L, active2, 0x30000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_2(15, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa17_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(15, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(16, 0L, active1, active2, active3, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_2(active1, 0x2000800000000000L, active2, 0x2L, active3, 0x4000a00L);
      case 100:
         return jjMoveStringLiteralDfa18_2(active1, 0x280000000000L, active2, 0L, active3, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa18_2(active1, 0L, active2, 0x30000000000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa18_2(active1, 0x200000080000000L, active2, 0x9000000000010000L, active3, 0x20000002L);
      case 110:
         return jjMoveStringLiteralDfa18_2(active1, 0x802000000000000L, active2, 0x1000L, active3, 0x8L);
      case 114:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_2(17, 105, 39);
         break;
      case 116:
         return jjMoveStringLiteralDfa18_2(active1, 0x1000L, active2, 0x100000000000000L, active3, 0x2a2020L);
      case 117:
         return jjMoveStringLiteralDfa18_2(active1, 0L, active2, 0L, active3, 0x40000L);
      case 121:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(17, 115, 39);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(17, 142, 39);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(17, 215, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(16, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa18_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(16, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(17, 0L, active1, active2, active3, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa19_2(active1, 0x80000000000L, active2, 0L, active3, 0x8000L);
      case 100:
         return jjMoveStringLiteralDfa19_2(active1, 0L, active2, 0L, active3, 0x8L);
      case 101:
         if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_2(18, 221, 39);
         break;
      case 108:
         return jjMoveStringLiteralDfa19_2(active1, 0x1000L, active2, 0x100000000000000L, active3, 0x2a2020L);
      case 110:
         return jjMoveStringLiteralDfa19_2(active1, 0x2000800000000000L, active2, 0x2L, active3, 0x4040a00L);
      case 111:
         return jjMoveStringLiteralDfa19_2(active1, 0L, active2, 0x30000000000000L, active3, 0L);
      case 116:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_2(18, 95, 39);
         return jjMoveStringLiteralDfa19_2(active1, 0x802000000000000L, active2, 0x1000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa19_2(active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_2(18, 121, 39);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(18, 144, 39);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(18, 188, 39);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_2(18, 191, 39);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_2(18, 193, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(17, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa19_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(17, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(18, 0L, active1, active2, active3, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa20_2(active1, 0L, active2, 0L, active3, 0x8L);
      case 100:
         return jjMoveStringLiteralDfa20_2(active1, 0L, active2, 0L, active3, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa20_2(active1, 0x802000000000000L, active2, 0x1000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa20_2(active1, 0x280000000000L, active2, 0L, active3, 0x8000L);
      case 114:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_2(19, 180, 39);
         break;
      case 116:
         return jjMoveStringLiteralDfa20_2(active1, 0x2000800000000000L, active2, 0x2L, active3, 0x4000a00L);
      case 117:
         return jjMoveStringLiteralDfa20_2(active1, 0L, active2, 0x20000000000000L, active3, 0L);
      case 121:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(19, 76, 39);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_2(19, 184, 39);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(19, 197, 39);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(19, 205, 39);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(19, 209, 39);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(19, 211, 39);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(19, 213, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(18, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa20_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(18, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(19, 0L, active1, active2, active3, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_2(active1, 0L, active2, 0L, active3, 0x40000L);
      case 100:
         return jjMoveStringLiteralDfa21_2(active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa21_2(active1, 0x2000800000000000L, active2, 0x2L, active3, 0x4000a00L);
      case 110:
         return jjMoveStringLiteralDfa21_2(active1, 0L, active2, 0L, active3, 0x8L);
      case 114:
         if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(20, 181, 39);
         break;
      case 116:
         return jjMoveStringLiteralDfa21_2(active1, 0x80000000000L, active2, 0L, active3, 0x8000L);
      case 121:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_2(20, 113, 39);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_2(20, 123, 39);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(20, 140, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(19, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa21_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(19, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(20, 0L, active1, active2, active3, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa22_2(active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa22_2(active1, 0x80000000000L, active2, 0L, active3, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa22_2(active1, 0L, active2, 0L, active3, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa22_2(active1, 0L, active2, 0L, active3, 0x8L);
      case 121:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_2(21, 111, 39);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_2(21, 125, 39);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_2(21, 129, 39);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(21, 201, 39);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(21, 203, 39);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(21, 218, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(20, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa22_2(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(20, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(21, 0L, active1, 0L, active3, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa23_2(active1, 0L, active3, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa23_2(active1, 0x200000000000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa23_2(active1, 0L, active3, 0x40000L);
      case 121:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_2(22, 107, 39);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(22, 207, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(21, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa23_2(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(21, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(22, 0L, active1, 0L, active3, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa24_2(active1, 0L, active3, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa24_2(active1, 0x200000000000L, active3, 0L);
      case 121:
         if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(23, 195, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(22, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa24_2(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(22, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(23, 0L, active1, 0L, active3, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa25_2(active1, 0x200000000000L, active3, 0L);
      case 121:
         if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(24, 210, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(23, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa25_2(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_2(23, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(24, 0L, active1, 0L, 0L, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 121:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_2(25, 109, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_2(24, 0L, active1, 0L, 0L, 0L);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 59;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 39:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 34:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  else if (curChar == 36)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(49, 51);
                  else if (curChar == 39)
                     jjAddStates(52, 53);
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  else if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 224)
                        kind = 224;
                     jjCheckNAddTwoStates(4, 5);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 224)
                        kind = 224;
                     jjCheckNAddStates(54, 56);
                  }
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 59:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 1:
                  if ((0xfffffbffffffffffL & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 3:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddStates(57, 59);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if (curChar == 39)
                     jjAddStates(52, 53);
                  break;
               case 13:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if (curChar == 39 && kind > 230)
                     kind = 230;
                  break;
               case 16:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 14);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 19:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 21:
                  if (curChar == 34)
                     jjCheckNAddStates(49, 51);
                  break;
               case 22:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 24:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 25:
                  if (curChar == 34 && kind > 231)
                     kind = 231;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(60, 63);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 28:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 38:
                  if (curChar != 36)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar != 46)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddStates(64, 66);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddStates(64, 66);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddTwoStates(46, 11);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddTwoStates(50, 11);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 11);
                  break;
               case 55:
                  if (curChar != 48)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddStates(54, 56);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddTwoStates(57, 5);
                  break;
               case 58:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddTwoStates(58, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(30);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(30);
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 232)
                        kind = 232;
                  }
                  break;
               case 0:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (kind > 10)
                     kind = 10;
                  break;
               case 5:
                  if ((0x100000001000L & l) != 0L && kind > 224)
                     kind = 224;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 11:
                  if ((0x5000000050L & l) != 0L && kind > 228)
                     kind = 228;
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 92)
                     jjAddStates(72, 74);
                  break;
               case 16:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 23:
                  if (curChar == 92)
                     jjAddStates(75, 77);
                  break;
               case 24:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 30:
                  if (curChar == 101 && kind > 232)
                     kind = 232;
                  break;
               case 33:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 37:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(80, 81);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(82, 83);
                  break;
               case 56:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddTwoStates(57, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 39:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 34:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 36:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 2:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 31:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 59:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 10)
                     kind = 10;
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(49, 51);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 59 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x8000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0xfL) != 0L)
         {
            jjmatchedKind = 233;
            return 32;
         }
         if ((active0 & 0x3fffff07fffc0000L) != 0L || (active1 & 0x3fffffb7ffeff870L) != 0L || (active2 & 0xffff00021001ffffL) != 0L || (active3 & 0xefffffffL) != 0L)
         {
            jjmatchedKind = 233;
            return 39;
         }
         if ((active0 & 0x10L) != 0L)
            return 1;
         if ((active0 & 0xf800000000L) != 0L || (active3 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 233;
            return 36;
         }
         if ((active3 & 0x10000000000000L) != 0L || (active4 & 0x1000000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 1;
            }
            return 35;
         }
         if ((active0 & 0xffff8df73ffc0000L) != 0L || (active1 & 0x33ffff87ffedf871L) != 0L || (active2 & 0xffff00021001ff7bL) != 0L || (active3 & 0xffffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 1;
            }
            return 39;
         }
         if ((active1 & 0xeL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 1;
            }
            return 31;
         }
         if ((active0 & 0x7200c0000000L) != 0L || (active1 & 0xc00003000020000L) != 0L || (active2 & 0x84L) != 0L)
            return 39;
         return -1;
      case 2:
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 2;
            }
            return 34;
         }
         if ((active1 & 0x4L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 2;
            }
            return 59;
         }
         if ((active0 & 0x2608000000000L) != 0L || (active1 & 0x10000000000008L) != 0L || (active3 & 0x10000000L) != 0L)
            return 39;
         if ((active0 & 0xfffd9d77bffc0000L) != 0L || (active1 & 0x3fefffa7ffeff873L) != 0L || (active2 & 0xffff00021001ff7fL) != 0L || (active3 & 0xefffffffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 2;
            }
            return 39;
         }
         return -1;
      case 3:
         if ((active0 & 0xbff95c74bd3c0000L) != 0L || (active1 & 0x3feffe272c6ef863L) != 0L || (active2 & 0xd7bf00021001ff7fL) != 0L || (active3 & 0xffbfff3fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 3;
            }
            return 39;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 3;
            }
            return 59;
         }
         if ((active0 & 0x4004810302c00000L) != 0L || (active1 & 0x180d3810014L) != 0L || (active2 & 0x2840000000000000L) != 0L || (active3 & 0x4000c0L) != 0L)
            return 39;
         return -1;
      case 4:
         if ((active0 & 0x36f95c04b01c0000L) != 0L || (active1 & 0xf6fff23fdee5822L) != 0L || (active2 & 0xf7bf000200019f7fL) != 0L || (active3 & 0x7ebfffbfL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 4;
            }
            return 39;
         }
         if ((active0 & 0x890000780d200000L) != 0L || (active1 & 0x308000040000a041L) != 0L || (active2 & 0x10006000L) != 0L || (active3 & 0x81000000L) != 0L)
            return 39;
         return -1;
      case 5:
         if ((active0 & 0x12c1080080080000L) != 0L || (active1 & 0xc020200040001L) != 0L || (active2 & 0x1e140L) != 0L || (active3 & 0x800000L) != 0L)
            return 39;
         if ((active0 & 0x2438542430140000L) != 0L || (active1 & 0x3f63fd25fdea5822L) != 0L || (active2 & 0xf7bf000200001e3fL) != 0L || (active3 & 0xfe3fffbfL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 5;
            }
            return 39;
         }
         return -1;
      case 6:
         if ((active0 & 0x2420540010040000L) != 0L || (active1 & 0x3c6bff24fdea5822L) != 0L || (active2 & 0x23bf000000005f3fL) != 0L || (active3 & 0xfebfffb0L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 6;
            }
            return 39;
         }
         if ((active0 & 0x18002420100000L) != 0L || (active1 & 0x300000100000000L) != 0L || (active2 & 0xd400000200018000L) != 0L || (active3 & 0xfL) != 0L)
            return 39;
         return -1;
      case 7:
         if ((active0 & 0x2020440000000000L) != 0L || (active1 & 0x3e4bff241de84002L) != 0L || (active2 & 0xb23e000000014727L) != 0L || (active3 & 0xfe8ccf8eL) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 7;
            }
            return 39;
         }
         if ((active0 & 0x400100010040000L) != 0L || (active1 & 0x200000e0021820L) != 0L || (active2 & 0x181000000001818L) != 0L || (active3 & 0x333030L) != 0L)
            return 39;
         return -1;
      case 8:
         if ((active0 & 0x2000140000000000L) != 0L || (active1 & 0x3248ff249de85000L) != 0L || (active2 & 0xb33c000000014623L) != 0L || (active3 & 0xfeaeefaeL) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 8;
            }
            return 39;
         }
         if ((active0 & 0x20400000000000L) != 0L || (active1 & 0xc03000000000002L) != 0L || (active2 & 0x2000000001904L) != 0L)
            return 39;
         return -1;
      case 9:
         if ((active0 & 0x140000000000L) != 0L || (active1 & 0x3000c00000000000L) != 0L || (active2 & 0x3L) != 0L || (active3 & 0x6000f00L) != 0L)
            return 39;
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0xa4a3f249de85000L) != 0L || (active2 & 0xb33c000000015620L) != 0L || (active3 & 0xf8aee0aeL) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 9;
            }
            return 39;
         }
         return -1;
      case 10:
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x2a0ab32099e85000L) != 0L || (active2 & 0xb33c000000015622L) != 0L || (active3 & 0xecae2aaeL) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 10;
            }
            return 39;
         }
         if ((active1 & 0x400c0404000000L) != 0L || (active3 & 0x1000c000L) != 0L)
            return 39;
         return -1;
      case 11:
         if ((active0 & 0x2000000000000000L) != 0L || (active2 & 0x20L) != 0L || (active3 & 0x800000cL) != 0L)
            return 39;
         if ((active1 & 0x2a0abb2099e85000L) != 0L || (active2 & 0xb33c000000015602L) != 0L || (active3 & 0xe4aeaaa2L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 11;
            }
            return 39;
         }
         return -1;
      case 12:
         if ((active1 & 0x2a0abb2099e05000L) != 0L || (active2 & 0xb33c000000015602L) != 0L || (active3 & 0x64aeaaaaL) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 12;
            return 39;
         }
         if ((active1 & 0x80000L) != 0L || (active3 & 0x80000000L) != 0L)
            return 39;
         return -1;
      case 13:
         if ((active1 & 0x2a0a8b0098001000L) != 0L || (active2 & 0xb33c000000015602L) != 0L || (active3 & 0x24aeaaaaL) != 0L)
         {
            if (jjmatchedPos != 13)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 13;
            }
            return 39;
         }
         if ((active1 & 0x302001e04000L) != 0L || (active3 & 0x40000000L) != 0L)
            return 39;
         return -1;
      case 14:
         if ((active2 & 0x204000000000200L) != 0L)
            return 39;
         if ((active1 & 0x2a0aab0098001000L) != 0L || (active2 & 0xb138000000015402L) != 0L || (active3 & 0x24aeaaaaL) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 14;
            return 39;
         }
         return -1;
      case 15:
         if ((active1 & 0x2a0aaa0080001000L) != 0L || (active2 & 0x9130000000015002L) != 0L || (active3 & 0x24aeaa2aL) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 15;
            return 39;
         }
         if ((active1 & 0x10018000000L) != 0L || (active2 & 0x2008000000000400L) != 0L || (active3 & 0x80L) != 0L)
            return 39;
         return -1;
      case 16:
         if ((active1 & 0x2a0aaa0080001000L) != 0L || (active2 & 0x9130000000015002L) != 0L || (active3 & 0x24aeaa2aL) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 16;
            return 39;
         }
         return -1;
      case 17:
         if ((active1 & 0x8020000000000L) != 0L || (active2 & 0x4000L) != 0L || (active3 & 0x800000L) != 0L)
            return 39;
         if ((active1 & 0x2a02a80080001000L) != 0L || (active2 & 0x9130000000011002L) != 0L || (active3 & 0x242eaa2aL) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 17;
            return 39;
         }
         return -1;
      case 18:
         if ((active1 & 0x2802a80000001000L) != 0L || (active2 & 0x130000000001002L) != 0L || (active3 & 0x42eaa28L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 18;
            return 39;
         }
         if ((active1 & 0x200000080000000L) != 0L || (active2 & 0x9000000000010000L) != 0L || (active3 & 0x20000002L) != 0L)
            return 39;
         return -1;
      case 19:
         if ((active1 & 0x2802a80000000000L) != 0L || (active2 & 0x20000000001002L) != 0L || (active3 & 0x4048a08L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 19;
            return 39;
         }
         if ((active1 & 0x1000L) != 0L || (active2 & 0x110000000000000L) != 0L || (active3 & 0x2a2020L) != 0L)
            return 39;
         return -1;
      case 20:
         if ((active1 & 0x2000a80000000000L) != 0L || (active2 & 0x2L) != 0L || (active3 & 0x4048a08L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 20;
            return 39;
         }
         if ((active1 & 0x802000000000000L) != 0L || (active2 & 0x20000000001000L) != 0L)
            return 39;
         return -1;
      case 21:
         if ((active1 & 0x280000000000L) != 0L || (active3 & 0x48008L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 21;
            return 39;
         }
         if ((active1 & 0x2000800000000000L) != 0L || (active2 & 0x2L) != 0L || (active3 & 0x4000a00L) != 0L)
            return 39;
         return -1;
      case 22:
         if ((active1 & 0x200000000000L) != 0L || (active3 & 0x40008L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 22;
            return 39;
         }
         if ((active1 & 0x80000000000L) != 0L || (active3 & 0x8000L) != 0L)
            return 39;
         return -1;
      case 23:
         if ((active3 & 0x8L) != 0L)
            return 39;
         if ((active1 & 0x200000000000L) != 0L || (active3 & 0x40000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 23;
            return 39;
         }
         return -1;
      case 24:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 24;
            return 39;
         }
         if ((active3 & 0x40000L) != 0L)
            return 39;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStartNfaWithStates_1(0, 4, 1);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         jjmatchedKind = 248;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x8000000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 267;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x100000L);
      case 38:
         jjmatchedKind = 264;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x20002L);
      case 40:
         jjmatchedKind = 236;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x1000000000L);
      case 41:
         return jjStopAtPos(0, 237);
      case 42:
         jjmatchedKind = 262;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x2000008000L);
      case 43:
         jjmatchedKind = 260;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x2004L);
      case 44:
         return jjStopAtPos(0, 243);
      case 45:
         jjmatchedKind = 261;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x8004008L);
      case 46:
         jjmatchedKind = 244;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x1000000L);
      case 47:
         jjmatchedKind = 263;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x10000L);
      case 58:
         return jjStopAtPos(0, 251);
      case 59:
         return jjStopAtPos(0, 242);
      case 60:
         jjmatchedKind = 247;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x2000000000000000L, 0x1e2201000L);
      case 61:
         jjmatchedKind = 246;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x1000000000000000L, 0x10000000L);
      case 62:
         jjmatchedKind = 291;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x4000000000000000L, 0x600c00000L);
      case 63:
         return jjStopAtPos(0, 250);
      case 64:
         return jjStopAtPos(0, 245);
      case 91:
         return jjStopAtPos(0, 240);
      case 92:
         jjmatchedKind = 282;
         return jjMoveStringLiteralDfa1_1(0x0L, 0xc000004800100780L, 0xfffdeffe0000L, 0x0L, 0x0L);
      case 93:
         return jjStopAtPos(0, 241);
      case 94:
         jjmatchedKind = 266;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa1_1(0xc0000L, 0xc000002000000L, 0x600L, 0x7800300L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x700000L, 0x0L, 0x3000000006000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x1f800000L, 0x3000000411800000L, 0x1940L, 0x433000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0xe0000000L, 0x83c00000000000L, 0x0L, 0x80030L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x700000000L, 0x100000000L, 0x1430000000000000L, 0x20000003L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0xf800000000L, 0x0L, 0x0L, 0x10000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x10000000000L, 0x8000L, 0x0L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x300000000041800L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x7e0000000000L, 0xc00003000020000L, 0x4L, 0x8000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x800000000000L, 0x300000000000L, 0x200000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x0L, 0xd8200002000L, 0x20L, 0x8030cc00L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x7000000000000L, 0xe0000000L, 0xc000000000000L, 0x40000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x80L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x78000000000000L, 0x10000L, 0x2a00000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x80000000000000L, 0x20000000000000L, 0x18000000001800bL, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x3f00000000000000L, 0x1002000c604000L, 0xc040000010000000L, 0xcL, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0xc000000000000000L, 0xfL, 0x0L, 0x0L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40000000080000L, 0x0L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x30L, 0x0L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40L, 0x10L, 0x400c0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 238);
      case 124:
         jjmatchedKind = 265;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x0L, 0x0L, 0x40001L);
      case 125:
         return jjStopAtPos(0, 239);
      case 126:
         return jjStopAtPos(0, 249);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0, long active1, long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active4 & 0x2L) != 0L)
            return jjStopAtPos(1, 257);
         break;
      case 41:
         if ((active4 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 293);
         break;
      case 42:
         if ((active4 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 292);
         break;
      case 43:
         if ((active4 & 0x4L) != 0L)
            return jjStopAtPos(1, 258);
         break;
      case 45:
         if ((active4 & 0x8L) != 0L)
            return jjStopAtPos(1, 259);
         else if ((active4 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 281);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000L);
      case 58:
         if ((active4 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 288);
         break;
      case 60:
         if ((active4 & 0x1000L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000L);
      case 61:
         if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 254);
         else if ((active3 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 255);
         else if ((active4 & 0x2000L) != 0L)
            return jjStopAtPos(1, 269);
         else if ((active4 & 0x4000L) != 0L)
            return jjStopAtPos(1, 270);
         else if ((active4 & 0x8000L) != 0L)
            return jjStopAtPos(1, 271);
         else if ((active4 & 0x10000L) != 0L)
            return jjStopAtPos(1, 272);
         else if ((active4 & 0x20000L) != 0L)
            return jjStopAtPos(1, 273);
         else if ((active4 & 0x40000L) != 0L)
            return jjStopAtPos(1, 274);
         else if ((active4 & 0x80000L) != 0L)
            return jjStopAtPos(1, 275);
         else if ((active4 & 0x100000L) != 0L)
            return jjStopAtPos(1, 276);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xf0000000L);
      case 62:
         if ((active4 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 283);
         else if ((active4 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 290;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200c00000L);
      case 84:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x9000801800000L, active1, 0xd8000000000L, active2, 0x40000000000000L, active3, 0x33000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000L, active1, 0L, active2, 0x600L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x6000000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x82000020000000L, active1, 0x43b3c00200041800L, active2, 0x18300810001800bL, active3, 0xc000L, active4, 0L);
      case 102:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 41, 39);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x4002000000L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0xc100000002000000L, active1, 0x8041L, active2, 0x140L, active3, 0xc0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x3000000000L, active1, 0x4000000000L, active2, 0xc000001800000000L, active3, 0x3cL, active4, 0L);
      case 106:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x4104000000L, active1, 0x2000000L, active2, 0x402000000000L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0xc0000000000L, active1, 0L, active2, 0x10400000000L, active3, 0x8000000L, active4, 0L);
      case 110:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x700200000000L, active1, 0xc400020000a0000L, active2, 0x1400320040300004L, active3, 0L, active4, 0L);
      case 111:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x818098100000L, active1, 0x30003004318027b0L, active2, 0x280c800201c41820L, active3, 0xd0740c00L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0xc604000L, active2, 0x40010080000L, active3, 0L, active4, 0L);
      case 114:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(1, 135, 39);
         return jjMoveStringLiteralDfa2_1(active0, 0x30000000200000L, active1, 0xeL, active2, 0x200000004026010L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000L, active1, 0x800c000000000000L, active2, 0x80000000000L, active3, 0x800300L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x600000000000000L, active1, 0x20000000000L, active2, 0x80000000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x844000000000000L, active1, 0xc0010000L, active2, 0L, active3, 0x80000L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000000000L, active1, 0L, active2, 0x20000000L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000L, active1, 0x100000000L, active2, 0x30000000000000L, active3, 0x21000003L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000000400000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 124:
         if ((active4 & 0x1L) != 0L)
            return jjStopAtPos(1, 256);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_1(0, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1, active2, active3, active4);
      return 2;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000L);
      case 46:
         if ((active4 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 280);
         break;
      case 61:
         if ((active4 & 0x200000L) != 0L)
            return jjStopAtPos(2, 277);
         else if ((active4 & 0x400000L) != 0L)
            return jjStopAtPos(2, 278);
         else if ((active4 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 285;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000L);
      case 62:
         if ((active4 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 284);
         else if ((active4 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 289;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000L);
      case 89:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000006000000L, active1, 0x20000100002L, active2, 0x410000008L, active3, 0xc000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000000000L, active1, 0x80000000000000L, active2, 0x402000000000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000000000000L, active1, 0x3c00000000000L, active2, 0x30000200000000L, active3, 0x26000000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x11802000L, active2, 0L, active3, 0x80700c00L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000L, active1, 0xc604000L, active2, 0x200000004026000L, active3, 0xc0L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000L, active1, 0x20000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0xc000000000000000L, active3, 0xcL, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x3000000000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x5010000000000000L, active1, 0xc0000080050L, active2, 0x10000000014L, active3, 0x1000000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000800000000L, active1, 0xc0040020L, active2, 0x100040000L, active3, 0x3000L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x40000000000000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000803018000000L, active1, 0x3300004420001800L, active2, 0x801001c01820L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x120004000100000L, active1, 0x300000008000L, active2, 0x304060300140L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000c0000000000L, active1, 0x18000000000L, active2, 0x3L, active3, 0x8030000L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x180000000000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x8400000000000000L, active1, 0x40000000010781L, active2, 0xc040002080600L, active3, 0x500c0000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x1001008c0000L, active1, 0xc000002020000L, active2, 0x3c00000800000000L, active3, 0x800303L, active4, 0L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 116, 39);
         return jjMoveStringLiteralDfa3_1(active0, 0x81410401400000L, active1, 0x300000000L, active2, 0x18000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x280000000L, active1, 0x8000000000000004L, active2, 0xa0008000000L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x4c00000000000000L, active2, 0L, active3, 0x30L, active4, 0L);
      case 119:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 49, 39);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0L, active4, 0L);
      case 121:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(2, 67, 39);
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_1(1, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1, active2, active3, active4);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active4 & 0x800000L) != 0L)
            return jjStopAtPos(3, 279);
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000L);
      case 62:
         if ((active4 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 286);
         break;
      case 80:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x20000000L, active2, 0x200000800000000L, active3, 0x10000000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x7020200000L, active1, 0xc00000000000020L, active2, 0x3000004006000L, active3, 0x80000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000000001000000L, active1, 0x830000000c605800L, active2, 0x10000000L, active3, 0L, active4, 0L);
      case 100:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(3, 68, 39);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(3, 146);
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0L, active2, 0x8L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(3, 22, 39);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(3, 23, 39);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(3, 32, 39);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(3, 66, 39);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(3, 80, 39);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(3, 147);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 182, 39);
         else if ((active3 & 0x400000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x800400400080000L, active1, 0x4040000011802000L, active2, 0x30000102000000L, active3, 0xa6800030L, active4, 0L);
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 47, 39);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x401000000000000L, active1, 0x20000000000780L, active2, 0x8000000020L, active3, 0x300f00L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000000L, active1, 0L, active2, 0x200000000L, active3, 0x40000L, active4, 0L);
      case 108:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x40040000100000L, active1, 0xc0000040L, active2, 0xc02001c00000L, active3, 0x8003000L, active4, 0L);
      case 109:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(3, 33, 39);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(3, 171);
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0L, active2, 0xc020000000000L, active3, 0x40000000L, active4, 0L);
      case 110:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(3, 168);
         else if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0xc0000080002L, active2, 0xc000000040000000L, active3, 0x8cL, active4, 0L);
      case 111:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 40, 39);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(3, 89, 39);
         return jjMoveStringLiteralDfa4_1(active0, 0x8000080000000000L, active1, 0x1L, active2, 0x40000000140L, active3, 0x1000000L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x300000040000L, active2, 0x80000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(3, 25, 39);
         return jjMoveStringLiteralDfa4_1(active0, 0x100000000000000L, active1, 0x3c02100000000L, active2, 0x4028000003L, active3, 0L, active4, 0L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 62, 39);
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x80c000000L, active1, 0x3000010400008000L, active2, 0x20000L, active3, 0xc000L, active4, 0L);
      case 116:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x1220100010040000L, active1, 0x24000020000L, active2, 0x2000300000301814L, active3, 0x30000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000000000L, active1, 0x8c000000000000L, active2, 0x1580000000018600L, active3, 0x3L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_1(active0, 0x10000000000000L, active1, 0x100000L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 120:
         if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(3, 162);
         break;
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_1(2, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1, active2, active3, active4);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active4 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 287);
         break;
      case 69:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(4, 99);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x31001de04000L, active2, 0x2000220000300000L, active3, 0x80L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x18100000000000L, active1, 0x400001c0120000L, active2, 0xc00c005008000018L, active3, 0x4000300cL, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x1400000000000000L, active1, 0L, active2, 0x4000000L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0L, active2, 0x40000000000L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(4, 35, 39);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(4, 70, 39);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(4, 156, 39);
         return jjMoveStringLiteralDfa5_1(active0, 0x20040000100000L, active1, 0x303c02000041800L, active2, 0x80000003L, active3, 0x10000000L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x300c00L, active4, 0L);
      case 103:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 119, 39);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x780L, active2, 0L, active3, 0x300L, active4, 0L);
      case 104:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(4, 24, 39);
         return jjMoveStringLiteralDfa5_1(active0, 0x2000000000000000L, active1, 0x8000000000000000L, active2, 0x100000000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x240000010000000L, active1, 0x20000080000L, active2, 0x180000800001804L, active3, 0x8040000L, active4, 0L);
      case 107:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0L, active2, 0x20006000L, active3, 0L, active4, 0L);
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x2080000000L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0L);
      case 109:
         if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(4, 216, 39);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0xc000000000000L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x400000000L, active1, 0x20000020000000L, active2, 0x2040000000L, active3, 0L, active4, 0L);
      case 111:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(4, 102);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0L, active2, 0x30400000000600L, active3, 0x20000000L, active4, 0L);
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 59, 39);
         return jjMoveStringLiteralDfa5_1(active0, 0x804800000c0000L, active1, 0x4c00000000000000L, active2, 0x1600000000018000L, active3, 0x800033L, active4, 0L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(4, 26, 39);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x2L, active2, 0x8202000140L, active3, 0x6000000L, active4, 0L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 38, 39);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 56, 39);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(4, 79, 39);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x30000c0400000020L, active2, 0x20L, active3, 0x80000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x20000000L, active1, 0L, active2, 0x20000L, active3, 0x3c000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000000000L, active1, 0L, active2, 0x3000000000000L, active3, 0L, active4, 0L);
      case 119:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0L, active2, 0x800001c00000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_1(3, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1, active2, active3, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x8000000000101800L, active2, 0x800001c00000L, active3, 0x80000000L);
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x140000L, active1, 0x3cc0000000000L, active2, 0x100004L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x3000000d8000000L, active2, 0x18L, active3, 0x3000L);
      case 99:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 54, 39);
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x20000000000000L, active1, 0x40020100000000L, active2, 0L, active3, 0L);
      case 100:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(5, 97, 39);
         return jjMoveStringLiteralDfa6_1(active0, 0x400000000L, active1, 0x2000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(5, 31, 39);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 48, 39);
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x8000000000000L, active2, 0x1600002200000100L, active3, 0x8000003L);
      case 102:
         return jjMoveStringLiteralDfa6_1(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0x30L);
      case 104:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 60, 39);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 153);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 154);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0xc203000000007a2L, active2, 0x3100020000000L, active3, 0x380c00L);
      case 106:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0xa00000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_1(active0, 0x2020000000L, active1, 0L, active2, 0xc00c004000020000L, active3, 0x4000000cL);
      case 109:
         return jjMoveStringLiteralDfa6_1(active0, 0x40000000000L, active1, 0L, active2, 0x200000L, active3, 0L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0x100010000000L, active1, 0x20000L, active2, 0x800019800L, active3, 0x40300L);
      case 111:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0L, active2, 0x420080000020L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x4004000L, active2, 0L, active3, 0L);
      case 114:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(5, 82, 39);
         return jjMoveStringLiteralDfa6_1(active0, 0x2000000000000000L, active1, 0x3000010400000000L, active2, 0x2180001000000000L, active3, 0x3c080L);
      case 115:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_1(5, 64, 39);
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x1400000L, active2, 0x200000004003L, active3, 0x6000000L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 43, 39);
         return jjMoveStringLiteralDfa6_1(active0, 0x410000000000000L, active1, 0x80000L, active2, 0x30008108000600L, active3, 0x20800000L);
      case 117:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x20000000L, active2, 0x40040000000L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000L);
      case 121:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(4, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, active1, active2, active3, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x8020000000000L, active2, 0xc000000004700L, active3, 0x40800000L);
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x400000000000L, active1, 0x3c00000001e00000L, active2, 0x800000400000L, active3, 0x10000f00L);
      case 98:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x1800L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x100000040000L, active1, 0x20000L, active2, 0x40001800000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0L, active2, 0x200000000000000L, active3, 0L);
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 51, 39);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 52, 39);
         return jjMoveStringLiteralDfa7_1(active0, 0x40000000000L, active1, 0x10000000002L, active2, 0x2180000000000003L, active3, 0x33c0b0L);
      case 102:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(6, 159);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(6, 169);
         return jjMoveStringLiteralDfa7_1(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(6, 165);
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000L);
      case 104:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0xc0018080000L, active2, 0x30001808000000L, active3, 0x26000000L);
      case 108:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(6, 166);
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0xe0000020L, active2, 0x4000001cL, active3, 0x3000L);
      case 109:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(6, 20, 39);
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x20300000000780L, active2, 0x100020000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x2000000000000000L, active1, 0L, active2, 0x3000000200000L, active3, 0x80000L);
      case 112:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0L, active2, 0x200000000000L, active3, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x4000L, active2, 0x20L, active3, 0L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(6, 34, 39);
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(6, 167);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(6, 174);
         else if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x3c00000000000L, active2, 0x9000000000110000L, active3, 0x800000eL);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(6, 29, 39);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(6, 96, 39);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(6, 145);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(6, 161, 39);
         return jjMoveStringLiteralDfa7_1(active0, 0x20000000000000L, active1, 0xc000000000000000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x10000000L, active1, 0x2404000000L, active2, 0x1800L, active3, 0L);
      case 121:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 37, 39);
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x200000000000000L, active2, 0x100000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(5, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, active1, active2, active3, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x200000000000000L, active2, 0x9000000000010000L, active3, 0x804000eL);
      case 97:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x40000000180780L, active2, 0x1001800000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x4000000L, active2, 0xc000000000600L, active3, 0x6000f00L);
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0x400000000000L, active1, 0x400000000L, active2, 0x400000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x10000000000L, active2, 0x2000000000200000L, active3, 0xc080L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(7, 69, 39);
         else if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(7, 131, 39);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(7, 132, 39);
         else if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active0, 0x20100000000000L, active1, 0x3000080000000L, active2, 0x200000001800L, active3, 0x40002000L);
      case 102:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x1400000L, active2, 0L, active3, 0L);
      case 103:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 117, 39);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(7, 172);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x18000000L, active2, 0x20000000L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0xc000000000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x3000c20000000000L, active2, 0x100L, active3, 0L);
      case 108:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(7, 93, 39);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0L, active2, 0x40000004L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa8_1(active0, 0x2000040000000000L, active1, 0xc000c2000000002L, active2, 0x3L, active3, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x4000L, active2, 0x30000008000000L, active3, 0x20000000L);
      case 112:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 58, 39);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L);
      case 114:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 176, 39);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x8000000000000L, active2, 0x4000L, active3, 0x80800000L);
      case 115:
         if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0L, active2, 0x100800000100020L, active3, 0x220020L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(7, 18, 39);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(7, 170);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0L, active2, 0x202000000000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x300000a00000L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(6, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, active1, active2, active3, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x80001000L, active2, 0x100000020000020L, active3, 0x2ae020L);
      case 97:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x8000300000a00000L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0L, active2, 0x200000400000L, active3, 0L);
      case 100:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 53, 39);
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 46, 39);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(8, 160);
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x8000001400000L, active2, 0xc000040004600L, active3, 0x800000L);
      case 102:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(8, 136, 39);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0x2000000000000000L, active1, 0x40000c0018000000L, active2, 0x800300000L, active3, 0L);
      case 108:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x4080380L, active2, 0x1000000L, active3, 0x6000f00L);
      case 110:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(8, 155);
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x3000c20000000000L, active2, 0x230001000000000L, active3, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0x8000000cL);
      case 112:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0L, active2, 0x800000L, active3, 0x10000000L);
      case 114:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 177, 39);
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x200000000000000L, active2, 0x9000000000010000L, active3, 0x2L);
      case 115:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x2000000000000L, active2, 0x800000001000L, active3, 0x40000L);
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(8, 65, 39);
         else if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_1(active0, 0x40000000000L, active1, 0x800000400104000L, active2, 0x3L, active3, 0x8000000L);
      case 117:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x10000000000L, active2, 0x2000000000000000L, active3, 0x80L);
      case 120:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000L);
      case 121:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(8, 130, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(7, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(7, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, active1, active2, active3, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x802000001e00380L, active2, 0x1000L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x2000000000L, active2, 0x30000800000000L, active3, 0x60000000L);
      case 98:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0xc000L);
      case 100:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x8000000000000L, active2, 0x200000000004000L, active3, 0x800000L);
      case 101:
         if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x200000000004000L, active2, 0x9000000000410000L, active3, 0x4000a02L);
      case 102:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 44, 39);
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0L, active2, 0x200020L, active3, 0L);
      case 103:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x800000000000L, active2, 0x100000L, active3, 0x80000000L);
      case 104:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(9, 84);
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0L, active2, 0xc000000000600L, active3, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x20004080000L, active2, 0xa00000000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x40000000000000L, active2, 0x41000000L, active3, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x40000d0018000000L, active2, 0x2000000000000000L, active3, 0x8cL);
      case 111:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x300000001000L, active2, 0x100000000000000L, active3, 0x2a2020L);
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 42, 39);
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0L, active2, 0x20000002L, active3, 0L);
      case 116:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(9, 127);
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x2000000000000000L, active2, 0x1000800000L, active3, 0L);
      case 122:
         return jjMoveStringLiteralDfa10_1(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa10_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(8, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0, active1, active2, active3, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x2000800000000000L, active2, 0x1000000002L, active3, 0x4000a00L);
      case 97:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0L, active2, 0x20c000000000600L, active3, 0x8040000L);
      case 99:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(10, 90, 39);
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x4300L, active2, 0L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x200010000000000L, active2, 0xb000000000010000L, active3, 0x82L);
      case 101:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(10, 118, 39);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(10, 220, 39);
         return jjMoveStringLiteralDfa11_1(active0, 0x2000000000000000L, active1, 0x1000L, active2, 0x100000041000000L, active3, 0x2a2020L);
      case 102:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0L, active2, 0x200000000000L, active3, 0L);
      case 103:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(10, 126);
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x80000000000L, active2, 0x800000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x300000000000L, active2, 0x200000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0L, active2, 0x30000800000000L, active3, 0x2000000cL);
      case 109:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x1e00000L, active2, 0L, active3, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x2000000000L, active2, 0x100000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0L, active2, 0x20L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L);
      case 114:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(10, 98, 39);
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x802000000000000L, active2, 0x1000L, active3, 0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x80L, active2, 0x400000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x20018000000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x8000000000000L, active2, 0x804000L, active3, 0x800000L);
      case 121:
         if ((active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0x8000L);
      case 122:
         return jjMoveStringLiteralDfa11_1(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa11_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(9, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0, active1, active2, active3, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x80098000000L, active2, 0x30000000000000L, active3, 0x20008000L);
      case 97:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x310001e00100L, active2, 0x2000000020000000L, active3, 0x80000080L);
      case 99:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000L);
      case 100:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(11, 61, 39);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(11, 152);
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x1000L, active2, 0x100000000000000L, active3, 0x2a2020L);
      case 101:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x802000000080000L, active2, 0x301000L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0L, active2, 0x1000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x20000000000L, active2, 0x200800000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x8000000000000L, active2, 0x200800000004000L, active3, 0x800000L);
      case 112:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x80L, active2, 0L, active3, 0x40000000L);
      case 114:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(11, 133, 39);
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x2000800000000000L, active2, 0x800002L, active3, 0x4000a00L);
      case 115:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0L);
      case 116:
         if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(11, 219, 39);
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x2000004000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0x200000000000000L, active2, 0x9000000000010000L, active3, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0L, active2, 0xc000000000600L, active3, 0L);
      case 121:
         if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_1(active0, 0L, active1, 0L, active2, 0L, active3, 0x8L);
      default :
         break;
   }
   return jjStartNfa_1(10, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa12_1(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(10, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, 0L, active1, active2, active3, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa13_1(active1, 0L, active2, 0L, active3, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa13_1(active1, 0x20000000200L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa13_1(active1, 0L, active2, 0x30000000000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_1(active1, 0L, active2, 0x20000000L, active3, 0L);
      case 100:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(12, 83, 39);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(12, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(12, 149);
         return jjMoveStringLiteralDfa13_1(active1, 0x80a000080000000L, active2, 0x5000L, active3, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa13_1(active1, 0x2000800000004080L, active2, 0xa00040c00002L, active3, 0x24040a00L);
      case 105:
         return jjMoveStringLiteralDfa13_1(active1, 0L, active2, 0xc000000000600L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa13_1(active1, 0x2000000000L, active2, 0L, active3, 0x40000000L);
      case 109:
         if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(12, 223, 39);
         return jjMoveStringLiteralDfa13_1(active1, 0x18000000L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa13_1(active1, 0x200310000000000L, active2, 0xb000000000010000L, active3, 0x82L);
      case 111:
         return jjMoveStringLiteralDfa13_1(active1, 0L, active2, 0x1000000000L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_1(active1, 0x80000000000L, active2, 0L, active3, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa13_1(active1, 0x100L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_1(active1, 0x1e00000L, active2, 0x200000000000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa13_1(active1, 0x1000L, active2, 0x100000000000000L, active3, 0x2a2020L);
      case 122:
         return jjMoveStringLiteralDfa13_1(active1, 0L, active2, 0x800000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(11, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa13_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(11, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(12, 0L, active1, active2, active3, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa14_1(active1, 0L, active2, 0L, active3, 0x40000L);
      case 97:
         return jjMoveStringLiteralDfa14_1(active1, 0x8000018000000L, active2, 0x4000L, active3, 0x800000L);
      case 99:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(13, 71);
         break;
      case 100:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(13, 78, 39);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(13, 150);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(13, 151);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(13, 173);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStopAtPos(13, 175);
         return jjMoveStringLiteralDfa14_1(active1, 0x2200800000000000L, active2, 0x9000000000010002L, active3, 0x4000a02L);
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(13, 72);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(13, 157);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(13, 222, 39);
         return jjMoveStringLiteralDfa14_1(active1, 0x80080000000L, active2, 0x30000800000000L, active3, 0x8000L);
      case 104:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(13, 85, 39);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(13, 86, 39);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(13, 87, 39);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(13, 88, 39);
         break;
      case 108:
         return jjMoveStringLiteralDfa14_1(active1, 0x20000000000L, active2, 0x200000000000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa14_1(active1, 0x1000L, active2, 0x100000040000000L, active3, 0x2a2020L);
      case 111:
         return jjMoveStringLiteralDfa14_1(active1, 0L, active2, 0xc000000000600L, active3, 0L);
      case 114:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(13, 164);
         return jjMoveStringLiteralDfa14_1(active1, 0L, active2, 0L, active3, 0x8L);
      case 116:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_1(active1, 0x210000000000L, active2, 0x2000000000000000L, active3, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa14_1(active1, 0x802000000000200L, active2, 0x1000L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa14_1(active1, 0L, active2, 0L, active3, 0x20000000L);
      case 121:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(13, 101, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(12, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa14_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(12, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(13, 0L, active1, active2, active3, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_1(active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa15_1(active1, 0x200000000000000L, active2, 0x9000000000010000L, active3, 0x20000002L);
      case 100:
         if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(14, 163);
         return jjMoveStringLiteralDfa15_1(active1, 0x80000001000L, active2, 0x100000000000000L, active3, 0x2aa020L);
      case 101:
         return jjMoveStringLiteralDfa15_1(active1, 0L, active2, 0L, active3, 0x8L);
      case 102:
         return jjMoveStringLiteralDfa15_1(active1, 0x80000000L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa15_1(active1, 0L, active2, 0x30000000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa15_1(active1, 0x20000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa15_1(active1, 0x10000000000L, active2, 0x2000000000000000L, active3, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa15_1(active1, 0x80a000000000000L, active2, 0x5000L, active3, 0x800000L);
      case 114:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(14, 137, 39);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(14, 178, 39);
         return jjMoveStringLiteralDfa15_1(active1, 0L, active2, 0L, active3, 0x40000L);
      case 115:
         return jjMoveStringLiteralDfa15_1(active1, 0x200L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa15_1(active1, 0x18000000L, active2, 0x40000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa15_1(active1, 0x2000800000000000L, active2, 0x8000000000402L, active3, 0x4000a00L);
      case 121:
         if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(14, 185, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(13, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa15_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(13, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(14, 0L, active1, active2, active3, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_1(active1, 0x80001000L, active2, 0x130000000000000L, active3, 0x2a2020L);
      case 100:
         return jjMoveStringLiteralDfa16_1(active1, 0x802000000000000L, active2, 0x1000L, active3, 0x8L);
      case 101:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(15, 73);
         return jjMoveStringLiteralDfa16_1(active1, 0L, active2, 0L, active3, 0x40000L);
      case 104:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(15, 91, 39);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(15, 92, 39);
         break;
      case 109:
         return jjMoveStringLiteralDfa16_1(active1, 0L, active2, 0L, active3, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa16_1(active1, 0x2200800000000000L, active2, 0x9000000000010002L, active3, 0x4000a02L);
      case 114:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(15, 138, 39);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(15, 179, 39);
         return jjMoveStringLiteralDfa16_1(active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 115:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(15, 158);
         break;
      case 116:
         return jjMoveStringLiteralDfa16_1(active1, 0x8000000000000L, active2, 0x4000L, active3, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa16_1(active1, 0x80000000000L, active2, 0L, active3, 0x8000L);
      case 121:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(15, 104, 39);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(15, 189, 39);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(15, 199, 39);
         break;
      case 122:
         return jjMoveStringLiteralDfa16_1(active1, 0x20000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(14, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa16_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(14, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(15, 0L, active1, active2, active3, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa17_1(active1, 0x802000000000000L, active2, 0x1000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa17_1(active1, 0x2000800000000000L, active2, 0x2L, active3, 0x4040a00L);
      case 101:
         return jjMoveStringLiteralDfa17_1(active1, 0x220000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa17_1(active1, 0x8000000000000L, active2, 0x4000L, active3, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa17_1(active1, 0x80000001000L, active2, 0x100000000000000L, active3, 0x2aa020L);
      case 112:
         return jjMoveStringLiteralDfa17_1(active1, 0L, active2, 0L, active3, 0x20000000L);
      case 116:
         return jjMoveStringLiteralDfa17_1(active1, 0x200000000000000L, active2, 0x9000000000010000L, active3, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa17_1(active1, 0x80000000L, active2, 0L, active3, 0x8L);
      case 118:
         return jjMoveStringLiteralDfa17_1(active1, 0L, active2, 0x30000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_1(15, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa17_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(15, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(16, 0L, active1, active2, active3, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_1(active1, 0x2000800000000000L, active2, 0x2L, active3, 0x4000a00L);
      case 100:
         return jjMoveStringLiteralDfa18_1(active1, 0x280000000000L, active2, 0L, active3, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa18_1(active1, 0L, active2, 0x30000000000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa18_1(active1, 0x200000080000000L, active2, 0x9000000000010000L, active3, 0x20000002L);
      case 110:
         return jjMoveStringLiteralDfa18_1(active1, 0x802000000000000L, active2, 0x1000L, active3, 0x8L);
      case 114:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(17, 105, 39);
         break;
      case 116:
         return jjMoveStringLiteralDfa18_1(active1, 0x1000L, active2, 0x100000000000000L, active3, 0x2a2020L);
      case 117:
         return jjMoveStringLiteralDfa18_1(active1, 0L, active2, 0L, active3, 0x40000L);
      case 121:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(17, 115, 39);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(17, 142, 39);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(17, 215, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(16, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa18_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(16, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(17, 0L, active1, active2, active3, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa19_1(active1, 0x80000000000L, active2, 0L, active3, 0x8000L);
      case 100:
         return jjMoveStringLiteralDfa19_1(active1, 0L, active2, 0L, active3, 0x8L);
      case 101:
         if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(18, 221, 39);
         break;
      case 108:
         return jjMoveStringLiteralDfa19_1(active1, 0x1000L, active2, 0x100000000000000L, active3, 0x2a2020L);
      case 110:
         return jjMoveStringLiteralDfa19_1(active1, 0x2000800000000000L, active2, 0x2L, active3, 0x4040a00L);
      case 111:
         return jjMoveStringLiteralDfa19_1(active1, 0L, active2, 0x30000000000000L, active3, 0L);
      case 116:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(18, 95, 39);
         return jjMoveStringLiteralDfa19_1(active1, 0x802000000000000L, active2, 0x1000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa19_1(active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(18, 121, 39);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(18, 144, 39);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(18, 188, 39);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_1(18, 191, 39);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(18, 193, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(17, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa19_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(17, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(18, 0L, active1, active2, active3, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa20_1(active1, 0L, active2, 0L, active3, 0x8L);
      case 100:
         return jjMoveStringLiteralDfa20_1(active1, 0L, active2, 0L, active3, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa20_1(active1, 0x802000000000000L, active2, 0x1000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa20_1(active1, 0x280000000000L, active2, 0L, active3, 0x8000L);
      case 114:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(19, 180, 39);
         break;
      case 116:
         return jjMoveStringLiteralDfa20_1(active1, 0x2000800000000000L, active2, 0x2L, active3, 0x4000a00L);
      case 117:
         return jjMoveStringLiteralDfa20_1(active1, 0L, active2, 0x20000000000000L, active3, 0L);
      case 121:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(19, 76, 39);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(19, 184, 39);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(19, 197, 39);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(19, 205, 39);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(19, 209, 39);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(19, 211, 39);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(19, 213, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(18, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa20_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(18, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(19, 0L, active1, active2, active3, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_1(active1, 0L, active2, 0L, active3, 0x40000L);
      case 100:
         return jjMoveStringLiteralDfa21_1(active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa21_1(active1, 0x2000800000000000L, active2, 0x2L, active3, 0x4000a00L);
      case 110:
         return jjMoveStringLiteralDfa21_1(active1, 0L, active2, 0L, active3, 0x8L);
      case 114:
         if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(20, 181, 39);
         break;
      case 116:
         return jjMoveStringLiteralDfa21_1(active1, 0x80000000000L, active2, 0L, active3, 0x8000L);
      case 121:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(20, 113, 39);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(20, 123, 39);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(20, 140, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(19, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa21_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(19, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(20, 0L, active1, active2, active3, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa22_1(active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa22_1(active1, 0x80000000000L, active2, 0L, active3, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa22_1(active1, 0L, active2, 0L, active3, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa22_1(active1, 0L, active2, 0L, active3, 0x8L);
      case 121:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(21, 111, 39);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(21, 125, 39);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(21, 129, 39);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(21, 201, 39);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(21, 203, 39);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(21, 218, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(20, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa22_1(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(20, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(21, 0L, active1, 0L, active3, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa23_1(active1, 0L, active3, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa23_1(active1, 0x200000000000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa23_1(active1, 0L, active3, 0x40000L);
      case 121:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(22, 107, 39);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(22, 207, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(21, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa23_1(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(21, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(22, 0L, active1, 0L, active3, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa24_1(active1, 0L, active3, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa24_1(active1, 0x200000000000L, active3, 0L);
      case 121:
         if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(23, 195, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(22, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa24_1(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(22, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(23, 0L, active1, 0L, active3, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa25_1(active1, 0x200000000000L, active3, 0L);
      case 121:
         if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(24, 210, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(23, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa25_1(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(23, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(24, 0L, active1, 0L, 0L, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 121:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(25, 109, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_1(24, 0L, active1, 0L, 0L, 0L);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 59;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 39:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 34:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 59:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(49, 51);
                  else if (curChar == 39)
                     jjAddStates(52, 53);
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 224)
                        kind = 224;
                     jjCheckNAddTwoStates(4, 5);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 224)
                        kind = 224;
                     jjCheckNAddStates(54, 56);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddStates(57, 59);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if (curChar == 39)
                     jjAddStates(52, 53);
                  break;
               case 13:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if (curChar == 39 && kind > 230)
                     kind = 230;
                  break;
               case 16:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 14);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 19:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 21:
                  if (curChar == 34)
                     jjCheckNAddStates(49, 51);
                  break;
               case 22:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 24:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 25:
                  if (curChar == 34 && kind > 231)
                     kind = 231;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(60, 63);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 28:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 38:
                  if (curChar != 36)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar != 46)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddStates(64, 66);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddStates(64, 66);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddTwoStates(46, 11);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 228)
                     kind = 228;
                  jjCheckNAddTwoStates(50, 11);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 11);
                  break;
               case 55:
                  if (curChar != 48)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddStates(54, 56);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddTwoStates(57, 5);
                  break;
               case 58:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddTwoStates(58, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(30);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(30);
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 232)
                        kind = 232;
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 5:
                  if ((0x100000001000L & l) != 0L && kind > 224)
                     kind = 224;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 11:
                  if ((0x5000000050L & l) != 0L && kind > 228)
                     kind = 228;
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 92)
                     jjAddStates(72, 74);
                  break;
               case 16:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 23:
                  if (curChar == 92)
                     jjAddStates(75, 77);
                  break;
               case 24:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 30:
                  if (curChar == 101 && kind > 232)
                     kind = 232;
                  break;
               case 33:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 37:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(80, 81);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(82, 83);
                  break;
               case 56:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 224)
                     kind = 224;
                  jjCheckNAddTwoStates(57, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 39:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 34:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 36:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 31:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 59:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(39);
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(49, 51);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 59 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   42, 43, 48, 49, 52, 53, 12, 23, 24, 26, 14, 16, 57, 59, 6, 8, 
   9, 12, 23, 24, 28, 26, 44, 45, 12, 52, 53, 12, 10, 11, 17, 18, 
   20, 25, 27, 29, 46, 47, 50, 51, 54, 55, 41, 42, 47, 48, 51, 52, 
   11, 22, 23, 25, 13, 15, 56, 58, 5, 7, 8, 11, 22, 23, 27, 25, 
   43, 44, 11, 51, 52, 11, 9, 10, 16, 17, 19, 24, 26, 28, 45, 46, 
   49, 50, 53, 54, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\141\142\163\164\162\141\143\164", 
"\141\163\163\145\162\164", "\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", 
"\143\141\163\145", "\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", 
"\143\157\156\163\164", "\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", 
"\144\157", "\144\157\165\142\154\145", "\145\154\163\145", "\145\156\165\155", 
"\145\170\164\145\156\144\163", "\146\141\154\163\145", "\146\151\156\141\154", 
"\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", "\147\157\164\157", "\151\146", 
"\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", 
"\151\156\164", "\151\156\164\145\162\146\141\143\145", "\154\157\156\147", 
"\156\141\164\151\166\145", "\156\145\167", "\156\165\154\154", "\160\141\143\153\141\147\145", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\164\165\162\156", "\163\150\157\162\164", "\163\164\141\164\151\143", 
"\163\164\162\151\143\164\146\160", "\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", 
"\134\157\162\151\147\151\156\141\154\137\163\160\145\143", "\134\157\162\151\147\151\156\141\154\137\143\141\163\145", 
"\134\157\162\151\147\151\156\141\154\137\143\154\141\165\163\145", "\134\157\162\151\147\151\156\141\154", "\150\145\156\143\145\137\142\171", 
"\150\145\156\143\145\137\142\171\137\162\145\144\165\156\144\141\156\164\154\171", "\155\157\144\145\154", 
"\163\160\145\143\137\160\162\157\164\145\143\164\145\144", "\147\150\157\163\164", "\160\165\162\145", 
"\151\156\163\164\141\156\143\145", "\150\145\154\160\145\162", 
"\165\156\151\156\151\164\151\141\154\151\172\145\144", "\134\152\141\166\141\137\155\141\164\150", 
"\163\160\145\143\137\152\141\166\141\137\155\141\164\150", "\163\160\145\143\137\163\141\146\145\137\155\141\164\150", 
"\143\157\144\145\137\152\141\166\141\137\155\141\164\150", "\143\157\144\145\137\163\141\146\145\137\155\141\164\150", 
"\141\154\163\157", "\163\160\145\143\137\160\165\142\154\151\143", 
"\163\160\145\143\137\142\151\147\151\156\164\137\155\141\164\150", "\143\157\144\145\137\142\151\147\151\156\164\137\155\141\164\150", 
"\156\157\156\137\156\165\154\154", "\156\165\154\154\141\142\154\145", 
"\156\165\154\154\141\142\154\145\137\142\171\137\144\145\146\141\165\154\164", "\145\170\164\162\141\143\164", "\155\145\164\150\157\144", 
"\143\157\156\163\164\162\165\143\164\157\162", "\134\124\131\120\105", "\151\156", 
"\151\156\137\162\145\144\165\156\144\141\156\164\154\171", "\134\151\156\164\157", "\155\141\160\163", 
"\155\141\160\163\137\162\145\144\165\156\144\141\156\164\154\171", "\163\164\141\164\151\143\137\151\156\151\164\151\141\154\151\172\145\162", 
"\155\141\151\156\164\141\151\156\151\156\147", 
"\155\141\151\156\164\141\151\156\151\156\147\137\162\145\144\165\156\144\141\156\164\154\171", "\154\157\157\160\137\151\156\166\141\162\151\141\156\164", 
"\154\157\157\160\137\151\156\166\141\162\151\141\156\164\137\162\145\144\165\156\144\141\156\164\154\171", "\144\145\143\162\145\141\163\151\156\147", 
"\144\145\143\162\145\141\163\151\156\147\137\162\145\144\165\156\144\141\156\164\154\171", "\144\145\143\162\145\141\163\145\163", 
"\144\145\143\162\145\141\163\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\141\163\163\165\155\145", 
"\141\163\163\165\155\145\137\162\145\144\165\156\144\141\156\164\154\171", "\163\145\164", "\162\145\146\151\156\151\156\147", 
"\165\156\162\145\141\143\150\141\142\154\145", "\144\145\142\165\147", "\150\145\156\143\145\142\171", 
"\150\145\156\143\145\142\171\137\162\145\144\165\156\144\141\156\164\154\171", "\151\156\166\141\162\151\141\156\164", 
"\151\156\166\141\162\151\141\156\164\137\162\145\144\165\156\144\141\156\164\154\171", "\143\157\156\163\164\162\141\151\156\164", 
"\143\157\156\163\164\162\141\151\156\164\137\162\145\144\165\156\144\141\156\164\154\171", "\134\145\166\145\162\171\164\150\151\156\147", 
"\134\163\165\143\150\137\164\150\141\164", "\162\145\160\162\145\163\145\156\164\163", 
"\162\145\160\162\145\163\145\156\164\163\137\162\145\144\165\156\144\141\156\164\154\171", "\151\156\151\164\151\141\154\154\171", "\162\145\141\144\141\142\154\145", 
"\167\162\151\164\141\142\154\145", "\155\157\156\151\164\157\162\163\137\146\157\162", 
"\143\150\157\157\163\145", "\157\162", "\143\150\157\157\163\145\137\151\146", 
"\141\142\162\165\160\164\137\142\145\150\141\166\151\157\162", "\141\142\162\165\160\164\137\142\145\150\141\166\151\157\165\162", 
"\143\157\156\164\151\156\165\145\163", 
"\143\157\156\164\151\156\165\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\142\162\145\141\153\163", 
"\142\162\145\141\153\163\137\162\145\144\165\156\144\141\156\164\154\171", "\162\145\164\165\162\156\163", 
"\162\145\164\165\162\156\163\137\162\145\144\165\156\144\141\156\164\154\171", "\134\162\145\163\165\154\164", "\134\157\154\144", "\134\160\162\145", 
"\134\156\157\164\137\141\163\163\151\147\156\145\144", "\134\156\157\164\137\155\157\144\151\146\151\145\144", 
"\134\157\156\154\171\137\141\143\143\145\163\163\145\144", "\134\157\156\154\171\137\143\141\160\164\165\162\145\144", 
"\134\157\156\154\171\137\143\141\154\154\145\144", "\134\146\162\145\163\150", "\134\162\145\141\143\150", 
"\134\144\165\162\141\164\151\157\156", "\163\160\141\143\145", 
"\134\167\157\162\153\151\156\147\137\163\160\141\143\145", "\134\156\157\156\156\165\154\154\145\154\145\155\145\156\164\163", 
"\134\164\171\160\145\157\146", "\134\145\154\145\155\164\171\160\145", "\154\157\143\153\163\145\164", 
"\134\155\141\170", "\134\151\163\137\151\156\151\164\151\141\154\151\172\145\144", 
"\134\151\156\166\141\162\151\141\156\164\137\146\157\162", "\134\154\142\154\156\145\147", "\134\146\157\162\141\154\154", 
"\134\145\170\151\163\164\163", "\134\155\151\156", "\134\156\165\155\137\157\146", 
"\134\160\162\157\144\165\143\164", "\134\163\165\155", "\134\156\157\164\150\151\156\147", 
"\134\156\157\164\137\163\160\145\143\151\146\151\145\144", "\134\154\142\154\160\157\163", 
"\134\157\156\154\171\137\141\163\163\151\147\156\145\144", "\142\145\150\141\166\151\157\162", "\142\145\150\141\166\151\157\165\162", 
"\156\157\162\155\141\154\137\142\145\150\141\166\151\157\162", "\156\157\162\155\141\154\137\142\145\150\141\166\151\157\165\162", 
"\145\170\143\145\160\164\151\157\156\141\154\137\142\145\150\141\166\151\157\162", 
"\145\170\143\145\160\164\151\157\156\141\154\137\142\145\150\141\166\151\157\165\162", "\163\141\155\145", "\162\145\161\165\151\162\145\163", 
"\162\145\161\165\151\162\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\160\162\145\137\162\145\144\165\156\144\141\156\164\154\171", 
"\145\156\163\165\162\145\163", "\160\157\163\164", 
"\145\156\163\165\162\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\160\157\163\164\137\162\145\144\165\156\144\141\156\164\154\171", 
"\163\151\147\156\141\154\163", 
"\163\151\147\156\141\154\163\137\162\145\144\165\156\144\141\156\164\154\171", "\145\170\163\165\162\145\163", 
"\145\170\163\165\162\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\163\151\147\156\141\154\163\137\157\156\154\171", 
"\163\151\147\156\141\154\163\137\157\156\154\171\137\162\145\144\165\156\144\141\156\164\154\171", "\144\151\166\145\162\147\145\163", 
"\144\151\166\145\162\147\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\167\150\145\156", 
"\167\150\145\156\137\162\145\144\165\156\144\141\156\164\154\171", "\141\163\163\151\147\156\141\142\154\145", 
"\141\163\163\151\147\156\141\142\154\145\137\162\145\144\165\156\144\141\156\164\154\171", "\155\157\144\151\146\151\141\142\154\145", 
"\155\157\144\151\146\151\141\142\154\145\137\162\145\144\165\156\144\141\156\164\154\171", "\143\141\154\154\141\142\154\145", 
"\143\141\154\154\141\142\154\145\137\162\145\144\165\156\144\141\156\164\154\171", "\155\145\141\163\165\162\145\144\137\142\171", 
"\155\145\141\163\165\162\145\144\137\142\171\137\162\145\144\165\156\144\141\156\164\154\171", "\143\141\160\164\165\162\145\163", 
"\143\141\160\164\165\162\145\163\137\162\145\144\165\156\144\141\156\164\154\171", 
"\167\157\162\153\151\156\147\137\163\160\141\143\145\137\162\145\144\165\156\144\141\156\164\154\171", 
"\144\165\162\141\164\151\157\156\137\162\145\144\165\156\144\141\156\164\154\171", "\155\157\144\151\146\151\145\163", 
"\155\157\144\151\146\151\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\143\157\144\145", 
"\141\163\163\145\162\164\137\162\145\144\165\156\144\141\156\164\154\171", "\141\170\151\157\155", "\141\143\143\145\163\163\151\142\154\145", 
"\141\143\143\145\163\163\151\142\154\145\137\162\145\144\165\156\144\141\156\164\154\171", "\151\155\160\154\151\145\163\137\164\150\141\164", 
"\146\157\162\137\145\170\141\155\160\154\145", 
"\145\170\143\145\160\164\151\157\156\141\154\137\145\170\141\155\160\154\145", "\156\157\162\155\141\154\137\145\170\141\155\160\154\145", 
"\155\157\144\145\154\137\160\162\157\147\162\141\155", null, null, null, null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\100", "\75", "\74", 
"\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", 
"\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", "\136", "\45", 
"\74\74", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", 
"\45\75", "\74\74\75", "\76\76\75", "\76\76\76\75", "\56\56\56", "\74\55", "\134", 
"\55\76", "\75\75\76", "\74\75\75", "\74\75\75\76", "\74\75\41\75\76", "\74\72", 
"\76\76\76", "\76\76", "\76", "\50\52", "\52\51", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_JML_SINGLE_LINE", 
   "IN_JML_MULTI_LINE", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 0, 0, -1, 0, 3, 4, 5, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffc0001L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffff3d1ffffffffL, 
   0x3fffffffffL, 
};
static final long[] jjtoSkip = {
   0x18ffeL, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
static final long[] jjtoSpecial = {
   0x1883eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
static final long[] jjtoMore = {
   0x27000L, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[60];
private final int[] jjstateSet = new int[120];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public JMLParserTokenManager(CharStream stream){
   input_stream = stream;
}
public JMLParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 60; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   t.offset = input_stream.getOffset();
   t.length = input_stream.getLength();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 17)
         {
            jjmatchedKind = 17;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 17)
         {
            jjmatchedKind = 17;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 17)
         {
            jjmatchedKind = 17;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 13 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}

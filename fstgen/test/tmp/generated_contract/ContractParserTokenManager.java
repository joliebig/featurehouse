/* Generated By:JavaCC: Do not edit this line. ContractParserTokenManager.java */
package tmp.generated_contract;
import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;
import cide.gparser.*;
public class ContractParserTokenManager implements ContractParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2L) != 0L)
            return 0;
         if ((active0 & 0xf000000000000000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 231;
            return 36;
         }
         if ((active3 & 0x4000000000000L) != 0L || (active4 & 0x400000L) != 0L)
            return 11;
         if ((active0 & 0x3e00000000L) != 0L || (active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 231;
            return 40;
         }
         if ((active0 & 0xb00L) != 0L || (active4 & 0x4020L) != 0L)
            return 5;
         if ((active0 & 0xfffffc1ffff0000L) != 0L || (active1 & 0xcfffffedfffbfe1cL) != 0L || (active2 & 0xffffc00084007fffL) != 0L || (active3 & 0x3bffffffL) != 0L)
         {
            jjmatchedKind = 231;
            return 43;
         }
         return -1;
      case 1:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x3L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 1;
            }
            return 35;
         }
         if ((active0 & 0x1c8030000000L) != 0L || (active1 & 0x300000c00008000L) != 0L || (active2 & 0x21L) != 0L)
            return 43;
         if ((active0 & 0x7fffe37dcfff0000L) != 0L || (active1 & 0xccffffe1fffb7e1cL) != 0L || (active2 & 0xffffc00084007fdeL) != 0L || (active3 & 0x3fffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 1;
            }
            return 43;
         }
         if ((active0 & 0x800L) != 0L)
            return 3;
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 1;
            }
            return 39;
         }
         return -1;
      case 2:
         if ((active0 & 0x982000000000L) != 0L || (active1 & 0x4000000000002L) != 0L || (active3 & 0x4000000L) != 0L)
            return 43;
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 2;
            }
            return 38;
         }
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 2;
            }
            return 63;
         }
         if ((active0 & 0xffff675defff0000L) != 0L || (active1 & 0xcffbffe9fffbfe1cL) != 0L || (active2 & 0xffffc00084007fdfL) != 0L || (active3 & 0x3bffffffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 2;
            }
            return 43;
         }
         return -1;
      case 3:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 3;
            }
            return 63;
         }
         if ((active0 & 0x10012040c0b00000L) != 0L || (active1 & 0x6034e04005L) != 0L || (active2 & 0xa10000000000000L) != 0L || (active3 & 0x100030L) != 0L)
            return 43;
         if ((active0 & 0xeffe571d2f4f0000L) != 0L || (active1 & 0xcffbff89cb1bbe18L) != 0L || (active2 & 0xf5efc00084007fdfL) != 0L || (active3 & 0x3fefffcfL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 3;
            }
            return 43;
         }
         return -1;
      case 4:
         if ((active0 & 0x8dbe57012c070000L) != 0L || (active1 & 0xc3dbffc8ff7b9608L) != 0L || (active2 & 0xfdefc000800067dfL) != 0L || (active3 & 0x1fafffefL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 4;
            }
            return 43;
         }
         if ((active0 & 0x6240001e03480000L) != 0L || (active1 & 0xc20000100002810L) != 0L || (active2 & 0x4001800L) != 0L || (active3 & 0x20400000L) != 0L)
            return 43;
         return -1;
      case 5:
         if ((active0 & 0x44b0420020020000L) != 0L || (active1 & 0x3008080010000L) != 0L || (active2 & 0x7850L) != 0L || (active3 & 0x200000L) != 0L)
            return 43;
         if ((active0 & 0x890e15090c050000L) != 0L || (active1 & 0xcfd8ff497f7a9608L) != 0L || (active2 & 0xfdefc0008000078fL) != 0L || (active3 & 0x3f8fffefL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 5;
            }
            return 43;
         }
         return -1;
      case 6:
         if ((active0 & 0x6000908040000L) != 0L || (active1 & 0xc0000040000000L) != 0L || (active2 & 0xf500000080006000L) != 0L || (active3 & 0x3L) != 0L)
            return 43;
         if ((active0 & 0x8908150004010000L) != 0L || (active1 & 0xcf1affc93f7a9608L) != 0L || (active2 & 0x8efc000000017cfL) != 0L || (active3 & 0x3fafffecL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 6;
            }
            return 43;
         }
         return -1;
      case 7:
         if ((active0 & 0x8808110000000000L) != 0L || (active1 & 0xcf92ffc9077a1000L) != 0L || (active2 & 0xac8f8000000051c9L) != 0L || (active3 & 0x3fa333e3L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 7;
            }
            return 43;
         }
         if ((active0 & 0x100040004010000L) != 0L || (active1 & 0x8000038008608L) != 0L || (active2 & 0x60400000000606L) != 0L || (active3 & 0xccc0cL) != 0L)
            return 43;
         return -1;
      case 8:
         if ((active0 & 0x8008100000000000L) != 0L || (active1 & 0x300c00000000000L) != 0L || (active2 & 0x800000000641L) != 0L)
            return 43;
         if ((active0 & 0x800050000000000L) != 0L || (active1 & 0xcc923fc9277a1400L) != 0L || (active2 & 0xaccf000000005188L) != 0L || (active3 & 0x3fabbbebL) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 8;
            }
            return 43;
         }
         return -1;
      case 9:
         if ((active0 & 0x50000000000L) != 0L || (active1 & 0xcc00300000000000L) != 0L || (active3 & 0x18003c0L) != 0L)
            return 43;
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x2928fc9277a1400L) != 0L || (active2 & 0xaccf000000005588L) != 0L || (active3 & 0x3e2bb82bL) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 9;
            }
            return 43;
         }
         return -1;
      case 10:
         if ((active1 & 0x10030101000000L) != 0L || (active3 & 0x4003000L) != 0L)
            return 43;
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x8a82acc8267a1400L) != 0L || (active2 & 0xaccf000000005588L) != 0L || (active3 & 0x3b2b8aabL) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 10;
            }
            return 43;
         }
         return -1;
      case 11:
         if ((active1 & 0x8a82aec8267a1400L) != 0L || (active2 & 0xaccf000000005580L) != 0L || (active3 & 0x392baaa8L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 11;
            }
            return 43;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active2 & 0x8L) != 0L || (active3 & 0x2000003L) != 0L)
            return 43;
         return -1;
      case 12:
         if ((active1 & 0x20000L) != 0L || (active3 & 0x20000000L) != 0L)
            return 43;
         if ((active1 & 0x8a82aec826781400L) != 0L || (active2 & 0xaccf000000005580L) != 0L || (active3 & 0x192baaaaL) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 12;
            return 43;
         }
         return -1;
      case 13:
         if ((active1 & 0xc0800781000L) != 0L || (active3 & 0x10000000L) != 0L)
            return 43;
         if ((active1 & 0x8a82a2c026000400L) != 0L || (active2 & 0xaccf000000005580L) != 0L || (active3 & 0x92baaaaL) != 0L)
         {
            if (jjmatchedPos != 13)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 13;
            }
            return 43;
         }
         return -1;
      case 14:
         if ((active1 & 0x8a82aac026000400L) != 0L || (active2 & 0xac4e000000005500L) != 0L || (active3 & 0x92baaaaL) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 14;
            return 43;
         }
         if ((active2 & 0x81000000000080L) != 0L)
            return 43;
         return -1;
      case 15:
         if ((active1 & 0x4006000000L) != 0L || (active2 & 0x802000000000100L) != 0L || (active3 & 0x20L) != 0L)
            return 43;
         if ((active1 & 0x8a82aa8020000400L) != 0L || (active2 & 0xa44c000000005400L) != 0L || (active3 & 0x92baa8aL) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 15;
            return 43;
         }
         return -1;
      case 16:
         if ((active1 & 0x8a82aa8020000400L) != 0L || (active2 & 0xa44c000000005400L) != 0L || (active3 & 0x92baa8aL) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 16;
            return 43;
         }
         return -1;
      case 17:
         if ((active1 & 0x2008000000000L) != 0L || (active2 & 0x1000L) != 0L || (active3 & 0x200000L) != 0L)
            return 43;
         if ((active1 & 0x8a80aa0020000400L) != 0L || (active2 & 0xa44c000000004400L) != 0L || (active3 & 0x90baa8aL) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 17;
            return 43;
         }
         return -1;
      case 18:
         if ((active1 & 0x8a00aa0000000400L) != 0L || (active2 & 0x4c000000000400L) != 0L || (active3 & 0x10baa8aL) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 18;
            return 43;
         }
         if ((active1 & 0x80000020000000L) != 0L || (active2 & 0xa400000000004000L) != 0L || (active3 & 0x8000000L) != 0L)
            return 43;
         return -1;
      case 19:
         if ((active1 & 0x400L) != 0L || (active2 & 0x44000000000000L) != 0L || (active3 & 0xa8808L) != 0L)
            return 43;
         if ((active1 & 0x8a00aa0000000000L) != 0L || (active2 & 0x8000000000400L) != 0L || (active3 & 0x1012282L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 19;
            return 43;
         }
         return -1;
      case 20:
         if ((active1 & 0x88002a0000000000L) != 0L || (active3 & 0x1012282L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 20;
            return 43;
         }
         if ((active1 & 0x200800000000000L) != 0L || (active2 & 0x8000000000400L) != 0L)
            return 43;
         return -1;
      case 21:
         if ((active1 & 0x8800200000000000L) != 0L || (active3 & 0x1000280L) != 0L)
            return 43;
         if ((active1 & 0xa0000000000L) != 0L || (active3 & 0x12002L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 21;
            return 43;
         }
         return -1;
      case 22:
         if ((active1 & 0x20000000000L) != 0L || (active3 & 0x2000L) != 0L)
            return 43;
         if ((active1 & 0x80000000000L) != 0L || (active3 & 0x10002L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 22;
            return 43;
         }
         return -1;
      case 23:
         if ((active1 & 0x80000000000L) != 0L || (active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 23;
            return 43;
         }
         if ((active3 & 0x2L) != 0L)
            return 43;
         return -1;
      case 24:
         if ((active3 & 0x10000L) != 0L)
            return 43;
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 24;
            return 43;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStartNfaWithStates_0(0, 1, 0);
      case 33:
         jjmatchedKind = 246;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x2000000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 265;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x40000L);
      case 38:
         jjmatchedKind = 262;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x8000000000000000L, 0x8000L);
      case 40:
         jjmatchedKind = 234;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x400000000L);
      case 41:
         return jjStopAtPos(0, 235);
      case 42:
         jjmatchedKind = 260;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x800002000L);
      case 43:
         jjmatchedKind = 258;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x801L);
      case 44:
         return jjStopAtPos(0, 241);
      case 45:
         jjmatchedKind = 259;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x2001002L);
      case 46:
         jjmatchedKind = 242;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x400000L);
      case 47:
         jjmatchedKind = 261;
         return jjMoveStringLiteralDfa1_0(0xb00L, 0x0L, 0x0L, 0x0L, 0x4000L);
      case 58:
         return jjStopAtPos(0, 249);
      case 59:
         return jjStopAtPos(0, 240);
      case 60:
         jjmatchedKind = 245;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x800000000000000L, 0x78880400L);
      case 61:
         jjmatchedKind = 244;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x400000000000000L, 0x4000000L);
      case 62:
         jjmatchedKind = 289;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1000000000000000L, 0x180300000L);
      case 63:
         return jjStopAtPos(0, 248);
      case 64:
         return jjStopAtPos(0, 243);
      case 91:
         return jjStopAtPos(0, 238);
      case 92:
         jjmatchedKind = 280;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30000012000401e0L, 0x3fff7bff8000L, 0x0L, 0x0L);
      case 93:
         return jjStopAtPos(0, 239);
      case 94:
         jjmatchedKind = 264;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x20000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x30000L, 0x3000000800000L, 0x180L, 0x1e000c0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1c0000L, 0x0L, 0xc00000001800L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7e00000L, 0xc00000104600000L, 0x650L, 0x10cc00L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x38000000L, 0x20f00000000000L, 0x0L, 0x2000cL, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1c0000000L, 0x40000000L, 0xc50c000000000000L, 0x8000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3e00000000L, 0x0L, 0x0L, 0x4000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x2000L, 0x0L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc0000000010600L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1f8000000000L, 0x300000c00008000L, 0x1L, 0x2000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0xc0000000000L, 0x80000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x36080000800L, 0x8L, 0x200c3300L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1c00000000000L, 0x38000000L, 0x3000000000000L, 0x10000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1e000000000000L, 0x4000L, 0xa80000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0xc008000000000000L, 0x60000000006002L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xfc0000000000000L, 0x4008003181000L, 0x3010000004000000L, 0x3L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xf000000000000000L, 0x3L, 0x0L, 0x0L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000020000L, 0x0L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xcL, 0x0L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L, 0x4L, 0x10030L, 0x0L);
      case 123:
         return jjStopAtPos(0, 236);
      case 124:
         jjmatchedKind = 263;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x4000000000000000L, 0x10000L);
      case 125:
         return jjStopAtPos(0, 237);
      case 126:
         return jjStopAtPos(0, 247);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 255);
         break;
      case 41:
         if ((active4 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 291);
         break;
      case 42:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 3);
         else if ((active4 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 290);
         break;
      case 43:
         if ((active4 & 0x1L) != 0L)
            return jjStopAtPos(1, 256);
         break;
      case 45:
         if ((active4 & 0x2L) != 0L)
            return jjStopAtPos(1, 257);
         else if ((active4 & 0x800000L) != 0L)
            return jjStopAtPos(1, 279);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000L);
      case 47:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 58:
         if ((active4 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 286);
         break;
      case 60:
         if ((active4 & 0x400L) != 0L)
         {
            jjmatchedKind = 266;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000L);
      case 61:
         if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 252);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 253);
         else if ((active4 & 0x800L) != 0L)
            return jjStopAtPos(1, 267);
         else if ((active4 & 0x1000L) != 0L)
            return jjStopAtPos(1, 268);
         else if ((active4 & 0x2000L) != 0L)
            return jjStopAtPos(1, 269);
         else if ((active4 & 0x4000L) != 0L)
            return jjStopAtPos(1, 270);
         else if ((active4 & 0x8000L) != 0L)
            return jjStopAtPos(1, 271);
         else if ((active4 & 0x10000L) != 0L)
            return jjStopAtPos(1, 272);
         else if ((active4 & 0x20000L) != 0L)
            return jjStopAtPos(1, 273);
         else if ((active4 & 0x40000L) != 0L)
            return jjStopAtPos(1, 274);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3c000000L);
      case 62:
         if ((active4 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 281);
         else if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 288;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80300000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2400200600000L, active1, 0x36000000000L, active2, 0x10000000000000L, active3, 0xcc00L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L, active2, 0x180L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1800000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20800008000000L, active1, 0xd0ecf00080010600L, active2, 0x60c02040006002L, active3, 0x3000L, active4, 0L);
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 43);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1000800000L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x7040000000800000L, active1, 0x2010L, active2, 0x50L, active3, 0x30L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000L, active1, 0x1000000000L, active2, 0x3000000600000000L, active3, 0xfL, active4, 0L);
      case 106:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1041000000L, active1, 0x800000L, active2, 0x100800000000L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000L, active1, 0L, active2, 0x4100000000L, active3, 0x2000000L, active4, 0L);
      case 110:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1c0080000000L, active1, 0x310000800028000L, active2, 0x5000c80100c0001L, active3, 0L, active4, 0L);
      case 111:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x206026040000L, active1, 0xc000c010c6009ecL, active2, 0xa03200080710608L, active3, 0x341d0300L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3181000L, active2, 0x10004020000L, active3, 0L, active4, 0L);
      case 114:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 133, 43);
         return jjMoveStringLiteralDfa2_0(active0, 0x800c000000080000L, active1, 0x3L, active2, 0x80000001009804L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0x2003000000000000L, active2, 0x20000000000L, active3, 0x2000c0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000000L, active1, 0x8000000000L, active2, 0x20000000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x211000000000000L, active1, 0x30004000L, active2, 0L, active3, 0x20000L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0x40000000L, active2, 0xc00c000000000000L, active3, 0x8400000L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000100000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 124:
         if ((active3 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 254);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4);
      return 2;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000000L);
      case 46:
         if ((active4 & 0x400000L) != 0L)
            return jjStopAtPos(2, 278);
         break;
      case 61:
         if ((active4 & 0x80000L) != 0L)
            return jjStopAtPos(2, 275);
         else if ((active4 & 0x100000L) != 0L)
            return jjStopAtPos(2, 276);
         else if ((active4 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 283;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000L);
      case 62:
         if ((active4 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 282);
         else if ((active4 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000L);
      case 64:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(2, 8);
         break;
      case 89:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8080000001800000L, active1, 0x8000040000L, active2, 0x104000002L, active3, 0x3000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x20000000000000L, active2, 0x100800000000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0xf00000000000L, active2, 0xc000080000000L, active3, 0x9800000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4600800L, active2, 0L, active3, 0x201c0300L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0x3181000L, active2, 0x80000001009800L, active3, 0x30L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x3000000000000000L, active3, 0x3L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0xc00000000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1404000000000000L, active1, 0x30000020014L, active2, 0x4000000005L, active3, 0x400000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000200000000L, active1, 0x30010008L, active2, 0x40010000L, active3, 0xc00L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800200c06000000L, active1, 0xcc0001108000600L, active2, 0x200400700608L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x48001000040000L, active1, 0xc0000002000L, active2, 0xc10180c0050L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200030000000000L, active1, 0xc000006000000000L, active2, 0L, active3, 0x200c000L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x60000000000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x6100000000000000L, active1, 0x100000000041e0L, active2, 0x3010000820180L, active3, 0x14030000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40040230000L, active1, 0x3000000808000L, active2, 0xcf00000200000000L, active3, 0x2000c0L, active4, 0L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 114, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x20504100500000L, active1, 0xc0000000L, active2, 0x6000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0000000L, active1, 0x2000000000000001L, active2, 0x28002000000L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1300000000000000L, active2, 0L, active3, 0xcL, active4, 0L);
      case 119:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 43);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L, active4, 0L);
      case 121:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active4 & 0x200000L) != 0L)
            return jjStopAtPos(3, 277);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000000L);
      case 62:
         if ((active4 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 284);
         break;
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L, active2, 0x80000200000000L, active3, 0x4000000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c08080000L, active1, 0x300000000000008L, active2, 0xc00001001800L, active3, 0x20000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000400000L, active1, 0x20c0000003181600L, active2, 0x4000000L, active3, 0L, active4, 0L);
      case 100:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 43);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(3, 144);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 43);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 43);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 43);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 43);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 43);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(3, 145);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 180, 43);
         else if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200100100020000L, active1, 0x1010000004600800L, active2, 0xc000040800000L, active3, 0x29a0000cL, active4, 0L);
      case 103:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 43);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100400000000000L, active1, 0x80000000001e0L, active2, 0x2000000008L, active3, 0xc03c0L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L, active2, 0x80000000L, active3, 0x10000L, active4, 0L);
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10010000040000L, active1, 0x30000010L, active2, 0x300800700000L, active3, 0x2000c00L, active4, 0L);
      case 109:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 43);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(3, 169);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x3008000000000L, active3, 0x10000000L, active4, 0L);
      case 110:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(3, 166);
         else if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x30000020000L, active2, 0x3000000010000000L, active3, 0x23L, active4, 0L);
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 43);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 87, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x6000020000000000L, active1, 0L, active2, 0x10000000050L, active3, 0x400000L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc0000010000L, active2, 0x20000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0xc000f00840000000L, active2, 0x100a000000L, active3, 0L, active4, 0L);
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 43);
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x203000000L, active1, 0xc00004100002000L, active2, 0x8000L, active3, 0x3000L, active4, 0L);
      case 116:
         if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x488040004010000L, active1, 0x9000008000L, active2, 0x8000c00000c0605L, active3, 0xc000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x23000000000000L, active2, 0xc560000000006180L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x40000L, active2, 0x400000000L, active3, 0L, active4, 0L);
      case 120:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(3, 160);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active4 & 0x20000000L) != 0L)
            return jjStopAtPos(4, 285);
         break;
      case 69:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(4, 97);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc4007781000L, active2, 0x8000880000c0000L, active3, 0x20L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x6040000000000L, active1, 0x10000070048000L, active2, 0x3003001402000006L, active3, 0x10000c03L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000000000000L, active1, 0L, active2, 0x1000000L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10000000000L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 43);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 43);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 154, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x8010000040000L, active1, 0xc0c0f00800010600L, active2, 0x20000000L, active3, 0x4000000L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc0300L, active4, 0L);
      case 103:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 117, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1e0L, active2, 0L, active3, 0xc0L, active4, 0L);
      case 104:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x2000000000000000L, active2, 0x40000000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x90000004000000L, active1, 0x8000020000L, active2, 0x60000200000601L, active3, 0x2010000L, active4, 0L);
      case 107:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8001800L, active3, 0L, active4, 0L);
      case 108:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x820000000L, active1, 0L, active2, 0L, active3, 0x20000000L, active4, 0L);
      case 109:
         if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 214, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x3000000000000L, active2, 0x40000000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0x8000008000000L, active2, 0x810000000L, active3, 0L, active4, 0L);
      case 111:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(4, 100);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0xc100000000180L, active3, 0x8000000L, active4, 0L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x20120000030000L, active1, 0x1300000000000000L, active2, 0xc580000000006000L, active3, 0x20000cL, active4, 0L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L, active2, 0x2080800050L, active3, 0x1800000L, active4, 0L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 43);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 43);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 43);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00030100000008L, active2, 0x8L, active3, 0x20000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L, active2, 0x8000L, active3, 0xf000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L, active2, 0xc00000000000L, active3, 0L, active4, 0L);
      case 119:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x200000700000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000040600L, active2, 0x200000700000L, active3, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x50000L, active1, 0xf30000000000L, active2, 0x40001L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc0000036000000L, active2, 0x6L, active3, 0xc00L);
      case 99:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 43);
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x10008040000000L, active2, 0L, active3, 0L);
      case 100:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 43);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 43);
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000L, active2, 0xc580000880000040L, active3, 0x2000000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0xcL);
      case 104:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 43);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(5, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(5, 152);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x3080c00000001e8L, active2, 0xc40008000000L, active3, 0xe0300L);
      case 106:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x280000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x808000000L, active1, 0L, active2, 0x3003001000008000L, active3, 0x10000003L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L, active2, 0x80000L, active3, 0L);
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x40004000000L, active1, 0x8000L, active2, 0x200006600L, active3, 0x100c0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x108020000008L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1001000L, active2, 0L, active3, 0L);
      case 114:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0xc00004100000000L, active2, 0x860000400000000L, active3, 0xf020L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 43);
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc000000000500000L, active2, 0x80000001000L, active3, 0x1800000L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x104000000000000L, active1, 0x20000L, active2, 0xc002042000180L, active3, 0x8200000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000L, active2, 0x10010000000L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2008000000000L, active2, 0x30000000011c0L, active3, 0x10200000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0xf00000000780000L, active2, 0x200000100000L, active3, 0x40003c0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x600L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000010000L, active1, 0x8000L, active2, 0x10000600000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000000000000L, active3, 0L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 43);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000010000000000L, active1, 0xc000004000000000L, active2, 0x860000000000000L, active3, 0xcf02cL);
      case 102:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(6, 157);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(6, 167);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(6, 163);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x30006020000L, active2, 0xc000602000000L, active3, 0x9800000L);
      case 108:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(6, 164);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x38000008L, active2, 0x10000007L, active3, 0xc00L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80c00000001e0L, active2, 0x40008000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L, active2, 0xc00000080000L, active3, 0x20000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0x20000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L, active2, 0x8L, active3, 0L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 43);
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(6, 165);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(6, 172);
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xf00000000000L, active2, 0xa400000000044000L, active3, 0x2000003L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 43);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 94, 43);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(6, 143);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 159, 43);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0x3000000000000000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0x901000000L, active2, 0x600L, active3, 0L);
      case 121:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 43);
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000000L, active2, 0x40000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000000L, active2, 0xa400000000004000L, active3, 0x2010003L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000601e0L, active2, 0x400600000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000L, active2, 0x3000000000180L, active3, 0x18003c0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0x100000000L, active2, 0x100000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000L, active2, 0x800000000080000L, active3, 0x3020L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 43);
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 129, 43);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 130, 43);
         else if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x8040000000000L, active1, 0xc00020000000L, active2, 0x80000000600L, active3, 0x10000800L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x500000L, active2, 0L, active3, 0L);
      case 103:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 115, 43);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(7, 170);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x6000000L, active2, 0x8000000L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x3000000000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc00308000000000L, active2, 0x40L, active3, 0L);
      case 108:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 91, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10000001L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x8800010000000000L, active1, 0xc300030800000000L, active2, 0L, active3, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000L, active2, 0xc000002000000L, active3, 0x8000000L);
      case 112:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0L);
      case 114:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 174, 43);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000L, active2, 0x1000L, active3, 0x20200000L);
      case 115:
         if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x40000L) != 0L)
         {
            jjmatchedKind = 210;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40200000040008L, active3, 0x88008L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 43);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(7, 168);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80800000000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc0000280000L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000400L, active2, 0x40000008000008L, active3, 0xab808L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000c0000280000L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x80000100000L, active3, 0L);
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 51, 43);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 43);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(8, 158);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000500000L, active2, 0x3000010001180L, active3, 0x200000L);
      case 102:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 134, 43);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0x1000030006000000L, active2, 0x2000c0000L, active3, 0L);
      case 108:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10200e0L, active2, 0x400000L, active3, 0x18003c0L);
      case 110:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(8, 153);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0xc00308000000000L, active2, 0x8c000400000000L, active3, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0x20000003L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0x4000000L);
      case 114:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 175, 43);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000000000L, active2, 0xa400000000004000L, active3, 0L);
      case 115:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000000L, active2, 0x200000000400L, active3, 0x10000L);
      case 116:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 63, 43);
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0xc200000100041000L, active2, 0L, active3, 0x2000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000L, active2, 0x800000000000000L, active3, 0x20L);
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000L);
      case 121:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 128, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2008000007800e0L, active2, 0x400L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000L, active2, 0xc000200000000L, active3, 0x18000000L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0x3000L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000000L, active2, 0x80000000001000L, active3, 0x200000L);
      case 101:
         if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x800000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000001000L, active2, 0xa400000000104000L, active3, 0x1000280L);
      case 102:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 43);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x80008L, active3, 0L);
      case 103:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000000L, active2, 0x40000L, active3, 0x20000000L);
      case 104:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(9, 82);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x3000000000180L, active3, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8001020000L, active2, 0x280000000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000000000L, active2, 0x10400000L, active3, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000034006000000L, active2, 0x800000000000000L, active3, 0x23L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0xc0000000400L, active2, 0x40000000000000L, active3, 0xa8808L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 40, 43);
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x8000000L, active3, 0L);
      case 116:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(9, 125);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000000L, active2, 0x400200000L, active3, 0L);
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8800200000000000L, active2, 0x400000000L, active3, 0x1000280L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x83000000000180L, active3, 0x2010000L);
      case 99:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 88, 43);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10c0L, active2, 0L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80004000000000L, active2, 0xac00000000004000L, active3, 0x20L);
      case 101:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 116, 43);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(10, 218, 43);
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L, active1, 0x400L, active2, 0x40000010400000L, active3, 0xa8808L);
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0L);
      case 103:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(10, 124);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000000000L, active2, 0x200000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xc0000000000L, active2, 0x80000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0xc000200000000L, active3, 0x8000003L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x780000L, active2, 0L, active3, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000000L, active2, 0x40000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 114:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 96, 43);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200800000000000L, active2, 0x400L, active3, 0x20000000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20L, active2, 0x100000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8006000000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000000000L, active2, 0x201000L, active3, 0x200000L);
      case 121:
         if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0x2000L);
      case 122:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20026000000L, active2, 0xc000000000000L, active3, 0x8002000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0xc4000780040L, active2, 0x800000008000000L, active3, 0x20000020L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000L);
      case 100:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 59, 43);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(11, 150);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400L, active2, 0x40000000000000L, active3, 0xa8808L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200800000020000L, active2, 0xc0400L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x400000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8000000000L, active2, 0x80200000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000000000000L, active2, 0x80200000001000L, active3, 0x200000L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0x10000000L);
      case 114:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(11, 131, 43);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8800200000000000L, active2, 0x200000L, active3, 0x1000280L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 116:
         if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(11, 217, 43);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800001000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000000000000L, active2, 0xa400000000004000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x3000000000180L, active3, 0L);
      case 121:
         if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, active2, active3, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0L, active3, 0x2L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active1, 0x8000000080L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0xc000000000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x8000000L, active3, 0L);
      case 100:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(12, 81, 43);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(12, 146);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(12, 147);
         return jjMoveStringLiteralDfa13_0(active1, 0x202800020000000L, active2, 0x1400L, active3, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active1, 0x8800200000001020L, active2, 0x280010300000L, active3, 0x9010280L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x3000000000180L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active1, 0x800000000L, active2, 0L, active3, 0x10000000L);
      case 109:
         if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(12, 221, 43);
         return jjMoveStringLiteralDfa13_0(active1, 0x6000000L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active1, 0x800c4000000000L, active2, 0xac00000000004000L, active3, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x400000000L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active1, 0x20000000000L, active2, 0L, active3, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active1, 0x40L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active1, 0x780000L, active2, 0x80000000000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active1, 0x400L, active2, 0x40000000000000L, active3, 0xa8808L);
      case 122:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x200000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(11, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2, active3, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0x2000006000000L, active2, 0x1000L, active3, 0x200000L);
      case 99:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(13, 69);
         break;
      case 100:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(13, 76, 43);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(13, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(13, 149);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(13, 171);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(13, 173);
         return jjMoveStringLiteralDfa14_0(active1, 0x8880200000000000L, active2, 0xa400000000004000L, active3, 0x1000280L);
      case 101:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(13, 70);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(13, 155);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(13, 220, 43);
         return jjMoveStringLiteralDfa14_0(active1, 0x20020000000L, active2, 0xc000200000000L, active3, 0x2000L);
      case 104:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(13, 83, 43);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(13, 84, 43);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(13, 85, 43);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(13, 86, 43);
         break;
      case 108:
         return jjMoveStringLiteralDfa14_0(active1, 0x8000000000L, active2, 0x80000000000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active1, 0x400L, active2, 0x40000010000000L, active3, 0xa8808L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x3000000000180L, active3, 0L);
      case 114:
         if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(13, 162);
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x2L);
      case 116:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active1, 0x84000000000L, active2, 0x800000000000000L, active3, 0x20L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active1, 0x200800000000080L, active2, 0x400L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x8000000L);
      case 121:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(13, 99, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(12, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, active2, active3, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active1, 0x80000000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x80000000000000L, active2, 0xa400000000004000L, active3, 0x8000000L);
      case 100:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(14, 161);
         return jjMoveStringLiteralDfa15_0(active1, 0x20000000400L, active2, 0x40000000000000L, active3, 0xaa808L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0x2L);
      case 102:
         return jjMoveStringLiteralDfa15_0(active1, 0x20000000L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0xc000000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active1, 0x8000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active1, 0x4000000000L, active2, 0x800000000000000L, active3, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active1, 0x202800000000000L, active2, 0x1400L, active3, 0x200000L);
      case 114:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(14, 135, 43);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 176, 43);
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa15_0(active1, 0x80L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active1, 0x6000000L, active2, 0x10000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa15_0(active1, 0x8800200000000000L, active2, 0x2000000000100L, active3, 0x1000280L);
      case 121:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 183, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, active2, active3, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_0(active1, 0x20000400L, active2, 0x4c000000000000L, active3, 0xa8808L);
      case 100:
         return jjMoveStringLiteralDfa16_0(active1, 0x200800000000000L, active2, 0x400L, active3, 0x2L);
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(15, 71);
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0L, active3, 0x10000L);
      case 104:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(15, 89, 43);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(15, 90, 43);
         break;
      case 109:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0L, active3, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active1, 0x8880200000000000L, active2, 0xa400000000004000L, active3, 0x1000280L);
      case 114:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(15, 136, 43);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 177, 43);
         return jjMoveStringLiteralDfa16_0(active1, 0x80000000000L, active2, 0L, active3, 0L);
      case 115:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(15, 156);
         break;
      case 116:
         return jjMoveStringLiteralDfa16_0(active1, 0x2000000000000L, active2, 0x1000L, active3, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa16_0(active1, 0x20000000000L, active2, 0L, active3, 0x2000L);
      case 121:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 102, 43);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 187, 43);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(15, 197, 43);
         break;
      case 122:
         return jjMoveStringLiteralDfa16_0(active1, 0x8000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(14, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, active2, active3, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa17_0(active1, 0x200800000000000L, active2, 0x400L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa17_0(active1, 0x8800200000000000L, active2, 0L, active3, 0x1010280L);
      case 101:
         return jjMoveStringLiteralDfa17_0(active1, 0x88000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa17_0(active1, 0x2000000000000L, active2, 0x1000L, active3, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active1, 0x20000000400L, active2, 0x40000000000000L, active3, 0xaa808L);
      case 112:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0L, active3, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active1, 0x80000000000000L, active2, 0xa400000000004000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa17_0(active1, 0x20000000L, active2, 0L, active3, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0xc000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(15, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, active2, active3, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_0(active1, 0x8800200000000000L, active2, 0L, active3, 0x1000280L);
      case 100:
         return jjMoveStringLiteralDfa18_0(active1, 0xa0000000000L, active2, 0L, active3, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0xc000000000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa18_0(active1, 0x80000020000000L, active2, 0xa400000000004000L, active3, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa18_0(active1, 0x200800000000000L, active2, 0x400L, active3, 0x2L);
      case 114:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 103, 43);
         break;
      case 116:
         return jjMoveStringLiteralDfa18_0(active1, 0x400L, active2, 0x40000000000000L, active3, 0xa8808L);
      case 117:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0L, active3, 0x10000L);
      case 121:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 113, 43);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(17, 140, 43);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(17, 213, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa18_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(16, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, active2, active3, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa19_0(active1, 0x20000000000L, active2, 0L, active3, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0L, active3, 0x2L);
      case 101:
         if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(18, 219, 43);
         break;
      case 108:
         return jjMoveStringLiteralDfa19_0(active1, 0x400L, active2, 0x40000000000000L, active3, 0xa8808L);
      case 110:
         return jjMoveStringLiteralDfa19_0(active1, 0x8800200000000000L, active2, 0L, active3, 0x1010280L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0xc000000000000L, active3, 0L);
      case 116:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(18, 93, 43);
         return jjMoveStringLiteralDfa19_0(active1, 0x200800000000000L, active2, 0x400L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa19_0(active1, 0x80000000000L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 119, 43);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(18, 142, 43);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 186, 43);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 189, 43);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 191, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(17, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1, active2, active3, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa20_0(active1, 0L, active2, 0L, active3, 0x2L);
      case 100:
         return jjMoveStringLiteralDfa20_0(active1, 0L, active2, 0L, active3, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa20_0(active1, 0x200800000000000L, active2, 0x400L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa20_0(active1, 0xa0000000000L, active2, 0L, active3, 0x2000L);
      case 114:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 178, 43);
         break;
      case 116:
         return jjMoveStringLiteralDfa20_0(active1, 0x8800200000000000L, active2, 0L, active3, 0x1000280L);
      case 117:
         return jjMoveStringLiteralDfa20_0(active1, 0L, active2, 0x8000000000000L, active3, 0L);
      case 121:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(19, 74, 43);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 182, 43);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(19, 195, 43);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(19, 203, 43);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(19, 207, 43);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(19, 209, 43);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(19, 211, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(18, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1, active2, active3, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_0(active1, 0L, active2, 0L, active3, 0x10000L);
      case 100:
         return jjMoveStringLiteralDfa21_0(active1, 0x80000000000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa21_0(active1, 0x8800200000000000L, active2, 0L, active3, 0x1000280L);
      case 110:
         return jjMoveStringLiteralDfa21_0(active1, 0L, active2, 0L, active3, 0x2L);
      case 114:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 179, 43);
         break;
      case 116:
         return jjMoveStringLiteralDfa21_0(active1, 0x20000000000L, active2, 0L, active3, 0x2000L);
      case 121:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 111, 43);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 121, 43);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(20, 138, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(19, 0L, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1, 0L, active3, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa22_0(active1, 0x80000000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa22_0(active1, 0x20000000000L, active3, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa22_0(active1, 0L, active3, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa22_0(active1, 0L, active3, 0x2L);
      case 121:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 109, 43);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 123, 43);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 127, 43);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(21, 199, 43);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(21, 201, 43);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(21, 216, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa22_0(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(20, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1, 0L, active3, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa23_0(active1, 0L, active3, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa23_0(active1, 0x80000000000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa23_0(active1, 0L, active3, 0x10000L);
      case 121:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(22, 105, 43);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(22, 205, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa23_0(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(21, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, active1, 0L, active3, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa24_0(active1, 0L, active3, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa24_0(active1, 0x80000000000L, active3, 0L);
      case 121:
         if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(23, 193, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa24_0(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(22, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, active1, 0L, active3, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa25_0(active1, 0x80000000000L, active3, 0L);
      case 121:
         if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(24, 208, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa25_0(long old1, long active1, long old3, long active3)
{
   if (((active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(23, 0L, old1, 0L, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, active1, 0L, 0L, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 121:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(25, 107, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, active1, 0L, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 63;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 40:
               case 43:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 36)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(43);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(11);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 222)
                        kind = 222;
                     jjCheckNAddTwoStates(8, 9);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 222)
                        kind = 222;
                     jjCheckNAddStates(12, 14);
                  }
                  break;
               case 39:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 38:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 35:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 63:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 1:
                  if ((0xfffffbffffffffffL & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 5:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddStates(15, 17);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 17:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if (curChar == 39 && kind > 228)
                     kind = 228;
                  break;
               case 20:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 18);
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 23:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 25:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 26:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 28:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 29:
                  if (curChar == 34 && kind > 229)
                     kind = 229;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 32:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 42:
                  if (curChar != 36)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 46:
                  if (curChar != 46)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddStates(22, 24);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddStates(22, 24);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddTwoStates(50, 15);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddTwoStates(54, 15);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 15);
                  break;
               case 59:
                  if (curChar != 48)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddStates(12, 14);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddTwoStates(61, 9);
                  break;
               case 62:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddTwoStates(62, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(43);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(43);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(43);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(43);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(43);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(34);
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(43);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 230)
                        kind = 230;
                  }
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(43);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 0:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (kind > 10)
                     kind = 10;
                  break;
               case 9:
                  if ((0x100000001000L & l) != 0L && kind > 222)
                     kind = 222;
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 15:
                  if ((0x5000000050L & l) != 0L && kind > 226)
                     kind = 226;
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 92)
                     jjAddStates(30, 32);
                  break;
               case 20:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 26:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 27:
                  if (curChar == 92)
                     jjAddStates(33, 35);
                  break;
               case 28:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 34:
                  if (curChar == 101 && kind > 230)
                     kind = 230;
                  break;
               case 37:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 41:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 60:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddTwoStates(61, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 40:
               case 43:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 2:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 39:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 38:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 35:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 63:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 36:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(43);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 10)
                     kind = 10;
                  break;
               case 17:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 26:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 63 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x2000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active3 & 0x4000000000000L) != 0L || (active4 & 0x400000L) != 0L)
            return 4;
         if ((active0 & 0x3e00000000L) != 0L)
         {
            jjmatchedKind = 231;
            return 33;
         }
         if ((active0 & 0xfffffc1ffff0000L) != 0L || (active1 & 0x1cL) != 0L)
         {
            jjmatchedKind = 231;
            return 36;
         }
         if ((active0 & 0xf000000000000000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 231;
            return 29;
         }
         return -1;
      case 1:
         if ((active0 & 0x8030000000L) != 0L)
            return 36;
         if ((active0 & 0x7fffff7dcfff0000L) != 0L || (active1 & 0x1cL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 1;
            }
            return 36;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x3L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 1;
            }
            return 28;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 1;
            }
            return 32;
         }
         return -1;
      case 2:
         if ((active0 & 0x982000000000L) != 0L || (active1 & 0x2L) != 0L)
            return 36;
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 2;
            }
            return 56;
         }
         if ((active0 & 0xffff675defff0000L) != 0L || (active1 & 0x1cL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 2;
            }
            return 36;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 2;
            }
            return 31;
         }
         return -1;
      case 3:
         if ((active0 & 0x10012040c0b00000L) != 0L || (active1 & 0x5L) != 0L)
            return 36;
         if ((active0 & 0xeffe571d2f4f0000L) != 0L || (active1 & 0x18L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 3;
            return 36;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 3;
            return 56;
         }
         return -1;
      case 4:
         if ((active0 & 0x6240001e03480000L) != 0L || (active1 & 0x10L) != 0L)
            return 36;
         if ((active0 & 0x8dbe57012c070000L) != 0L || (active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 4;
            }
            return 36;
         }
         return -1;
      case 5:
         if ((active0 & 0x44b0420020020000L) != 0L)
            return 36;
         if ((active0 & 0x890e15090c050000L) != 0L || (active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 5;
            return 36;
         }
         return -1;
      case 6:
         if ((active0 & 0x6000908040000L) != 0L)
            return 36;
         if ((active0 & 0x8908150004010000L) != 0L || (active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 6;
            return 36;
         }
         return -1;
      case 7:
         if ((active0 & 0x100000004010000L) != 0L || (active1 & 0x8L) != 0L)
            return 36;
         if ((active0 & 0x8808150000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 7;
            return 36;
         }
         return -1;
      case 8:
         if ((active0 & 0x8008100000000000L) != 0L)
            return 36;
         if ((active0 & 0x800050000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 8;
            return 36;
         }
         return -1;
      case 9:
         if ((active0 & 0x50000000000L) != 0L)
            return 36;
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 9;
            return 36;
         }
         return -1;
      case 10:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 10;
            return 36;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 246;
         return jjMoveStringLiteralDfa1_6(0x0L, 0x0L, 0x2000000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 265;
         return jjMoveStringLiteralDfa1_6(0x0L, 0x0L, 0x0L, 0x40000L);
      case 38:
         jjmatchedKind = 262;
         return jjMoveStringLiteralDfa1_6(0x0L, 0x0L, 0x8000000000000000L, 0x8000L);
      case 40:
         jjmatchedKind = 234;
         return jjMoveStringLiteralDfa1_6(0x0L, 0x0L, 0x0L, 0x400000000L);
      case 41:
         return jjStopAtPos(0, 235);
      case 42:
         jjmatchedKind = 260;
         return jjMoveStringLiteralDfa1_6(0x0L, 0x0L, 0x0L, 0x800002000L);
      case 43:
         jjmatchedKind = 258;
         return jjMoveStringLiteralDfa1_6(0x0L, 0x0L, 0x0L, 0x801L);
      case 44:
         return jjStopAtPos(0, 241);
      case 45:
         jjmatchedKind = 259;
         return jjMoveStringLiteralDfa1_6(0x0L, 0x0L, 0x0L, 0x2001002L);
      case 46:
         jjmatchedKind = 242;
         return jjMoveStringLiteralDfa1_6(0x0L, 0x0L, 0x0L, 0x400000L);
      case 47:
         jjmatchedKind = 261;
         return jjMoveStringLiteralDfa1_6(0x0L, 0x0L, 0x0L, 0x4000L);
      case 58:
         return jjStopAtPos(0, 249);
      case 59:
         return jjStopAtPos(0, 240);
      case 60:
         jjmatchedKind = 245;
         return jjMoveStringLiteralDfa1_6(0x0L, 0x0L, 0x800000000000000L, 0x78880400L);
      case 61:
         jjmatchedKind = 244;
         return jjMoveStringLiteralDfa1_6(0x0L, 0x0L, 0x400000000000000L, 0x4000000L);
      case 62:
         jjmatchedKind = 289;
         return jjMoveStringLiteralDfa1_6(0x0L, 0x0L, 0x1000000000000000L, 0x180300000L);
      case 63:
         return jjStopAtPos(0, 248);
      case 64:
         return jjStopAtPos(0, 243);
      case 91:
         return jjStopAtPos(0, 238);
      case 92:
         return jjStopAtPos(0, 280);
      case 93:
         return jjStopAtPos(0, 239);
      case 94:
         jjmatchedKind = 264;
         return jjMoveStringLiteralDfa1_6(0x0L, 0x0L, 0x0L, 0x20000L);
      case 97:
         return jjMoveStringLiteralDfa1_6(0x30000L, 0x0L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_6(0x1c0000L, 0x0L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_6(0x7e00000L, 0x0L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_6(0x38000000L, 0x0L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_6(0x1c0000000L, 0x0L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_6(0x3e00000000L, 0x0L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_6(0x4000000000L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_6(0x1f8000000000L, 0x0L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_6(0x200000000000L, 0x0L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_6(0x1c00000000000L, 0x0L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_6(0x1e000000000000L, 0x0L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_6(0x20000000000000L, 0x0L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_6(0xfc0000000000000L, 0x0L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_6(0xf000000000000000L, 0x3L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_6(0x0L, 0xcL, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_6(0x0L, 0x10L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 236);
      case 124:
         jjmatchedKind = 263;
         return jjMoveStringLiteralDfa1_6(0x0L, 0x0L, 0x4000000000000000L, 0x10000L);
      case 125:
         return jjStopAtPos(0, 237);
      case 126:
         return jjStopAtPos(0, 247);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_6(long active0, long active1, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, active0, active1, 0L, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 255);
         break;
      case 41:
         if ((active4 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 291);
         break;
      case 42:
         if ((active4 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 290);
         break;
      case 43:
         if ((active4 & 0x1L) != 0L)
            return jjStopAtPos(1, 256);
         break;
      case 45:
         if ((active4 & 0x2L) != 0L)
            return jjStopAtPos(1, 257);
         else if ((active4 & 0x800000L) != 0L)
            return jjStopAtPos(1, 279);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_6(active0, 0L, active1, 0L, active3, 0L, active4, 0x400000L);
      case 58:
         if ((active4 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 286);
         break;
      case 60:
         if ((active4 & 0x400L) != 0L)
         {
            jjmatchedKind = 266;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_6(active0, 0L, active1, 0L, active3, 0L, active4, 0x80000L);
      case 61:
         if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 252);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 253);
         else if ((active4 & 0x800L) != 0L)
            return jjStopAtPos(1, 267);
         else if ((active4 & 0x1000L) != 0L)
            return jjStopAtPos(1, 268);
         else if ((active4 & 0x2000L) != 0L)
            return jjStopAtPos(1, 269);
         else if ((active4 & 0x4000L) != 0L)
            return jjStopAtPos(1, 270);
         else if ((active4 & 0x8000L) != 0L)
            return jjStopAtPos(1, 271);
         else if ((active4 & 0x10000L) != 0L)
            return jjStopAtPos(1, 272);
         else if ((active4 & 0x20000L) != 0L)
            return jjStopAtPos(1, 273);
         else if ((active4 & 0x40000L) != 0L)
            return jjStopAtPos(1, 274);
         return jjMoveStringLiteralDfa2_6(active0, 0L, active1, 0L, active3, 0L, active4, 0x3c000000L);
      case 62:
         if ((active4 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 281);
         else if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 288;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_6(active0, 0L, active1, 0L, active3, 0L, active4, 0x80300000L);
      case 97:
         return jjMoveStringLiteralDfa2_6(active0, 0x2400200600000L, active1, 0L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_6(active0, 0x10000L, active1, 0L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_6(active0, 0x20800008000000L, active1, 0L, active3, 0L, active4, 0L);
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_6(1, 39, 36);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_6(active0, 0x7040000000800000L, active1, 0x10L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_6(active0, 0xc00000000L, active1, 0L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_6(active0, 0x1041000000L, active1, 0L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_6(active0, 0x30000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_6(active0, 0x1c0080000000L, active1, 0L, active3, 0L, active4, 0L);
      case 111:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_6(active0, 0x206026040000L, active1, 0xcL, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_6(active0, 0x800c000000080000L, active1, 0x3L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_6(active0, 0x20000L, active1, 0L, active3, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_6(active0, 0x180000000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_6(active0, 0x211000000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_6(active0, 0x400000000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_6(active0, 0x100000000L, active1, 0L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_6(active0, 0x800000000100000L, active1, 0L, active3, 0L, active4, 0L);
      case 124:
         if ((active3 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 254);
         break;
      default :
         break;
   }
   return jjStartNfa_6(0, active0, active1, 0L, active3, active4);
}
private final int jjMoveStringLiteralDfa2_6(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_6(0, old0, old1, 0L, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(1, active0, active1, 0L, 0L, active4);
      return 2;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa3_6(active0, 0L, active1, 0L, active4, 0x20000000L);
      case 46:
         if ((active4 & 0x400000L) != 0L)
            return jjStopAtPos(2, 278);
         break;
      case 61:
         if ((active4 & 0x80000L) != 0L)
            return jjStopAtPos(2, 275);
         else if ((active4 & 0x100000L) != 0L)
            return jjStopAtPos(2, 276);
         else if ((active4 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 283;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_6(active0, 0L, active1, 0L, active4, 0x10000000L);
      case 62:
         if ((active4 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 282);
         else if ((active4 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_6(active0, 0L, active1, 0L, active4, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa3_6(active0, 0x8080000001800000L, active1, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_6(active0, 0x10000000000000L, active1, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_6(active0, 0x2000000000000L, active1, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_6(active0, 0x80000L, active1, 0L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_6(active0, 0x8000000L, active1, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_6(active0, 0x1404000000000000L, active1, 0x14L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_6(active0, 0x1000200000000L, active1, 0x8L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_6(active0, 0x800200c06000000L, active1, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_6(active0, 0x48001000040000L, active1, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_6(active0, 0x200030000000000L, active1, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_6(2, 37, 36);
         return jjMoveStringLiteralDfa3_6(active0, 0x6100000000000000L, active1, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_6(active0, 0x40040230000L, active1, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_6(active0, 0x20504100500000L, active1, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_6(active0, 0xa0000000L, active1, 0x1L, active4, 0L);
      case 119:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_6(2, 47, 36);
         break;
      case 121:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_6(2, 65, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_6(1, active0, active1, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa3_6(long old0, long active0, long old1, long active1, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_6(1, old0, old1, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(2, active0, active1, 0L, 0L, active4);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active4 & 0x200000L) != 0L)
            return jjStopAtPos(3, 277);
         return jjMoveStringLiteralDfa4_6(active0, 0L, active1, 0L, active4, 0x20000000L);
      case 62:
         if ((active4 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 284);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_6(active0, 0x1c08080000L, active1, 0x8L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_6(active0, 0x20000000L, active1, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_6(active0, 0x800000000400000L, active1, 0L, active4, 0L);
      case 100:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_6(3, 66, 36);
         break;
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_6(3, 20, 36);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_6(3, 21, 36);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_6(3, 30, 36);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_6(3, 64, 36);
         return jjMoveStringLiteralDfa4_6(active0, 0x200100100020000L, active1, 0L, active4, 0L);
      case 103:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_6(3, 45, 36);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_6(active0, 0x100400000000000L, active1, 0L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_6(active0, 0x2000000000000L, active1, 0L, active4, 0L);
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_6(3, 48, 36);
         return jjMoveStringLiteralDfa4_6(active0, 0x10010000040000L, active1, 0x10L, active4, 0L);
      case 109:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_6(3, 31, 36);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_6(active0, 0x8000000000000000L, active1, 0L, active4, 0L);
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_6(3, 38, 36);
         return jjMoveStringLiteralDfa4_6(active0, 0x6000020000000000L, active1, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_6(3, 23, 36);
         return jjMoveStringLiteralDfa4_6(active0, 0x40000000000000L, active1, 0L, active4, 0L);
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_6(3, 60, 36);
         return jjMoveStringLiteralDfa4_6(active0, 0x203000000L, active1, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_6(active0, 0x488040004010000L, active1, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_6(active0, 0x20000000000000L, active1, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_6(active0, 0x4000000000000L, active1, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_6(2, active0, active1, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa4_6(long old0, long active0, long old1, long active1, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_6(2, old0, old1, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(3, active0, active1, 0L, 0L, active4);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active4 & 0x20000000L) != 0L)
            return jjStopAtPos(4, 285);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_6(active0, 0x6040000000000L, active1, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_6(active0, 0x500000000000000L, active1, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_6(4, 33, 36);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_6(4, 68, 36);
         return jjMoveStringLiteralDfa5_6(active0, 0x8010000040000L, active1, 0L, active4, 0L);
      case 104:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_6(4, 22, 36);
         return jjMoveStringLiteralDfa5_6(active0, 0x800000000000000L, active1, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_6(active0, 0x90000004000000L, active1, 0L, active4, 0L);
      case 107:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_6(4, 19, 36);
         break;
      case 108:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_6(active0, 0x820000000L, active1, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_6(active0, 0x100000000L, active1, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_6(4, 57, 36);
         return jjMoveStringLiteralDfa5_6(active0, 0x20120000030000L, active1, 0L, active4, 0L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_6(4, 24, 36);
         return jjMoveStringLiteralDfa5_6(active0, 0x8000000000000000L, active1, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_6(4, 25, 36);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_6(4, 36, 36);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_6(4, 54, 36);
         return jjMoveStringLiteralDfa5_6(active0, 0L, active1, 0x8L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_6(active0, 0x8000000L, active1, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_6(active0, 0x400000000000L, active1, 0L, active4, 0L);
      case 119:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_6(active0, 0x4000000000000000L, active1, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_6(3, active0, active1, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa5_6(long old0, long active0, long old1, long active1, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_6(3, old0, old1, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(4, active0, active1, 0L, 0L, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_6(active0, 0x50000L, active1, 0L);
      case 99:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_6(5, 52, 36);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_6(5, 55, 36);
         return jjMoveStringLiteralDfa6_6(active0, 0x8000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_6(active0, 0x100000000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_6(5, 29, 36);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_6(5, 46, 36);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_6(active0, 0x100000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_6(active0, 0x2000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_6(5, 58, 36);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_6(active0, 0x8000000000000000L, active1, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa6_6(active0, 0x808000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_6(active0, 0x10000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_6(5, 53, 36);
         return jjMoveStringLiteralDfa6_6(active0, 0x40004000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_6(active0, 0x800000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_6(5, 62, 36);
         break;
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_6(5, 17, 36);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_6(5, 41, 36);
         return jjMoveStringLiteralDfa6_6(active0, 0x104000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_6(4, active0, active1, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa6_6(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_6(4, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(5, active0, active1, 0L, 0L, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_6(active0, 0x100000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_6(active0, 0x40000010000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_6(6, 49, 36);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_6(6, 50, 36);
         return jjMoveStringLiteralDfa7_6(active0, 0x8000010000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa7_6(active0, 0x100000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_6(active0, 0L, active1, 0x8L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_6(6, 18, 36);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_6(active0, 0x800000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_6(6, 32, 36);
         break;
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_6(6, 27, 36);
         return jjMoveStringLiteralDfa7_6(active0, 0x8000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_6(active0, 0x4000000L, active1, 0L);
      case 121:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_6(6, 35, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_6(5, active0, active1, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa7_6(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_6(5, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(6, active0, active1, 0L, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_6(active0, 0x100000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_6(7, 26, 36);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_6(7, 67, 36);
         return jjMoveStringLiteralDfa8_6(active0, 0x8040000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_6(active0, 0x8800010000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_6(7, 56, 36);
         break;
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_6(7, 16, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_6(6, active0, active1, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa8_6(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_6(6, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(7, active0, 0L, 0L, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_6(8, 51, 36);
         break;
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_6(8, 44, 36);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_6(active0, 0x800000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_6(active0, 0x40000000000L);
      case 116:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_6(8, 63, 36);
         return jjMoveStringLiteralDfa9_6(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_6(7, active0, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa9_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(7, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(8, active0, 0L, 0L, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_6(9, 42, 36);
         break;
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_6(9, 40, 36);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_6(active0, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_6(8, active0, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa10_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(8, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(9, active0, 0L, 0L, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_6(active0, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_6(9, active0, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa11_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(9, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(10, active0, 0L, 0L, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_6(11, 59, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_6(10, active0, 0L, 0L, 0L, 0L);
}
private final int jjMoveNfa_6(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 56;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 29:
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 28:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 56:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 33:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  else if (curChar == 36)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(49, 51);
                  else if (curChar == 39)
                     jjAddStates(52, 53);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 222)
                        kind = 222;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 222)
                        kind = 222;
                     jjCheckNAddStates(54, 56);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddStates(57, 59);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(52, 53);
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 228)
                     kind = 228;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 11);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(49, 51);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 22:
                  if (curChar == 34 && kind > 229)
                     kind = 229;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(60, 63);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 35:
                  if (curChar != 36)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar != 46)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddStates(64, 66);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddStates(64, 66);
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddTwoStates(43, 8);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddTwoStates(47, 8);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 8);
                  break;
               case 52:
                  if (curChar != 48)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddStates(54, 56);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddTwoStates(54, 2);
                  break;
               case 55:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddTwoStates(55, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(27);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 230)
                        kind = 230;
                  }
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(27);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 222)
                     kind = 222;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 226)
                     kind = 226;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(72, 74);
                  break;
               case 13:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(75, 77);
                  break;
               case 21:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 27:
                  if (curChar == 101 && kind > 230)
                     kind = 230;
                  break;
               case 30:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 34:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(80, 81);
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(82, 83);
                  break;
               case 53:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddTwoStates(54, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 29:
               case 36:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 28:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 56:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 33:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 31:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(49, 51);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 56 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active3 & 0x4000000000000L) != 0L || (active4 & 0x400000L) != 0L)
            return 4;
         if ((active0 & 0x3e00000000L) != 0L)
         {
            jjmatchedKind = 231;
            return 33;
         }
         if ((active0 & 0xfffffc1ffff0000L) != 0L || (active1 & 0x1cL) != 0L)
         {
            jjmatchedKind = 231;
            return 36;
         }
         if ((active0 & 0xf000000000000000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 231;
            return 29;
         }
         return -1;
      case 1:
         if ((active0 & 0x8030000000L) != 0L)
            return 36;
         if ((active0 & 0x7fffff7dcfff0000L) != 0L || (active1 & 0x1cL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 1;
            }
            return 36;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x3L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 1;
            }
            return 28;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 1;
            }
            return 32;
         }
         return -1;
      case 2:
         if ((active0 & 0x982000000000L) != 0L || (active1 & 0x2L) != 0L)
            return 36;
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 2;
            }
            return 56;
         }
         if ((active0 & 0xffff675defff0000L) != 0L || (active1 & 0x1cL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 2;
            }
            return 36;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 2;
            }
            return 31;
         }
         return -1;
      case 3:
         if ((active0 & 0x10012040c0b00000L) != 0L || (active1 & 0x5L) != 0L)
            return 36;
         if ((active0 & 0xeffe571d2f4f0000L) != 0L || (active1 & 0x18L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 3;
            return 36;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 3;
            return 56;
         }
         return -1;
      case 4:
         if ((active0 & 0x6240001e03480000L) != 0L || (active1 & 0x10L) != 0L)
            return 36;
         if ((active0 & 0x8dbe57012c070000L) != 0L || (active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 231;
               jjmatchedPos = 4;
            }
            return 36;
         }
         return -1;
      case 5:
         if ((active0 & 0x44b0420020020000L) != 0L)
            return 36;
         if ((active0 & 0x890e15090c050000L) != 0L || (active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 5;
            return 36;
         }
         return -1;
      case 6:
         if ((active0 & 0x6000908040000L) != 0L)
            return 36;
         if ((active0 & 0x8908150004010000L) != 0L || (active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 6;
            return 36;
         }
         return -1;
      case 7:
         if ((active0 & 0x100000004010000L) != 0L || (active1 & 0x8L) != 0L)
            return 36;
         if ((active0 & 0x8808150000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 7;
            return 36;
         }
         return -1;
      case 8:
         if ((active0 & 0x8008100000000000L) != 0L)
            return 36;
         if ((active0 & 0x800050000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 8;
            return 36;
         }
         return -1;
      case 9:
         if ((active0 & 0x50000000000L) != 0L)
            return 36;
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 9;
            return 36;
         }
         return -1;
      case 10:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 10;
            return 36;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 246;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x0L, 0x2000000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 265;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x0L, 0x0L, 0x40000L);
      case 38:
         jjmatchedKind = 262;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x0L, 0x8000000000000000L, 0x8000L);
      case 40:
         jjmatchedKind = 234;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x0L, 0x0L, 0x400000000L);
      case 41:
         return jjStopAtPos(0, 235);
      case 42:
         jjmatchedKind = 260;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x0L, 0x0L, 0x800002000L);
      case 43:
         jjmatchedKind = 258;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x0L, 0x0L, 0x801L);
      case 44:
         return jjStopAtPos(0, 241);
      case 45:
         jjmatchedKind = 259;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x0L, 0x0L, 0x2001002L);
      case 46:
         jjmatchedKind = 242;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x0L, 0x0L, 0x400000L);
      case 47:
         jjmatchedKind = 261;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x0L, 0x0L, 0x4000L);
      case 58:
         return jjStopAtPos(0, 249);
      case 59:
         return jjStopAtPos(0, 240);
      case 60:
         jjmatchedKind = 245;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x0L, 0x800000000000000L, 0x78880400L);
      case 61:
         jjmatchedKind = 244;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x0L, 0x400000000000000L, 0x4000000L);
      case 62:
         jjmatchedKind = 289;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x0L, 0x1000000000000000L, 0x180300000L);
      case 63:
         return jjStopAtPos(0, 248);
      case 64:
         return jjStopAtPos(0, 243);
      case 91:
         return jjStopAtPos(0, 238);
      case 92:
         return jjStopAtPos(0, 280);
      case 93:
         return jjStopAtPos(0, 239);
      case 94:
         jjmatchedKind = 264;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x0L, 0x0L, 0x20000L);
      case 97:
         return jjMoveStringLiteralDfa1_5(0x30000L, 0x0L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_5(0x1c0000L, 0x0L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_5(0x7e00000L, 0x0L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_5(0x38000000L, 0x0L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_5(0x1c0000000L, 0x0L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_5(0x3e00000000L, 0x0L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_5(0x4000000000L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_5(0x1f8000000000L, 0x0L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_5(0x200000000000L, 0x0L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_5(0x1c00000000000L, 0x0L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_5(0x1e000000000000L, 0x0L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_5(0x20000000000000L, 0x0L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_5(0xfc0000000000000L, 0x0L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_5(0xf000000000000000L, 0x3L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_5(0x0L, 0xcL, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_5(0x0L, 0x10L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 236);
      case 124:
         jjmatchedKind = 263;
         return jjMoveStringLiteralDfa1_5(0x0L, 0x0L, 0x4000000000000000L, 0x10000L);
      case 125:
         return jjStopAtPos(0, 237);
      case 126:
         return jjStopAtPos(0, 247);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_5(long active0, long active1, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, active0, active1, 0L, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 255);
         break;
      case 41:
         if ((active4 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 291);
         break;
      case 42:
         if ((active4 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 290);
         break;
      case 43:
         if ((active4 & 0x1L) != 0L)
            return jjStopAtPos(1, 256);
         break;
      case 45:
         if ((active4 & 0x2L) != 0L)
            return jjStopAtPos(1, 257);
         else if ((active4 & 0x800000L) != 0L)
            return jjStopAtPos(1, 279);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0L, active3, 0L, active4, 0x400000L);
      case 58:
         if ((active4 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 286);
         break;
      case 60:
         if ((active4 & 0x400L) != 0L)
         {
            jjmatchedKind = 266;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0L, active3, 0L, active4, 0x80000L);
      case 61:
         if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 252);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 253);
         else if ((active4 & 0x800L) != 0L)
            return jjStopAtPos(1, 267);
         else if ((active4 & 0x1000L) != 0L)
            return jjStopAtPos(1, 268);
         else if ((active4 & 0x2000L) != 0L)
            return jjStopAtPos(1, 269);
         else if ((active4 & 0x4000L) != 0L)
            return jjStopAtPos(1, 270);
         else if ((active4 & 0x8000L) != 0L)
            return jjStopAtPos(1, 271);
         else if ((active4 & 0x10000L) != 0L)
            return jjStopAtPos(1, 272);
         else if ((active4 & 0x20000L) != 0L)
            return jjStopAtPos(1, 273);
         else if ((active4 & 0x40000L) != 0L)
            return jjStopAtPos(1, 274);
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0L, active3, 0L, active4, 0x3c000000L);
      case 62:
         if ((active4 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 281);
         else if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 288;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_5(active0, 0L, active1, 0L, active3, 0L, active4, 0x80300000L);
      case 97:
         return jjMoveStringLiteralDfa2_5(active0, 0x2400200600000L, active1, 0L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_5(active0, 0x10000L, active1, 0L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_5(active0, 0x20800008000000L, active1, 0L, active3, 0L, active4, 0L);
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_5(1, 39, 36);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_5(active0, 0x7040000000800000L, active1, 0x10L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_5(active0, 0xc00000000L, active1, 0L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_5(active0, 0x1041000000L, active1, 0L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_5(active0, 0x30000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_5(active0, 0x1c0080000000L, active1, 0L, active3, 0L, active4, 0L);
      case 111:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_5(active0, 0x206026040000L, active1, 0xcL, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_5(active0, 0x800c000000080000L, active1, 0x3L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_5(active0, 0x20000L, active1, 0L, active3, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_5(active0, 0x180000000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_5(active0, 0x211000000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_5(active0, 0x400000000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_5(active0, 0x100000000L, active1, 0L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_5(active0, 0x800000000100000L, active1, 0L, active3, 0L, active4, 0L);
      case 124:
         if ((active3 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 254);
         break;
      default :
         break;
   }
   return jjStartNfa_5(0, active0, active1, 0L, active3, active4);
}
private final int jjMoveStringLiteralDfa2_5(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_5(0, old0, old1, 0L, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, active0, active1, 0L, 0L, active4);
      return 2;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa3_5(active0, 0L, active1, 0L, active4, 0x20000000L);
      case 46:
         if ((active4 & 0x400000L) != 0L)
            return jjStopAtPos(2, 278);
         break;
      case 61:
         if ((active4 & 0x80000L) != 0L)
            return jjStopAtPos(2, 275);
         else if ((active4 & 0x100000L) != 0L)
            return jjStopAtPos(2, 276);
         else if ((active4 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 283;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_5(active0, 0L, active1, 0L, active4, 0x10000000L);
      case 62:
         if ((active4 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 282);
         else if ((active4 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_5(active0, 0L, active1, 0L, active4, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa3_5(active0, 0x8080000001800000L, active1, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_5(active0, 0x10000000000000L, active1, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_5(active0, 0x2000000000000L, active1, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_5(active0, 0x80000L, active1, 0L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_5(active0, 0x8000000L, active1, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_5(active0, 0x1404000000000000L, active1, 0x14L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_5(active0, 0x1000200000000L, active1, 0x8L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_5(active0, 0x800200c06000000L, active1, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_5(active0, 0x48001000040000L, active1, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_5(active0, 0x200030000000000L, active1, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_5(2, 37, 36);
         return jjMoveStringLiteralDfa3_5(active0, 0x6100000000000000L, active1, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_5(active0, 0x40040230000L, active1, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_5(active0, 0x20504100500000L, active1, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_5(active0, 0xa0000000L, active1, 0x1L, active4, 0L);
      case 119:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_5(2, 47, 36);
         break;
      case 121:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_5(2, 65, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_5(1, active0, active1, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa3_5(long old0, long active0, long old1, long active1, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_5(1, old0, old1, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(2, active0, active1, 0L, 0L, active4);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active4 & 0x200000L) != 0L)
            return jjStopAtPos(3, 277);
         return jjMoveStringLiteralDfa4_5(active0, 0L, active1, 0L, active4, 0x20000000L);
      case 62:
         if ((active4 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 284);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_5(active0, 0x1c08080000L, active1, 0x8L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_5(active0, 0x20000000L, active1, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_5(active0, 0x800000000400000L, active1, 0L, active4, 0L);
      case 100:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_5(3, 66, 36);
         break;
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_5(3, 20, 36);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_5(3, 21, 36);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_5(3, 30, 36);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_5(3, 64, 36);
         return jjMoveStringLiteralDfa4_5(active0, 0x200100100020000L, active1, 0L, active4, 0L);
      case 103:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_5(3, 45, 36);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_5(active0, 0x100400000000000L, active1, 0L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_5(active0, 0x2000000000000L, active1, 0L, active4, 0L);
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_5(3, 48, 36);
         return jjMoveStringLiteralDfa4_5(active0, 0x10010000040000L, active1, 0x10L, active4, 0L);
      case 109:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_5(3, 31, 36);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_5(active0, 0x8000000000000000L, active1, 0L, active4, 0L);
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_5(3, 38, 36);
         return jjMoveStringLiteralDfa4_5(active0, 0x6000020000000000L, active1, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_5(3, 23, 36);
         return jjMoveStringLiteralDfa4_5(active0, 0x40000000000000L, active1, 0L, active4, 0L);
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_5(3, 60, 36);
         return jjMoveStringLiteralDfa4_5(active0, 0x203000000L, active1, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_5(active0, 0x488040004010000L, active1, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_5(active0, 0x20000000000000L, active1, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_5(active0, 0x4000000000000L, active1, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_5(2, active0, active1, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa4_5(long old0, long active0, long old1, long active1, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_5(2, old0, old1, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(3, active0, active1, 0L, 0L, active4);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active4 & 0x20000000L) != 0L)
            return jjStopAtPos(4, 285);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_5(active0, 0x6040000000000L, active1, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_5(active0, 0x500000000000000L, active1, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_5(4, 33, 36);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_5(4, 68, 36);
         return jjMoveStringLiteralDfa5_5(active0, 0x8010000040000L, active1, 0L, active4, 0L);
      case 104:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_5(4, 22, 36);
         return jjMoveStringLiteralDfa5_5(active0, 0x800000000000000L, active1, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_5(active0, 0x90000004000000L, active1, 0L, active4, 0L);
      case 107:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_5(4, 19, 36);
         break;
      case 108:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_5(active0, 0x820000000L, active1, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_5(active0, 0x100000000L, active1, 0L, active4, 0L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_5(4, 57, 36);
         return jjMoveStringLiteralDfa5_5(active0, 0x20120000030000L, active1, 0L, active4, 0L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_5(4, 24, 36);
         return jjMoveStringLiteralDfa5_5(active0, 0x8000000000000000L, active1, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_5(4, 25, 36);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_5(4, 36, 36);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_5(4, 54, 36);
         return jjMoveStringLiteralDfa5_5(active0, 0L, active1, 0x8L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_5(active0, 0x8000000L, active1, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_5(active0, 0x400000000000L, active1, 0L, active4, 0L);
      case 119:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_5(active0, 0x4000000000000000L, active1, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_5(3, active0, active1, 0L, 0L, active4);
}
private final int jjMoveStringLiteralDfa5_5(long old0, long active0, long old1, long active1, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_5(3, old0, old1, 0L, 0L, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(4, active0, active1, 0L, 0L, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_5(active0, 0x50000L, active1, 0L);
      case 99:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_5(5, 52, 36);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_5(5, 55, 36);
         return jjMoveStringLiteralDfa6_5(active0, 0x8000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_5(active0, 0x100000000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_5(5, 29, 36);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_5(5, 46, 36);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_5(active0, 0x100000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_5(active0, 0x2000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_5(5, 58, 36);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_5(active0, 0x8000000000000000L, active1, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa6_5(active0, 0x808000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_5(active0, 0x10000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_5(5, 53, 36);
         return jjMoveStringLiteralDfa6_5(active0, 0x40004000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_5(active0, 0x800000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_5(5, 62, 36);
         break;
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_5(5, 17, 36);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_5(5, 41, 36);
         return jjMoveStringLiteralDfa6_5(active0, 0x104000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_5(4, active0, active1, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa6_5(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_5(4, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(5, active0, active1, 0L, 0L, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_5(active0, 0x100000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_5(active0, 0x40000010000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_5(6, 49, 36);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_5(6, 50, 36);
         return jjMoveStringLiteralDfa7_5(active0, 0x8000010000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa7_5(active0, 0x100000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_5(active0, 0L, active1, 0x8L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_5(6, 18, 36);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_5(active0, 0x800000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_5(6, 32, 36);
         break;
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_5(6, 27, 36);
         return jjMoveStringLiteralDfa7_5(active0, 0x8000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_5(active0, 0x4000000L, active1, 0L);
      case 121:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_5(6, 35, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_5(5, active0, active1, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa7_5(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_5(5, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(6, active0, active1, 0L, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_5(active0, 0x100000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_5(7, 26, 36);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_5(7, 67, 36);
         return jjMoveStringLiteralDfa8_5(active0, 0x8040000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_5(active0, 0x8800010000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_5(7, 56, 36);
         break;
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_5(7, 16, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_5(6, active0, active1, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa8_5(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_5(6, old0, old1, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(7, active0, 0L, 0L, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_5(8, 51, 36);
         break;
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_5(8, 44, 36);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_5(active0, 0x800000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_5(active0, 0x40000000000L);
      case 116:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_5(8, 63, 36);
         return jjMoveStringLiteralDfa9_5(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_5(7, active0, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa9_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(7, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(8, active0, 0L, 0L, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_5(9, 42, 36);
         break;
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_5(9, 40, 36);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_5(active0, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(8, active0, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa10_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(8, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(9, active0, 0L, 0L, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_5(active0, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(9, active0, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa11_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(9, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(10, active0, 0L, 0L, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_5(11, 59, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_5(10, active0, 0L, 0L, 0L, 0L);
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 56;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 29:
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 28:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 56:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 33:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  else if (curChar == 36)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(49, 51);
                  else if (curChar == 39)
                     jjAddStates(52, 53);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 222)
                        kind = 222;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 222)
                        kind = 222;
                     jjCheckNAddStates(54, 56);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddStates(57, 59);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(52, 53);
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 228)
                     kind = 228;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 11);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(49, 51);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 22:
                  if (curChar == 34 && kind > 229)
                     kind = 229;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(60, 63);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 35:
                  if (curChar != 36)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 48);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar != 46)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddStates(64, 66);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddStates(64, 66);
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddTwoStates(43, 8);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 226)
                     kind = 226;
                  jjCheckNAddTwoStates(47, 8);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 8);
                  break;
               case 52:
                  if (curChar != 48)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddStates(54, 56);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddTwoStates(54, 2);
                  break;
               case 55:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddTwoStates(55, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(27);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 230)
                        kind = 230;
                  }
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(27);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 222)
                     kind = 222;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 226)
                     kind = 226;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(72, 74);
                  break;
               case 13:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(75, 77);
                  break;
               case 21:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 27:
                  if (curChar == 101 && kind > 230)
                     kind = 230;
                  break;
               case 30:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 34:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(80, 81);
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(82, 83);
                  break;
               case 53:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 222)
                     kind = 222;
                  jjCheckNAddTwoStates(54, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 29:
               case 36:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 28:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 56:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 33:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 31:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(36);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(49, 51);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 56 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x1000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   45, 46, 51, 52, 55, 56, 15, 26, 27, 29, 17, 19, 60, 62, 9, 11, 
   12, 15, 26, 27, 31, 29, 47, 48, 15, 55, 56, 15, 13, 14, 20, 21, 
   23, 28, 30, 32, 49, 50, 53, 54, 57, 58, 38, 39, 44, 45, 48, 49, 
   8, 19, 20, 22, 10, 12, 53, 55, 2, 4, 5, 8, 19, 20, 24, 22, 
   40, 41, 8, 48, 49, 8, 6, 7, 13, 14, 16, 21, 23, 25, 42, 43, 
   46, 47, 50, 51, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\141\142\163\164\162\141\143\164", "\141\163\163\145\162\164", 
"\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", 
"\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\156\165\155", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\164\141\164\151\143", "\163\164\162\151\143\164\146\160", 
"\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", 
"\134\157\162\151\147\151\156\141\154\137\163\160\145\143", "\134\157\162\151\147\151\156\141\154\137\143\141\163\145", 
"\134\157\162\151\147\151\156\141\154\137\143\154\141\165\163\145", "\134\157\162\151\147\151\156\141\154", "\150\145\156\143\145\137\142\171", 
"\150\145\156\143\145\137\142\171\137\162\145\144\165\156\144\141\156\164\154\171", "\155\157\144\145\154", 
"\163\160\145\143\137\160\162\157\164\145\143\164\145\144", "\147\150\157\163\164", "\160\165\162\145", 
"\151\156\163\164\141\156\143\145", "\150\145\154\160\145\162", 
"\165\156\151\156\151\164\151\141\154\151\172\145\144", "\134\152\141\166\141\137\155\141\164\150", 
"\163\160\145\143\137\152\141\166\141\137\155\141\164\150", "\163\160\145\143\137\163\141\146\145\137\155\141\164\150", 
"\143\157\144\145\137\152\141\166\141\137\155\141\164\150", "\143\157\144\145\137\163\141\146\145\137\155\141\164\150", 
"\141\154\163\157", "\163\160\145\143\137\160\165\142\154\151\143", 
"\163\160\145\143\137\142\151\147\151\156\164\137\155\141\164\150", "\143\157\144\145\137\142\151\147\151\156\164\137\155\141\164\150", 
"\156\157\156\137\156\165\154\154", "\156\165\154\154\141\142\154\145", 
"\156\165\154\154\141\142\154\145\137\142\171\137\144\145\146\141\165\154\164", "\145\170\164\162\141\143\164", "\155\145\164\150\157\144", 
"\143\157\156\163\164\162\165\143\164\157\162", "\134\124\131\120\105", "\151\156", 
"\151\156\137\162\145\144\165\156\144\141\156\164\154\171", "\134\151\156\164\157", "\155\141\160\163", 
"\155\141\160\163\137\162\145\144\165\156\144\141\156\164\154\171", "\163\164\141\164\151\143\137\151\156\151\164\151\141\154\151\172\145\162", 
"\155\141\151\156\164\141\151\156\151\156\147", 
"\155\141\151\156\164\141\151\156\151\156\147\137\162\145\144\165\156\144\141\156\164\154\171", "\154\157\157\160\137\151\156\166\141\162\151\141\156\164", 
"\154\157\157\160\137\151\156\166\141\162\151\141\156\164\137\162\145\144\165\156\144\141\156\164\154\171", "\144\145\143\162\145\141\163\151\156\147", 
"\144\145\143\162\145\141\163\151\156\147\137\162\145\144\165\156\144\141\156\164\154\171", "\144\145\143\162\145\141\163\145\163", 
"\144\145\143\162\145\141\163\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\141\163\163\165\155\145", 
"\141\163\163\165\155\145\137\162\145\144\165\156\144\141\156\164\154\171", "\163\145\164", "\162\145\146\151\156\151\156\147", 
"\165\156\162\145\141\143\150\141\142\154\145", "\144\145\142\165\147", "\150\145\156\143\145\142\171", 
"\150\145\156\143\145\142\171\137\162\145\144\165\156\144\141\156\164\154\171", "\151\156\166\141\162\151\141\156\164", 
"\151\156\166\141\162\151\141\156\164\137\162\145\144\165\156\144\141\156\164\154\171", "\143\157\156\163\164\162\141\151\156\164", 
"\143\157\156\163\164\162\141\151\156\164\137\162\145\144\165\156\144\141\156\164\154\171", "\134\145\166\145\162\171\164\150\151\156\147", 
"\134\163\165\143\150\137\164\150\141\164", "\162\145\160\162\145\163\145\156\164\163", 
"\162\145\160\162\145\163\145\156\164\163\137\162\145\144\165\156\144\141\156\164\154\171", "\151\156\151\164\151\141\154\154\171", "\162\145\141\144\141\142\154\145", 
"\167\162\151\164\141\142\154\145", "\155\157\156\151\164\157\162\163\137\146\157\162", 
"\143\150\157\157\163\145", "\157\162", "\143\150\157\157\163\145\137\151\146", 
"\141\142\162\165\160\164\137\142\145\150\141\166\151\157\162", "\141\142\162\165\160\164\137\142\145\150\141\166\151\157\165\162", 
"\143\157\156\164\151\156\165\145\163", 
"\143\157\156\164\151\156\165\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\142\162\145\141\153\163", 
"\142\162\145\141\153\163\137\162\145\144\165\156\144\141\156\164\154\171", "\162\145\164\165\162\156\163", 
"\162\145\164\165\162\156\163\137\162\145\144\165\156\144\141\156\164\154\171", "\134\162\145\163\165\154\164", "\134\157\154\144", "\134\160\162\145", 
"\134\156\157\164\137\141\163\163\151\147\156\145\144", "\134\156\157\164\137\155\157\144\151\146\151\145\144", 
"\134\157\156\154\171\137\141\143\143\145\163\163\145\144", "\134\157\156\154\171\137\143\141\160\164\165\162\145\144", 
"\134\157\156\154\171\137\143\141\154\154\145\144", "\134\146\162\145\163\150", "\134\162\145\141\143\150", 
"\134\144\165\162\141\164\151\157\156", "\163\160\141\143\145", 
"\134\167\157\162\153\151\156\147\137\163\160\141\143\145", "\134\156\157\156\156\165\154\154\145\154\145\155\145\156\164\163", 
"\134\164\171\160\145\157\146", "\134\145\154\145\155\164\171\160\145", "\154\157\143\153\163\145\164", 
"\134\155\141\170", "\134\151\163\137\151\156\151\164\151\141\154\151\172\145\144", 
"\134\151\156\166\141\162\151\141\156\164\137\146\157\162", "\134\154\142\154\156\145\147", "\134\146\157\162\141\154\154", 
"\134\145\170\151\163\164\163", "\134\155\151\156", "\134\156\165\155\137\157\146", 
"\134\160\162\157\144\165\143\164", "\134\163\165\155", "\134\156\157\164\150\151\156\147", 
"\134\156\157\164\137\163\160\145\143\151\146\151\145\144", "\134\154\142\154\160\157\163", 
"\134\157\156\154\171\137\141\163\163\151\147\156\145\144", "\142\145\150\141\166\151\157\162", "\142\145\150\141\166\151\157\165\162", 
"\156\157\162\155\141\154\137\142\145\150\141\166\151\157\162", "\156\157\162\155\141\154\137\142\145\150\141\166\151\157\165\162", 
"\145\170\143\145\160\164\151\157\156\141\154\137\142\145\150\141\166\151\157\162", 
"\145\170\143\145\160\164\151\157\156\141\154\137\142\145\150\141\166\151\157\165\162", "\163\141\155\145", "\162\145\161\165\151\162\145\163", 
"\162\145\161\165\151\162\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\160\162\145\137\162\145\144\165\156\144\141\156\164\154\171", 
"\145\156\163\165\162\145\163", "\160\157\163\164", 
"\145\156\163\165\162\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\160\157\163\164\137\162\145\144\165\156\144\141\156\164\154\171", 
"\163\151\147\156\141\154\163", 
"\163\151\147\156\141\154\163\137\162\145\144\165\156\144\141\156\164\154\171", "\145\170\163\165\162\145\163", 
"\145\170\163\165\162\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\163\151\147\156\141\154\163\137\157\156\154\171", 
"\163\151\147\156\141\154\163\137\157\156\154\171\137\162\145\144\165\156\144\141\156\164\154\171", "\144\151\166\145\162\147\145\163", 
"\144\151\166\145\162\147\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\167\150\145\156", 
"\167\150\145\156\137\162\145\144\165\156\144\141\156\164\154\171", "\141\163\163\151\147\156\141\142\154\145", 
"\141\163\163\151\147\156\141\142\154\145\137\162\145\144\165\156\144\141\156\164\154\171", "\155\157\144\151\146\151\141\142\154\145", 
"\155\157\144\151\146\151\141\142\154\145\137\162\145\144\165\156\144\141\156\164\154\171", "\143\141\154\154\141\142\154\145", 
"\143\141\154\154\141\142\154\145\137\162\145\144\165\156\144\141\156\164\154\171", "\155\145\141\163\165\162\145\144\137\142\171", 
"\155\145\141\163\165\162\145\144\137\142\171\137\162\145\144\165\156\144\141\156\164\154\171", "\143\141\160\164\165\162\145\163", 
"\143\141\160\164\165\162\145\163\137\162\145\144\165\156\144\141\156\164\154\171", 
"\167\157\162\153\151\156\147\137\163\160\141\143\145\137\162\145\144\165\156\144\141\156\164\154\171", 
"\144\165\162\141\164\151\157\156\137\162\145\144\165\156\144\141\156\164\154\171", "\155\157\144\151\146\151\145\163", 
"\155\157\144\151\146\151\145\163\137\162\145\144\165\156\144\141\156\164\154\171", "\143\157\144\145", 
"\141\163\163\145\162\164\137\162\145\144\165\156\144\141\156\164\154\171", "\141\170\151\157\155", "\141\143\143\145\163\163\151\142\154\145", 
"\141\143\143\145\163\163\151\142\154\145\137\162\145\144\165\156\144\141\156\164\154\171", "\151\155\160\154\151\145\163\137\164\150\141\164", 
"\146\157\162\137\145\170\141\155\160\154\145", 
"\145\170\143\145\160\164\151\157\156\141\154\137\145\170\141\155\160\154\145", "\156\157\162\155\141\154\137\145\170\141\155\160\154\145", 
"\155\157\144\145\154\137\160\162\157\147\162\141\155", null, null, null, null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\100", "\75", "\74", 
"\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", 
"\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", "\136", "\45", 
"\74\74", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", 
"\45\75", "\74\74\75", "\76\76\75", "\76\76\76\75", "\56\56\56", "\74\55", "\134", 
"\55\76", "\75\75\76", "\74\75\75", "\74\75\75\76", "\74\75\41\75\76", "\74\72", 
"\76\76\76", "\76\76", "\76", "\50\52", "\52\51", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_JML_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
   "IN_JML_SINGLE_LINE", 
   "IN_JML_MULTI_LINE", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 0, 2, 1, 3, 4, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffff0001L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffcf47fffffffL, 
   0xfffffffffL, 
};
static final long[] jjtoSkip = {
   0xfefeL, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
static final long[] jjtoSpecial = {
   0x80beL, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
static final long[] jjtoMore = {
   0x100L, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[63];
private final int[] jjstateSet = new int[126];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public ContractParserTokenManager(CharStream stream){
   input_stream = stream;
}
public ContractParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 63; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   t.offset = input_stream.getOffset();
   t.length = input_stream.getLength();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 10 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
}
